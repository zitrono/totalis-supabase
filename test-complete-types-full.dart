
// Totalis Types v1.0.999 - COMPLETE COVERAGE
// Generated: 2025-06-01T14:25:40.059Z
// DO NOT EDIT - This file is automatically generated
// Coverage: Database Tables + Views + Enums + Edge Functions

// ======================
// DATABASE ENUMS
// ======================
enum SEX { male, female, non_binary, other, prefer_not_to_say }

enum ROLE { user, assistant, system }

enum CONTENT_TYPE { text, voice, checkin, feedback }

enum STATUS { active, completed, abandoned }

enum RECOMMENDATION_TYPE { action, category, insight }

enum INTERACTION_TYPE { viewed, liked, dismissed, saved }

enum PLATFORM { ios, android, web }

enum TRANSCRIPTION_STATUS { pending, processing, completed, failed }

enum LOG_LEVEL { debug, info, warning, error }

// ======================
// DATABASE MODELS (TABLES)
// ======================
// test-typesactive_recommendations.dart
class ActiveRecommendations implements SupadartClass<ActiveRecommendations> {
  final String? id;
  final String? userId;
  final String? categoryId;
  final String? checkinMessageId;
  final String? parentRecommendationId;
  final String? title;
  final String? recommendationText;
  final String? action;
  final String? why;
  final String? recommendationType;
  final int? importance;
  final num? relevance;
  final List<String>? recommendedCategories;
  final String? context;
  final bool? isActive;
  final DateTime? viewedAt;
  final DateTime? dismissedAt;
  final DateTime? createdAt;
  final Map<String, dynamic>? metadata;
  final String? categoryName;
  final String? categoryIcon;
  final String? categoryColor;
  const ActiveRecommendations({
    this.id,
    this.userId,
    this.categoryId,
    this.checkinMessageId,
    this.parentRecommendationId,
    this.title,
    this.recommendationText,
    this.action,
    this.why,
    this.recommendationType,
    this.importance,
    this.relevance,
    this.recommendedCategories,
    this.context,
    this.isActive,
    this.viewedAt,
    this.dismissedAt,
    this.createdAt,
    this.metadata,
    this.categoryName,
    this.categoryIcon,
    this.categoryColor,
  });
  static String get table_name => 'active_recommendations';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_checkinMessageId => 'checkin_message_id';
  static String get c_parentRecommendationId => 'parent_recommendation_id';
  static String get c_title => 'title';
  static String get c_recommendationText => 'recommendation_text';
  static String get c_action => 'action';
  static String get c_why => 'why';
  static String get c_recommendationType => 'recommendation_type';
  static String get c_importance => 'importance';
  static String get c_relevance => 'relevance';
  static String get c_recommendedCategories => 'recommended_categories';
  static String get c_context => 'context';
  static String get c_isActive => 'is_active';
  static String get c_viewedAt => 'viewed_at';
  static String get c_dismissedAt => 'dismissed_at';
  static String get c_createdAt => 'created_at';
  static String get c_metadata => 'metadata';
  static String get c_categoryName => 'category_name';
  static String get c_categoryIcon => 'category_icon';
  static String get c_categoryColor => 'category_color';
  static List<ActiveRecommendations> converter(
      List<Map<String, dynamic>> data) {
    return data.map(ActiveRecommendations.fromJson).toList();
  }
  static ActiveRecommendations converterSingle(Map<String, dynamic> data) {
    return ActiveRecommendations.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    String? categoryName,
    String? categoryIcon,
    String? categoryColor,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinMessageId != null) 'checkin_message_id': checkinMessageId,
      if (parentRecommendationId != null)
        'parent_recommendation_id': parentRecommendationId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance.toString(),
      if (recommendedCategories != null)
        'recommended_categories': recommendedCategories.map((e) => e).toList(),
      if (context != null) 'context': context,
      if (isActive != null) 'is_active': isActive,
      if (viewedAt != null) 'viewed_at': viewedAt.toUtc().toIso8601String(),
      if (dismissedAt != null)
        'dismissed_at': dismissedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
      if (categoryName != null) 'category_name': categoryName,
      if (categoryIcon != null) 'category_icon': categoryIcon,
      if (categoryColor != null) 'category_color': categoryColor,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    String? categoryName,
    String? categoryIcon,
    String? categoryColor,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      categoryName: categoryName,
      categoryIcon: categoryIcon,
      categoryColor: categoryColor,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    String? categoryName,
    String? categoryIcon,
    String? categoryColor,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      categoryName: categoryName,
      categoryIcon: categoryIcon,
      categoryColor: categoryColor,
    );
  }
  factory ActiveRecommendations.fromJson(Map<String, dynamic> jsonn) {
    return ActiveRecommendations(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      checkinMessageId: jsonn['checkin_message_id'] != null
          ? jsonn['checkin_message_id'].toString()
          : null,
      parentRecommendationId: jsonn['parent_recommendation_id'] != null
          ? jsonn['parent_recommendation_id'].toString()
          : null,
      title: jsonn['title'] != null ? jsonn['title'].toString() : null,
      recommendationText: jsonn['recommendation_text'] != null
          ? jsonn['recommendation_text'].toString()
          : null,
      action: jsonn['action'] != null ? jsonn['action'].toString() : null,
      why: jsonn['why'] != null ? jsonn['why'].toString() : null,
      recommendationType: jsonn['recommendation_type'] != null
          ? jsonn['recommendation_type'].toString()
          : null,
      importance: jsonn['importance'] != null
          ? int.parse(jsonn['importance'].toString())
          : null,
      relevance: jsonn['relevance'] != null
          ? num.parse(jsonn['relevance'].toString())
          : null,
      recommendedCategories: jsonn['recommended_categories'] != null
          ? (jsonn['recommended_categories'] as List<dynamic>)
              .map((v) => v.toString())
              .toList()
          : null,
      context: jsonn['context'] != null ? jsonn['context'].toString() : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      viewedAt: jsonn['viewed_at'] != null
          ? DateTime.parse(jsonn['viewed_at'].toString())
          : null,
      dismissedAt: jsonn['dismissed_at'] != null
          ? DateTime.parse(jsonn['dismissed_at'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      categoryName: jsonn['category_name'] != null
          ? jsonn['category_name'].toString()
          : null,
      categoryIcon: jsonn['category_icon'] != null
          ? jsonn['category_icon'].toString()
          : null,
      categoryColor: jsonn['category_color'] != null
          ? jsonn['category_color'].toString()
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    String? categoryName,
    String? categoryIcon,
    String? categoryColor,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinMessageId != null) 'checkin_message_id': checkinMessageId,
      if (parentRecommendationId != null)
        'parent_recommendation_id': parentRecommendationId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance,
      if (recommendedCategories != null)
        'recommended_categories': recommendedCategories,
      if (context != null) 'context': context,
      if (isActive != null) 'is_active': isActive,
      if (viewedAt != null) 'viewed_at': viewedAt,
      if (dismissedAt != null) 'dismissed_at': dismissedAt,
      if (createdAt != null) 'created_at': createdAt,
      if (metadata != null) 'metadata': metadata,
      if (categoryName != null) 'category_name': categoryName,
      if (categoryIcon != null) 'category_icon': categoryIcon,
      if (categoryColor != null) 'category_color': categoryColor,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      categoryName: categoryName,
      categoryIcon: categoryIcon,
      categoryColor: categoryColor,
    );
  }
  static const _unset = Object();
  ActiveRecommendations copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? checkinMessageId = _unset,
    Object? parentRecommendationId = _unset,
    Object? title = _unset,
    Object? recommendationText = _unset,
    Object? action = _unset,
    Object? why = _unset,
    Object? recommendationType = _unset,
    Object? importance = _unset,
    Object? relevance = _unset,
    Object? recommendedCategories = _unset,
    Object? context = _unset,
    Object? isActive = _unset,
    Object? viewedAt = _unset,
    Object? dismissedAt = _unset,
    Object? createdAt = _unset,
    Object? metadata = _unset,
    Object? categoryName = _unset,
    Object? categoryIcon = _unset,
    Object? categoryColor = _unset,
  }) {
    return ActiveRecommendations(
      id: id == _unset ? this.id : id as String?,
      userId: userId == _unset ? this.userId : userId as String?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      checkinMessageId: checkinMessageId == _unset
          ? this.checkinMessageId
          : checkinMessageId as String?,
      parentRecommendationId: parentRecommendationId == _unset
          ? this.parentRecommendationId
          : parentRecommendationId as String?,
      title: title == _unset ? this.title : title as String?,
      recommendationText: recommendationText == _unset
          ? this.recommendationText
          : recommendationText as String?,
      action: action == _unset ? this.action : action as String?,
      why: why == _unset ? this.why : why as String?,
      recommendationType: recommendationType == _unset
          ? this.recommendationType
          : recommendationType as String?,
      importance: importance == _unset ? this.importance : importance as int?,
      relevance: relevance == _unset ? this.relevance : relevance as num?,
      recommendedCategories: recommendedCategories == _unset
          ? this.recommendedCategories
          : recommendedCategories as List<String>?,
      context: context == _unset ? this.context : context as String?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      viewedAt: viewedAt == _unset ? this.viewedAt : viewedAt as DateTime?,
      dismissedAt:
          dismissedAt == _unset ? this.dismissedAt : dismissedAt as DateTime?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      categoryName:
          categoryName == _unset ? this.categoryName : categoryName as String?,
      categoryIcon:
          categoryIcon == _unset ? this.categoryIcon : categoryIcon as String?,
      categoryColor: categoryColor == _unset
          ? this.categoryColor
          : categoryColor as String?,
    );
  }
}

// test-typesanalytics_events.dart
class AnalyticsEvents implements SupadartClass<AnalyticsEvents> {
  final String id;
  final String? userId;
  final String? sessionId;
  final String eventName;
  final String? eventCategory;
  final Map<String, dynamic>? eventProperties;
  final String? platform;
  final String? appVersion;
  final Map<String, dynamic>? deviceInfo;
  final DateTime? createdAt;
  const AnalyticsEvents({
    required this.id,
    this.userId,
    this.sessionId,
    required this.eventName,
    this.eventCategory,
    this.eventProperties,
    this.platform,
    this.appVersion,
    this.deviceInfo,
    this.createdAt,
  });
  static String get table_name => 'analytics_events';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_sessionId => 'session_id';
  static String get c_eventName => 'event_name';
  static String get c_eventCategory => 'event_category';
  static String get c_eventProperties => 'event_properties';
  static String get c_platform => 'platform';
  static String get c_appVersion => 'app_version';
  static String get c_deviceInfo => 'device_info';
  static String get c_createdAt => 'created_at';
  static List<AnalyticsEvents> converter(List<Map<String, dynamic>> data) {
    return data.map(AnalyticsEvents.fromJson).toList();
  }
  static AnalyticsEvents converterSingle(Map<String, dynamic> data) {
    return AnalyticsEvents.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? sessionId,
    String? eventName,
    String? eventCategory,
    Map<String, dynamic>? eventProperties,
    String? platform,
    String? appVersion,
    Map<String, dynamic>? deviceInfo,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (sessionId != null) 'session_id': sessionId,
      if (eventName != null) 'event_name': eventName,
      if (eventCategory != null) 'event_category': eventCategory,
      if (eventProperties != null) 'event_properties': eventProperties,
      if (platform != null) 'platform': platform,
      if (appVersion != null) 'app_version': appVersion,
      if (deviceInfo != null) 'device_info': deviceInfo,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? sessionId,
    required String eventName,
    String? eventCategory,
    Map<String, dynamic>? eventProperties,
    String? platform,
    String? appVersion,
    Map<String, dynamic>? deviceInfo,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      sessionId: sessionId,
      eventName: eventName,
      eventCategory: eventCategory,
      eventProperties: eventProperties,
      platform: platform,
      appVersion: appVersion,
      deviceInfo: deviceInfo,
      createdAt: createdAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? sessionId,
    String? eventName,
    String? eventCategory,
    Map<String, dynamic>? eventProperties,
    String? platform,
    String? appVersion,
    Map<String, dynamic>? deviceInfo,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      sessionId: sessionId,
      eventName: eventName,
      eventCategory: eventCategory,
      eventProperties: eventProperties,
      platform: platform,
      appVersion: appVersion,
      deviceInfo: deviceInfo,
      createdAt: createdAt,
    );
  }
  factory AnalyticsEvents.fromJson(Map<String, dynamic> jsonn) {
    return AnalyticsEvents(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      sessionId:
          jsonn['session_id'] != null ? jsonn['session_id'].toString() : null,
      eventName:
          jsonn['event_name'] != null ? jsonn['event_name'].toString() : '',
      eventCategory: jsonn['event_category'] != null
          ? jsonn['event_category'].toString()
          : null,
      eventProperties: jsonn['event_properties'] != null
          ? jsonn['event_properties'] as Map<String, dynamic>
          : null,
      platform: jsonn['platform'] != null ? jsonn['platform'].toString() : null,
      appVersion:
          jsonn['app_version'] != null ? jsonn['app_version'].toString() : null,
      deviceInfo: jsonn['device_info'] != null
          ? jsonn['device_info'] as Map<String, dynamic>
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? sessionId,
    String? eventName,
    String? eventCategory,
    Map<String, dynamic>? eventProperties,
    String? platform,
    String? appVersion,
    Map<String, dynamic>? deviceInfo,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (sessionId != null) 'session_id': sessionId,
      if (eventName != null) 'event_name': eventName,
      if (eventCategory != null) 'event_category': eventCategory,
      if (eventProperties != null) 'event_properties': eventProperties,
      if (platform != null) 'platform': platform,
      if (appVersion != null) 'app_version': appVersion,
      if (deviceInfo != null) 'device_info': deviceInfo,
      if (createdAt != null) 'created_at': createdAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      sessionId: sessionId,
      eventName: eventName,
      eventCategory: eventCategory,
      eventProperties: eventProperties,
      platform: platform,
      appVersion: appVersion,
      deviceInfo: deviceInfo,
      createdAt: createdAt,
    );
  }
  static const _unset = Object();
  AnalyticsEvents copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? sessionId = _unset,
    Object? eventName = _unset,
    Object? eventCategory = _unset,
    Object? eventProperties = _unset,
    Object? platform = _unset,
    Object? appVersion = _unset,
    Object? deviceInfo = _unset,
    Object? createdAt = _unset,
  }) {
    return AnalyticsEvents(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String?,
      sessionId: sessionId == _unset ? this.sessionId : sessionId as String?,
      eventName: eventName == _unset ? this.eventName : eventName as String,
      eventCategory: eventCategory == _unset
          ? this.eventCategory
          : eventCategory as String?,
      eventProperties: eventProperties == _unset
          ? this.eventProperties
          : eventProperties as Map<String, dynamic>?,
      platform: platform == _unset ? this.platform : platform as String?,
      appVersion:
          appVersion == _unset ? this.appVersion : appVersion as String?,
      deviceInfo: deviceInfo == _unset
          ? this.deviceInfo
          : deviceInfo as Map<String, dynamic>?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
    );
  }
}

// test-typesapp_config.dart
class AppConfig implements SupadartClass<AppConfig> {
  final String key;
  final Map<String, dynamic> value;
  final String? description;
  final bool? isPublic;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  const AppConfig({
    required this.key,
    required this.value,
    this.description,
    this.isPublic,
    this.createdAt,
    this.updatedAt,
  });
  static String get table_name => 'app_config';
  static String get c_key => 'key';
  static String get c_value => 'value';
  static String get c_description => 'description';
  static String get c_isPublic => 'is_public';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static List<AppConfig> converter(List<Map<String, dynamic>> data) {
    return data.map(AppConfig.fromJson).toList();
  }
  static AppConfig converterSingle(Map<String, dynamic> data) {
    return AppConfig.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? key,
    Map<String, dynamic>? value,
    String? description,
    bool? isPublic,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (key != null) 'key': key,
      if (value != null) 'value': value,
      if (description != null) 'description': description,
      if (isPublic != null) 'is_public': isPublic,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? key,
    required Map<String, dynamic> value,
    String? description,
    bool? isPublic,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      key: key,
      value: value,
      description: description,
      isPublic: isPublic,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static Map<String, dynamic> update({
    String? key,
    Map<String, dynamic>? value,
    String? description,
    bool? isPublic,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      key: key,
      value: value,
      description: description,
      isPublic: isPublic,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  factory AppConfig.fromJson(Map<String, dynamic> jsonn) {
    return AppConfig(
      key: jsonn['key'] != null ? jsonn['key'].toString() : '',
      value: jsonn['value'] != null
          ? jsonn['value'] as Map<String, dynamic>
          : <String, dynamic>{},
      description:
          jsonn['description'] != null ? jsonn['description'].toString() : null,
      isPublic: jsonn['is_public'] != null ? jsonn['is_public'] as bool : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
    );
  }
  static Object New({
    String? key,
    Map<String, dynamic>? value,
    String? description,
    bool? isPublic,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (key != null) 'key': key,
      if (value != null) 'value': value,
      if (description != null) 'description': description,
      if (isPublic != null) 'is_public': isPublic,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      key: key,
      value: value,
      description: description,
      isPublic: isPublic,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static const _unset = Object();
  AppConfig copyWith({
    Object? key = _unset,
    Object? value = _unset,
    Object? description = _unset,
    Object? isPublic = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
  }) {
    return AppConfig(
      key: key == _unset ? this.key : key as String,
      value: value == _unset ? this.value : value as Map<String, dynamic>,
      description:
          description == _unset ? this.description : description as String?,
      isPublic: isPublic == _unset ? this.isPublic : isPublic as bool?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
    );
  }
}

// test-typesapp_versions.dart
class AppVersions implements SupadartClass<AppVersions> {
  final String id;
  final String versionNumber;
  final int buildNumber;
  final String platform;
  final String? releaseNotes;
  final bool? minimumSupported;
  final bool? isRequiredUpdate;
  final bool? isActive;
  final DateTime releasedAt;
  final DateTime? createdAt;
  const AppVersions({
    required this.id,
    required this.versionNumber,
    required this.buildNumber,
    required this.platform,
    this.releaseNotes,
    this.minimumSupported,
    this.isRequiredUpdate,
    this.isActive,
    required this.releasedAt,
    this.createdAt,
  });
  static String get table_name => 'app_versions';
  static String get c_id => 'id';
  static String get c_versionNumber => 'version_number';
  static String get c_buildNumber => 'build_number';
  static String get c_platform => 'platform';
  static String get c_releaseNotes => 'release_notes';
  static String get c_minimumSupported => 'minimum_supported';
  static String get c_isRequiredUpdate => 'is_required_update';
  static String get c_isActive => 'is_active';
  static String get c_releasedAt => 'released_at';
  static String get c_createdAt => 'created_at';
  static List<AppVersions> converter(List<Map<String, dynamic>> data) {
    return data.map(AppVersions.fromJson).toList();
  }
  static AppVersions converterSingle(Map<String, dynamic> data) {
    return AppVersions.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? versionNumber,
    int? buildNumber,
    String? platform,
    String? releaseNotes,
    bool? minimumSupported,
    bool? isRequiredUpdate,
    bool? isActive,
    DateTime? releasedAt,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (versionNumber != null) 'version_number': versionNumber,
      if (buildNumber != null) 'build_number': buildNumber,
      if (platform != null) 'platform': platform,
      if (releaseNotes != null) 'release_notes': releaseNotes,
      if (minimumSupported != null) 'minimum_supported': minimumSupported,
      if (isRequiredUpdate != null) 'is_required_update': isRequiredUpdate,
      if (isActive != null) 'is_active': isActive,
      if (releasedAt != null)
        'released_at': releasedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String versionNumber,
    required int buildNumber,
    required String platform,
    String? releaseNotes,
    bool? minimumSupported,
    bool? isRequiredUpdate,
    bool? isActive,
    required DateTime releasedAt,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      versionNumber: versionNumber,
      buildNumber: buildNumber,
      platform: platform,
      releaseNotes: releaseNotes,
      minimumSupported: minimumSupported,
      isRequiredUpdate: isRequiredUpdate,
      isActive: isActive,
      releasedAt: releasedAt,
      createdAt: createdAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? versionNumber,
    int? buildNumber,
    String? platform,
    String? releaseNotes,
    bool? minimumSupported,
    bool? isRequiredUpdate,
    bool? isActive,
    DateTime? releasedAt,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      versionNumber: versionNumber,
      buildNumber: buildNumber,
      platform: platform,
      releaseNotes: releaseNotes,
      minimumSupported: minimumSupported,
      isRequiredUpdate: isRequiredUpdate,
      isActive: isActive,
      releasedAt: releasedAt,
      createdAt: createdAt,
    );
  }
  factory AppVersions.fromJson(Map<String, dynamic> jsonn) {
    return AppVersions(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      versionNumber: jsonn['version_number'] != null
          ? jsonn['version_number'].toString()
          : '',
      buildNumber: jsonn['build_number'] != null
          ? int.parse(jsonn['build_number'].toString())
          : 0,
      platform: jsonn['platform'] != null ? jsonn['platform'].toString() : '',
      releaseNotes: jsonn['release_notes'] != null
          ? jsonn['release_notes'].toString()
          : null,
      minimumSupported: jsonn['minimum_supported'] != null
          ? jsonn['minimum_supported'] as bool
          : null,
      isRequiredUpdate: jsonn['is_required_update'] != null
          ? jsonn['is_required_update'] as bool
          : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      releasedAt: jsonn['released_at'] != null
          ? DateTime.parse(jsonn['released_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? versionNumber,
    int? buildNumber,
    String? platform,
    String? releaseNotes,
    bool? minimumSupported,
    bool? isRequiredUpdate,
    bool? isActive,
    DateTime? releasedAt,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (versionNumber != null) 'version_number': versionNumber,
      if (buildNumber != null) 'build_number': buildNumber,
      if (platform != null) 'platform': platform,
      if (releaseNotes != null) 'release_notes': releaseNotes,
      if (minimumSupported != null) 'minimum_supported': minimumSupported,
      if (isRequiredUpdate != null) 'is_required_update': isRequiredUpdate,
      if (isActive != null) 'is_active': isActive,
      if (releasedAt != null) 'released_at': releasedAt,
      if (createdAt != null) 'created_at': createdAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      versionNumber: versionNumber,
      buildNumber: buildNumber,
      platform: platform,
      releaseNotes: releaseNotes,
      minimumSupported: minimumSupported,
      isRequiredUpdate: isRequiredUpdate,
      isActive: isActive,
      releasedAt: releasedAt,
      createdAt: createdAt,
    );
  }
  static const _unset = Object();
  AppVersions copyWith({
    Object? id = _unset,
    Object? versionNumber = _unset,
    Object? buildNumber = _unset,
    Object? platform = _unset,
    Object? releaseNotes = _unset,
    Object? minimumSupported = _unset,
    Object? isRequiredUpdate = _unset,
    Object? isActive = _unset,
    Object? releasedAt = _unset,
    Object? createdAt = _unset,
  }) {
    return AppVersions(
      id: id == _unset ? this.id : id as String,
      versionNumber: versionNumber == _unset
          ? this.versionNumber
          : versionNumber as String,
      buildNumber:
          buildNumber == _unset ? this.buildNumber : buildNumber as int,
      platform: platform == _unset ? this.platform : platform as String,
      releaseNotes:
          releaseNotes == _unset ? this.releaseNotes : releaseNotes as String?,
      minimumSupported: minimumSupported == _unset
          ? this.minimumSupported
          : minimumSupported as bool?,
      isRequiredUpdate: isRequiredUpdate == _unset
          ? this.isRequiredUpdate
          : isRequiredUpdate as bool?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      releasedAt:
          releasedAt == _unset ? this.releasedAt : releasedAt as DateTime,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
    );
  }
}

// test-typesaudio_transcriptions.dart
class AudioTranscriptions implements SupadartClass<AudioTranscriptions> {
  final String id;
  final String userId;
  final String? filename;
  final String transcription;
  final int? duration;
  final String? language;
  final DateTime? createdAt;
  final Map<String, dynamic>? metadata;
  const AudioTranscriptions({
    required this.id,
    required this.userId,
    this.filename,
    required this.transcription,
    this.duration,
    this.language,
    this.createdAt,
    this.metadata,
  });
  static String get table_name => 'audio_transcriptions';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_filename => 'filename';
  static String get c_transcription => 'transcription';
  static String get c_duration => 'duration';
  static String get c_language => 'language';
  static String get c_createdAt => 'created_at';
  static String get c_metadata => 'metadata';
  static List<AudioTranscriptions> converter(List<Map<String, dynamic>> data) {
    return data.map(AudioTranscriptions.fromJson).toList();
  }
  static AudioTranscriptions converterSingle(Map<String, dynamic> data) {
    return AudioTranscriptions.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? filename,
    String? transcription,
    int? duration,
    String? language,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (filename != null) 'filename': filename,
      if (transcription != null) 'transcription': transcription,
      if (duration != null) 'duration': duration,
      if (language != null) 'language': language,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    String? filename,
    required String transcription,
    int? duration,
    String? language,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      filename: filename,
      transcription: transcription,
      duration: duration,
      language: language,
      createdAt: createdAt,
      metadata: metadata,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? filename,
    String? transcription,
    int? duration,
    String? language,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      filename: filename,
      transcription: transcription,
      duration: duration,
      language: language,
      createdAt: createdAt,
      metadata: metadata,
    );
  }
  factory AudioTranscriptions.fromJson(Map<String, dynamic> jsonn) {
    return AudioTranscriptions(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      filename: jsonn['filename'] != null ? jsonn['filename'].toString() : null,
      transcription: jsonn['transcription'] != null
          ? jsonn['transcription'].toString()
          : '',
      duration: jsonn['duration'] != null
          ? int.parse(jsonn['duration'].toString())
          : null,
      language: jsonn['language'] != null ? jsonn['language'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? filename,
    String? transcription,
    int? duration,
    String? language,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (filename != null) 'filename': filename,
      if (transcription != null) 'transcription': transcription,
      if (duration != null) 'duration': duration,
      if (language != null) 'language': language,
      if (createdAt != null) 'created_at': createdAt,
      if (metadata != null) 'metadata': metadata,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      filename: filename,
      transcription: transcription,
      duration: duration,
      language: language,
      createdAt: createdAt,
      metadata: metadata,
    );
  }
  static const _unset = Object();
  AudioTranscriptions copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? filename = _unset,
    Object? transcription = _unset,
    Object? duration = _unset,
    Object? language = _unset,
    Object? createdAt = _unset,
    Object? metadata = _unset,
  }) {
    return AudioTranscriptions(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      filename: filename == _unset ? this.filename : filename as String?,
      transcription: transcription == _unset
          ? this.transcription
          : transcription as String,
      duration: duration == _unset ? this.duration : duration as int?,
      language: language == _unset ? this.language : language as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
    );
  }
}

// test-typesaudio_usage_logs.dart
class AudioUsageLogs implements SupadartClass<AudioUsageLogs> {
  final String id;
  final String requestId;
  final String userId;
  final int fileSize;
  final String mimeType;
  final int processingTimeMs;
  final int transcriptionLength;
  final bool success;
  final DateTime? createdAt;
  const AudioUsageLogs({
    required this.id,
    required this.requestId,
    required this.userId,
    required this.fileSize,
    required this.mimeType,
    required this.processingTimeMs,
    required this.transcriptionLength,
    required this.success,
    this.createdAt,
  });
  static String get table_name => 'audio_usage_logs';
  static String get c_id => 'id';
  static String get c_requestId => 'request_id';
  static String get c_userId => 'user_id';
  static String get c_fileSize => 'file_size';
  static String get c_mimeType => 'mime_type';
  static String get c_processingTimeMs => 'processing_time_ms';
  static String get c_transcriptionLength => 'transcription_length';
  static String get c_success => 'success';
  static String get c_createdAt => 'created_at';
  static List<AudioUsageLogs> converter(List<Map<String, dynamic>> data) {
    return data.map(AudioUsageLogs.fromJson).toList();
  }
  static AudioUsageLogs converterSingle(Map<String, dynamic> data) {
    return AudioUsageLogs.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? requestId,
    String? userId,
    int? fileSize,
    String? mimeType,
    int? processingTimeMs,
    int? transcriptionLength,
    bool? success,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (requestId != null) 'request_id': requestId,
      if (userId != null) 'user_id': userId,
      if (fileSize != null) 'file_size': fileSize,
      if (mimeType != null) 'mime_type': mimeType,
      if (processingTimeMs != null) 'processing_time_ms': processingTimeMs,
      if (transcriptionLength != null)
        'transcription_length': transcriptionLength,
      if (success != null) 'success': success,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String requestId,
    required String userId,
    required int fileSize,
    required String mimeType,
    required int processingTimeMs,
    required int transcriptionLength,
    bool? success,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      requestId: requestId,
      userId: userId,
      fileSize: fileSize,
      mimeType: mimeType,
      processingTimeMs: processingTimeMs,
      transcriptionLength: transcriptionLength,
      success: success,
      createdAt: createdAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? requestId,
    String? userId,
    int? fileSize,
    String? mimeType,
    int? processingTimeMs,
    int? transcriptionLength,
    bool? success,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      requestId: requestId,
      userId: userId,
      fileSize: fileSize,
      mimeType: mimeType,
      processingTimeMs: processingTimeMs,
      transcriptionLength: transcriptionLength,
      success: success,
      createdAt: createdAt,
    );
  }
  factory AudioUsageLogs.fromJson(Map<String, dynamic> jsonn) {
    return AudioUsageLogs(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      requestId:
          jsonn['request_id'] != null ? jsonn['request_id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      fileSize: jsonn['file_size'] != null
          ? int.parse(jsonn['file_size'].toString())
          : 0,
      mimeType: jsonn['mime_type'] != null ? jsonn['mime_type'].toString() : '',
      processingTimeMs: jsonn['processing_time_ms'] != null
          ? int.parse(jsonn['processing_time_ms'].toString())
          : 0,
      transcriptionLength: jsonn['transcription_length'] != null
          ? int.parse(jsonn['transcription_length'].toString())
          : 0,
      success: jsonn['success'] != null ? jsonn['success'] as bool : false,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? requestId,
    String? userId,
    int? fileSize,
    String? mimeType,
    int? processingTimeMs,
    int? transcriptionLength,
    bool? success,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (requestId != null) 'request_id': requestId,
      if (userId != null) 'user_id': userId,
      if (fileSize != null) 'file_size': fileSize,
      if (mimeType != null) 'mime_type': mimeType,
      if (processingTimeMs != null) 'processing_time_ms': processingTimeMs,
      if (transcriptionLength != null)
        'transcription_length': transcriptionLength,
      if (success != null) 'success': success,
      if (createdAt != null) 'created_at': createdAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      requestId: requestId,
      userId: userId,
      fileSize: fileSize,
      mimeType: mimeType,
      processingTimeMs: processingTimeMs,
      transcriptionLength: transcriptionLength,
      success: success,
      createdAt: createdAt,
    );
  }
  static const _unset = Object();
  AudioUsageLogs copyWith({
    Object? id = _unset,
    Object? requestId = _unset,
    Object? userId = _unset,
    Object? fileSize = _unset,
    Object? mimeType = _unset,
    Object? processingTimeMs = _unset,
    Object? transcriptionLength = _unset,
    Object? success = _unset,
    Object? createdAt = _unset,
  }) {
    return AudioUsageLogs(
      id: id == _unset ? this.id : id as String,
      requestId: requestId == _unset ? this.requestId : requestId as String,
      userId: userId == _unset ? this.userId : userId as String,
      fileSize: fileSize == _unset ? this.fileSize : fileSize as int,
      mimeType: mimeType == _unset ? this.mimeType : mimeType as String,
      processingTimeMs: processingTimeMs == _unset
          ? this.processingTimeMs
          : processingTimeMs as int,
      transcriptionLength: transcriptionLength == _unset
          ? this.transcriptionLength
          : transcriptionLength as int,
      success: success == _unset ? this.success : success as bool,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
    );
  }
}

// test-typescategories.dart
class Categories implements SupadartClass<Categories> {
  final String id;
  final String? parentId;
  final String name;
  final String? nameShort;
  final String? description;
  final String? icon;
  final int? sortOrder;
  final String? primaryColor;
  final String? secondaryColor;
  final bool? isActive;
  final bool? showCheckinHistory;
  final bool? checkinEnabled;
  final int? followupTimer;
  final String? promptCheckin;
  final String? promptCheckin2;
  final String? guidelinesFileText;
  final int? maxQuestions;
  final String? scope;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final String? iconUrl;
  final String? iconSecondaryUrl;
  final Map<String, dynamic>? metadata;
  final bool? followupChatEnabled;
  final String? promptFollowup;
  const Categories({
    required this.id,
    this.parentId,
    required this.name,
    this.nameShort,
    this.description,
    this.icon,
    this.sortOrder,
    this.primaryColor,
    this.secondaryColor,
    this.isActive,
    this.showCheckinHistory,
    this.checkinEnabled,
    this.followupTimer,
    this.promptCheckin,
    this.promptCheckin2,
    this.guidelinesFileText,
    this.maxQuestions,
    this.scope,
    this.createdAt,
    this.updatedAt,
    this.iconUrl,
    this.iconSecondaryUrl,
    this.metadata,
    this.followupChatEnabled,
    this.promptFollowup,
  });
  static String get table_name => 'categories';
  static String get c_id => 'id';
  static String get c_parentId => 'parent_id';
  static String get c_name => 'name';
  static String get c_nameShort => 'name_short';
  static String get c_description => 'description';
  static String get c_icon => 'icon';
  static String get c_sortOrder => 'sort_order';
  static String get c_primaryColor => 'primary_color';
  static String get c_secondaryColor => 'secondary_color';
  static String get c_isActive => 'is_active';
  static String get c_showCheckinHistory => 'show_checkin_history';
  static String get c_checkinEnabled => 'checkin_enabled';
  static String get c_followupTimer => 'followup_timer';
  static String get c_promptCheckin => 'prompt_checkin';
  static String get c_promptCheckin2 => 'prompt_checkin_2';
  static String get c_guidelinesFileText => 'guidelines_file_text';
  static String get c_maxQuestions => 'max_questions';
  static String get c_scope => 'scope';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_iconUrl => 'icon_url';
  static String get c_iconSecondaryUrl => 'icon_secondary_url';
  static String get c_metadata => 'metadata';
  static String get c_followupChatEnabled => 'followup_chat_enabled';
  static String get c_promptFollowup => 'prompt_followup';
  static List<Categories> converter(List<Map<String, dynamic>> data) {
    return data.map(Categories.fromJson).toList();
  }
  static Categories converterSingle(Map<String, dynamic> data) {
    return Categories.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? parentId,
    String? name,
    String? nameShort,
    String? description,
    String? icon,
    int? sortOrder,
    String? primaryColor,
    String? secondaryColor,
    bool? isActive,
    bool? showCheckinHistory,
    bool? checkinEnabled,
    int? followupTimer,
    String? promptCheckin,
    String? promptCheckin2,
    String? guidelinesFileText,
    int? maxQuestions,
    String? scope,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? iconUrl,
    String? iconSecondaryUrl,
    Map<String, dynamic>? metadata,
    bool? followupChatEnabled,
    String? promptFollowup,
  }) {
    return {
      if (id != null) 'id': id,
      if (parentId != null) 'parent_id': parentId,
      if (name != null) 'name': name,
      if (nameShort != null) 'name_short': nameShort,
      if (description != null) 'description': description,
      if (icon != null) 'icon': icon,
      if (sortOrder != null) 'sort_order': sortOrder,
      if (primaryColor != null) 'primary_color': primaryColor,
      if (secondaryColor != null) 'secondary_color': secondaryColor,
      if (isActive != null) 'is_active': isActive,
      if (showCheckinHistory != null)
        'show_checkin_history': showCheckinHistory,
      if (checkinEnabled != null) 'checkin_enabled': checkinEnabled,
      if (followupTimer != null) 'followup_timer': followupTimer,
      if (promptCheckin != null) 'prompt_checkin': promptCheckin,
      if (promptCheckin2 != null) 'prompt_checkin_2': promptCheckin2,
      if (guidelinesFileText != null)
        'guidelines_file_text': guidelinesFileText,
      if (maxQuestions != null) 'max_questions': maxQuestions,
      if (scope != null) 'scope': scope,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (iconUrl != null) 'icon_url': iconUrl,
      if (iconSecondaryUrl != null) 'icon_secondary_url': iconSecondaryUrl,
      if (metadata != null) 'metadata': metadata,
      if (followupChatEnabled != null)
        'followup_chat_enabled': followupChatEnabled,
      if (promptFollowup != null) 'prompt_followup': promptFollowup,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? parentId,
    required String name,
    String? nameShort,
    String? description,
    String? icon,
    int? sortOrder,
    String? primaryColor,
    String? secondaryColor,
    bool? isActive,
    bool? showCheckinHistory,
    bool? checkinEnabled,
    int? followupTimer,
    String? promptCheckin,
    String? promptCheckin2,
    String? guidelinesFileText,
    int? maxQuestions,
    String? scope,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? iconUrl,
    String? iconSecondaryUrl,
    Map<String, dynamic>? metadata,
    bool? followupChatEnabled,
    String? promptFollowup,
  }) {
    return _generateMap(
      id: id,
      parentId: parentId,
      name: name,
      nameShort: nameShort,
      description: description,
      icon: icon,
      sortOrder: sortOrder,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      isActive: isActive,
      showCheckinHistory: showCheckinHistory,
      checkinEnabled: checkinEnabled,
      followupTimer: followupTimer,
      promptCheckin: promptCheckin,
      promptCheckin2: promptCheckin2,
      guidelinesFileText: guidelinesFileText,
      maxQuestions: maxQuestions,
      scope: scope,
      createdAt: createdAt,
      updatedAt: updatedAt,
      iconUrl: iconUrl,
      iconSecondaryUrl: iconSecondaryUrl,
      metadata: metadata,
      followupChatEnabled: followupChatEnabled,
      promptFollowup: promptFollowup,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? parentId,
    String? name,
    String? nameShort,
    String? description,
    String? icon,
    int? sortOrder,
    String? primaryColor,
    String? secondaryColor,
    bool? isActive,
    bool? showCheckinHistory,
    bool? checkinEnabled,
    int? followupTimer,
    String? promptCheckin,
    String? promptCheckin2,
    String? guidelinesFileText,
    int? maxQuestions,
    String? scope,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? iconUrl,
    String? iconSecondaryUrl,
    Map<String, dynamic>? metadata,
    bool? followupChatEnabled,
    String? promptFollowup,
  }) {
    return _generateMap(
      id: id,
      parentId: parentId,
      name: name,
      nameShort: nameShort,
      description: description,
      icon: icon,
      sortOrder: sortOrder,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      isActive: isActive,
      showCheckinHistory: showCheckinHistory,
      checkinEnabled: checkinEnabled,
      followupTimer: followupTimer,
      promptCheckin: promptCheckin,
      promptCheckin2: promptCheckin2,
      guidelinesFileText: guidelinesFileText,
      maxQuestions: maxQuestions,
      scope: scope,
      createdAt: createdAt,
      updatedAt: updatedAt,
      iconUrl: iconUrl,
      iconSecondaryUrl: iconSecondaryUrl,
      metadata: metadata,
      followupChatEnabled: followupChatEnabled,
      promptFollowup: promptFollowup,
    );
  }
  factory Categories.fromJson(Map<String, dynamic> jsonn) {
    return Categories(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      parentId:
          jsonn['parent_id'] != null ? jsonn['parent_id'].toString() : null,
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
      nameShort:
          jsonn['name_short'] != null ? jsonn['name_short'].toString() : null,
      description:
          jsonn['description'] != null ? jsonn['description'].toString() : null,
      icon: jsonn['icon'] != null ? jsonn['icon'].toString() : null,
      sortOrder: jsonn['sort_order'] != null
          ? int.parse(jsonn['sort_order'].toString())
          : null,
      primaryColor: jsonn['primary_color'] != null
          ? jsonn['primary_color'].toString()
          : null,
      secondaryColor: jsonn['secondary_color'] != null
          ? jsonn['secondary_color'].toString()
          : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      showCheckinHistory: jsonn['show_checkin_history'] != null
          ? jsonn['show_checkin_history'] as bool
          : null,
      checkinEnabled: jsonn['checkin_enabled'] != null
          ? jsonn['checkin_enabled'] as bool
          : null,
      followupTimer: jsonn['followup_timer'] != null
          ? int.parse(jsonn['followup_timer'].toString())
          : null,
      promptCheckin: jsonn['prompt_checkin'] != null
          ? jsonn['prompt_checkin'].toString()
          : null,
      promptCheckin2: jsonn['prompt_checkin_2'] != null
          ? jsonn['prompt_checkin_2'].toString()
          : null,
      guidelinesFileText: jsonn['guidelines_file_text'] != null
          ? jsonn['guidelines_file_text'].toString()
          : null,
      maxQuestions: jsonn['max_questions'] != null
          ? int.parse(jsonn['max_questions'].toString())
          : null,
      scope: jsonn['scope'] != null ? jsonn['scope'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      iconUrl: jsonn['icon_url'] != null ? jsonn['icon_url'].toString() : null,
      iconSecondaryUrl: jsonn['icon_secondary_url'] != null
          ? jsonn['icon_secondary_url'].toString()
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      followupChatEnabled: jsonn['followup_chat_enabled'] != null
          ? jsonn['followup_chat_enabled'] as bool
          : null,
      promptFollowup: jsonn['prompt_followup'] != null
          ? jsonn['prompt_followup'].toString()
          : null,
    );
  }
  static Object New({
    String? id,
    String? parentId,
    String? name,
    String? nameShort,
    String? description,
    String? icon,
    int? sortOrder,
    String? primaryColor,
    String? secondaryColor,
    bool? isActive,
    bool? showCheckinHistory,
    bool? checkinEnabled,
    int? followupTimer,
    String? promptCheckin,
    String? promptCheckin2,
    String? guidelinesFileText,
    int? maxQuestions,
    String? scope,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? iconUrl,
    String? iconSecondaryUrl,
    Map<String, dynamic>? metadata,
    bool? followupChatEnabled,
    String? promptFollowup,
  }) {
    return {
      if (id != null) 'id': id,
      if (parentId != null) 'parent_id': parentId,
      if (name != null) 'name': name,
      if (nameShort != null) 'name_short': nameShort,
      if (description != null) 'description': description,
      if (icon != null) 'icon': icon,
      if (sortOrder != null) 'sort_order': sortOrder,
      if (primaryColor != null) 'primary_color': primaryColor,
      if (secondaryColor != null) 'secondary_color': secondaryColor,
      if (isActive != null) 'is_active': isActive,
      if (showCheckinHistory != null)
        'show_checkin_history': showCheckinHistory,
      if (checkinEnabled != null) 'checkin_enabled': checkinEnabled,
      if (followupTimer != null) 'followup_timer': followupTimer,
      if (promptCheckin != null) 'prompt_checkin': promptCheckin,
      if (promptCheckin2 != null) 'prompt_checkin_2': promptCheckin2,
      if (guidelinesFileText != null)
        'guidelines_file_text': guidelinesFileText,
      if (maxQuestions != null) 'max_questions': maxQuestions,
      if (scope != null) 'scope': scope,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (iconUrl != null) 'icon_url': iconUrl,
      if (iconSecondaryUrl != null) 'icon_secondary_url': iconSecondaryUrl,
      if (metadata != null) 'metadata': metadata,
      if (followupChatEnabled != null)
        'followup_chat_enabled': followupChatEnabled,
      if (promptFollowup != null) 'prompt_followup': promptFollowup,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      parentId: parentId,
      name: name,
      nameShort: nameShort,
      description: description,
      icon: icon,
      sortOrder: sortOrder,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      isActive: isActive,
      showCheckinHistory: showCheckinHistory,
      checkinEnabled: checkinEnabled,
      followupTimer: followupTimer,
      promptCheckin: promptCheckin,
      promptCheckin2: promptCheckin2,
      guidelinesFileText: guidelinesFileText,
      maxQuestions: maxQuestions,
      scope: scope,
      createdAt: createdAt,
      updatedAt: updatedAt,
      iconUrl: iconUrl,
      iconSecondaryUrl: iconSecondaryUrl,
      metadata: metadata,
      followupChatEnabled: followupChatEnabled,
      promptFollowup: promptFollowup,
    );
  }
  static const _unset = Object();
  Categories copyWith({
    Object? id = _unset,
    Object? parentId = _unset,
    Object? name = _unset,
    Object? nameShort = _unset,
    Object? description = _unset,
    Object? icon = _unset,
    Object? sortOrder = _unset,
    Object? primaryColor = _unset,
    Object? secondaryColor = _unset,
    Object? isActive = _unset,
    Object? showCheckinHistory = _unset,
    Object? checkinEnabled = _unset,
    Object? followupTimer = _unset,
    Object? promptCheckin = _unset,
    Object? promptCheckin2 = _unset,
    Object? guidelinesFileText = _unset,
    Object? maxQuestions = _unset,
    Object? scope = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? iconUrl = _unset,
    Object? iconSecondaryUrl = _unset,
    Object? metadata = _unset,
    Object? followupChatEnabled = _unset,
    Object? promptFollowup = _unset,
  }) {
    return Categories(
      id: id == _unset ? this.id : id as String,
      parentId: parentId == _unset ? this.parentId : parentId as String?,
      name: name == _unset ? this.name : name as String,
      nameShort: nameShort == _unset ? this.nameShort : nameShort as String?,
      description:
          description == _unset ? this.description : description as String?,
      icon: icon == _unset ? this.icon : icon as String?,
      sortOrder: sortOrder == _unset ? this.sortOrder : sortOrder as int?,
      primaryColor:
          primaryColor == _unset ? this.primaryColor : primaryColor as String?,
      secondaryColor: secondaryColor == _unset
          ? this.secondaryColor
          : secondaryColor as String?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      showCheckinHistory: showCheckinHistory == _unset
          ? this.showCheckinHistory
          : showCheckinHistory as bool?,
      checkinEnabled: checkinEnabled == _unset
          ? this.checkinEnabled
          : checkinEnabled as bool?,
      followupTimer:
          followupTimer == _unset ? this.followupTimer : followupTimer as int?,
      promptCheckin: promptCheckin == _unset
          ? this.promptCheckin
          : promptCheckin as String?,
      promptCheckin2: promptCheckin2 == _unset
          ? this.promptCheckin2
          : promptCheckin2 as String?,
      guidelinesFileText: guidelinesFileText == _unset
          ? this.guidelinesFileText
          : guidelinesFileText as String?,
      maxQuestions:
          maxQuestions == _unset ? this.maxQuestions : maxQuestions as int?,
      scope: scope == _unset ? this.scope : scope as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      iconUrl: iconUrl == _unset ? this.iconUrl : iconUrl as String?,
      iconSecondaryUrl: iconSecondaryUrl == _unset
          ? this.iconSecondaryUrl
          : iconSecondaryUrl as String?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      followupChatEnabled: followupChatEnabled == _unset
          ? this.followupChatEnabled
          : followupChatEnabled as bool?,
      promptFollowup: promptFollowup == _unset
          ? this.promptFollowup
          : promptFollowup as String?,
    );
  }
}

// test-typescheck_ins.dart
class CheckIns implements SupadartClass<CheckIns> {
  final String id;
  final String userId;
  final String? categoryId;
  final String? status;
  final Map<String, dynamic> questions;
  final String? summary;
  final String? insight;
  final String? brief;
  final int? level;
  final DateTime? createdAt;
  final DateTime? completedAt;
  const CheckIns({
    required this.id,
    required this.userId,
    this.categoryId,
    this.status,
    required this.questions,
    this.summary,
    this.insight,
    this.brief,
    this.level,
    this.createdAt,
    this.completedAt,
  });
  static String get table_name => 'check_ins';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_status => 'status';
  static String get c_questions => 'questions';
  static String get c_summary => 'summary';
  static String get c_insight => 'insight';
  static String get c_brief => 'brief';
  static String get c_level => 'level';
  static String get c_createdAt => 'created_at';
  static String get c_completedAt => 'completed_at';
  static List<CheckIns> converter(List<Map<String, dynamic>> data) {
    return data.map(CheckIns.fromJson).toList();
  }
  static CheckIns converterSingle(Map<String, dynamic> data) {
    return CheckIns.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? status,
    Map<String, dynamic>? questions,
    String? summary,
    String? insight,
    String? brief,
    int? level,
    DateTime? createdAt,
    DateTime? completedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (status != null) 'status': status,
      if (questions != null) 'questions': questions,
      if (summary != null) 'summary': summary,
      if (insight != null) 'insight': insight,
      if (brief != null) 'brief': brief,
      if (level != null) 'level': level,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (completedAt != null)
        'completed_at': completedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    String? categoryId,
    String? status,
    required Map<String, dynamic> questions,
    String? summary,
    String? insight,
    String? brief,
    int? level,
    DateTime? createdAt,
    DateTime? completedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      status: status,
      questions: questions,
      summary: summary,
      insight: insight,
      brief: brief,
      level: level,
      createdAt: createdAt,
      completedAt: completedAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? status,
    Map<String, dynamic>? questions,
    String? summary,
    String? insight,
    String? brief,
    int? level,
    DateTime? createdAt,
    DateTime? completedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      status: status,
      questions: questions,
      summary: summary,
      insight: insight,
      brief: brief,
      level: level,
      createdAt: createdAt,
      completedAt: completedAt,
    );
  }
  factory CheckIns.fromJson(Map<String, dynamic> jsonn) {
    return CheckIns(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      status: jsonn['status'] != null ? jsonn['status'].toString() : null,
      questions: jsonn['questions'] != null
          ? jsonn['questions'] as Map<String, dynamic>
          : <String, dynamic>{},
      summary: jsonn['summary'] != null ? jsonn['summary'].toString() : null,
      insight: jsonn['insight'] != null ? jsonn['insight'].toString() : null,
      brief: jsonn['brief'] != null ? jsonn['brief'].toString() : null,
      level:
          jsonn['level'] != null ? int.parse(jsonn['level'].toString()) : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      completedAt: jsonn['completed_at'] != null
          ? DateTime.parse(jsonn['completed_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? status,
    Map<String, dynamic>? questions,
    String? summary,
    String? insight,
    String? brief,
    int? level,
    DateTime? createdAt,
    DateTime? completedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (status != null) 'status': status,
      if (questions != null) 'questions': questions,
      if (summary != null) 'summary': summary,
      if (insight != null) 'insight': insight,
      if (brief != null) 'brief': brief,
      if (level != null) 'level': level,
      if (createdAt != null) 'created_at': createdAt,
      if (completedAt != null) 'completed_at': completedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      status: status,
      questions: questions,
      summary: summary,
      insight: insight,
      brief: brief,
      level: level,
      createdAt: createdAt,
      completedAt: completedAt,
    );
  }
  static const _unset = Object();
  CheckIns copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? status = _unset,
    Object? questions = _unset,
    Object? summary = _unset,
    Object? insight = _unset,
    Object? brief = _unset,
    Object? level = _unset,
    Object? createdAt = _unset,
    Object? completedAt = _unset,
  }) {
    return CheckIns(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      status: status == _unset ? this.status : status as String?,
      questions: questions == _unset
          ? this.questions
          : questions as Map<String, dynamic>,
      summary: summary == _unset ? this.summary : summary as String?,
      insight: insight == _unset ? this.insight : insight as String?,
      brief: brief == _unset ? this.brief : brief as String?,
      level: level == _unset ? this.level : level as int?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      completedAt:
          completedAt == _unset ? this.completedAt : completedAt as DateTime?,
    );
  }
}

// test-typescheckin_answers.dart
class CheckinAnswers implements SupadartClass<CheckinAnswers> {
  final String id;
  final String? checkinId;
  final String questionId;
  final String answer;
  final DateTime answeredAt;
  final Map<String, dynamic>? metadata;
  final DateTime? createdAt;
  const CheckinAnswers({
    required this.id,
    this.checkinId,
    required this.questionId,
    required this.answer,
    required this.answeredAt,
    this.metadata,
    this.createdAt,
  });
  static String get table_name => 'checkin_answers';
  static String get c_id => 'id';
  static String get c_checkinId => 'checkin_id';
  static String get c_questionId => 'question_id';
  static String get c_answer => 'answer';
  static String get c_answeredAt => 'answered_at';
  static String get c_metadata => 'metadata';
  static String get c_createdAt => 'created_at';
  static List<CheckinAnswers> converter(List<Map<String, dynamic>> data) {
    return data.map(CheckinAnswers.fromJson).toList();
  }
  static CheckinAnswers converterSingle(Map<String, dynamic> data) {
    return CheckinAnswers.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? checkinId,
    String? questionId,
    String? answer,
    DateTime? answeredAt,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (checkinId != null) 'checkin_id': checkinId,
      if (questionId != null) 'question_id': questionId,
      if (answer != null) 'answer': answer,
      if (answeredAt != null)
        'answered_at': answeredAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? checkinId,
    required String questionId,
    required String answer,
    DateTime? answeredAt,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      checkinId: checkinId,
      questionId: questionId,
      answer: answer,
      answeredAt: answeredAt,
      metadata: metadata,
      createdAt: createdAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? checkinId,
    String? questionId,
    String? answer,
    DateTime? answeredAt,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      checkinId: checkinId,
      questionId: questionId,
      answer: answer,
      answeredAt: answeredAt,
      metadata: metadata,
      createdAt: createdAt,
    );
  }
  factory CheckinAnswers.fromJson(Map<String, dynamic> jsonn) {
    return CheckinAnswers(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      checkinId:
          jsonn['checkin_id'] != null ? jsonn['checkin_id'].toString() : null,
      questionId:
          jsonn['question_id'] != null ? jsonn['question_id'].toString() : '',
      answer: jsonn['answer'] != null ? jsonn['answer'].toString() : '',
      answeredAt: jsonn['answered_at'] != null
          ? DateTime.parse(jsonn['answered_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? checkinId,
    String? questionId,
    String? answer,
    DateTime? answeredAt,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (checkinId != null) 'checkin_id': checkinId,
      if (questionId != null) 'question_id': questionId,
      if (answer != null) 'answer': answer,
      if (answeredAt != null) 'answered_at': answeredAt,
      if (metadata != null) 'metadata': metadata,
      if (createdAt != null) 'created_at': createdAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      checkinId: checkinId,
      questionId: questionId,
      answer: answer,
      answeredAt: answeredAt,
      metadata: metadata,
      createdAt: createdAt,
    );
  }
  static const _unset = Object();
  CheckinAnswers copyWith({
    Object? id = _unset,
    Object? checkinId = _unset,
    Object? questionId = _unset,
    Object? answer = _unset,
    Object? answeredAt = _unset,
    Object? metadata = _unset,
    Object? createdAt = _unset,
  }) {
    return CheckinAnswers(
      id: id == _unset ? this.id : id as String,
      checkinId: checkinId == _unset ? this.checkinId : checkinId as String?,
      questionId: questionId == _unset ? this.questionId : questionId as String,
      answer: answer == _unset ? this.answer : answer as String,
      answeredAt:
          answeredAt == _unset ? this.answeredAt : answeredAt as DateTime,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
    );
  }
}

// test-typescheckin_progress.dart
class CheckinProgress implements SupadartClass<CheckinProgress> {
  final String id;
  final String userId;
  final String checkinId;
  final int? currentQuestionIndex;
  final Map<String, dynamic>? answers;
  final String? status;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  const CheckinProgress({
    required this.id,
    required this.userId,
    required this.checkinId,
    this.currentQuestionIndex,
    this.answers,
    this.status,
    this.createdAt,
    this.updatedAt,
  });
  static String get table_name => 'checkin_progress';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_checkinId => 'checkin_id';
  static String get c_currentQuestionIndex => 'current_question_index';
  static String get c_answers => 'answers';
  static String get c_status => 'status';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static List<CheckinProgress> converter(List<Map<String, dynamic>> data) {
    return data.map(CheckinProgress.fromJson).toList();
  }
  static CheckinProgress converterSingle(Map<String, dynamic> data) {
    return CheckinProgress.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? checkinId,
    int? currentQuestionIndex,
    Map<String, dynamic>? answers,
    String? status,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (checkinId != null) 'checkin_id': checkinId,
      if (currentQuestionIndex != null)
        'current_question_index': currentQuestionIndex,
      if (answers != null) 'answers': answers,
      if (status != null) 'status': status,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    required String checkinId,
    int? currentQuestionIndex,
    Map<String, dynamic>? answers,
    String? status,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      checkinId: checkinId,
      currentQuestionIndex: currentQuestionIndex,
      answers: answers,
      status: status,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? checkinId,
    int? currentQuestionIndex,
    Map<String, dynamic>? answers,
    String? status,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      checkinId: checkinId,
      currentQuestionIndex: currentQuestionIndex,
      answers: answers,
      status: status,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  factory CheckinProgress.fromJson(Map<String, dynamic> jsonn) {
    return CheckinProgress(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      checkinId:
          jsonn['checkin_id'] != null ? jsonn['checkin_id'].toString() : '',
      currentQuestionIndex: jsonn['current_question_index'] != null
          ? int.parse(jsonn['current_question_index'].toString())
          : null,
      answers: jsonn['answers'] != null
          ? jsonn['answers'] as Map<String, dynamic>
          : null,
      status: jsonn['status'] != null ? jsonn['status'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? checkinId,
    int? currentQuestionIndex,
    Map<String, dynamic>? answers,
    String? status,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (checkinId != null) 'checkin_id': checkinId,
      if (currentQuestionIndex != null)
        'current_question_index': currentQuestionIndex,
      if (answers != null) 'answers': answers,
      if (status != null) 'status': status,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      checkinId: checkinId,
      currentQuestionIndex: currentQuestionIndex,
      answers: answers,
      status: status,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static const _unset = Object();
  CheckinProgress copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? checkinId = _unset,
    Object? currentQuestionIndex = _unset,
    Object? answers = _unset,
    Object? status = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
  }) {
    return CheckinProgress(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      checkinId: checkinId == _unset ? this.checkinId : checkinId as String,
      currentQuestionIndex: currentQuestionIndex == _unset
          ? this.currentQuestionIndex
          : currentQuestionIndex as int?,
      answers:
          answers == _unset ? this.answers : answers as Map<String, dynamic>?,
      status: status == _unset ? this.status : status as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
    );
  }
}

// test-typescheckin_templates.dart
class CheckinTemplates implements SupadartClass<CheckinTemplates> {
  final String id;
  final String categoryId;
  final Map<String, dynamic> questions;
  final bool? isActive;
  final DateTime createdAt;
  final DateTime updatedAt;
  const CheckinTemplates({
    required this.id,
    required this.categoryId,
    required this.questions,
    this.isActive,
    required this.createdAt,
    required this.updatedAt,
  });
  static String get table_name => 'checkin_templates';
  static String get c_id => 'id';
  static String get c_categoryId => 'category_id';
  static String get c_questions => 'questions';
  static String get c_isActive => 'is_active';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static List<CheckinTemplates> converter(List<Map<String, dynamic>> data) {
    return data.map(CheckinTemplates.fromJson).toList();
  }
  static CheckinTemplates converterSingle(Map<String, dynamic> data) {
    return CheckinTemplates.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? categoryId,
    Map<String, dynamic>? questions,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (categoryId != null) 'category_id': categoryId,
      if (questions != null) 'questions': questions,
      if (isActive != null) 'is_active': isActive,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String categoryId,
    required Map<String, dynamic> questions,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      categoryId: categoryId,
      questions: questions,
      isActive: isActive,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? categoryId,
    Map<String, dynamic>? questions,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      categoryId: categoryId,
      questions: questions,
      isActive: isActive,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  factory CheckinTemplates.fromJson(Map<String, dynamic> jsonn) {
    return CheckinTemplates(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : '',
      questions: jsonn['questions'] != null
          ? jsonn['questions'] as Map<String, dynamic>
          : <String, dynamic>{},
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }
  static Object New({
    String? id,
    String? categoryId,
    Map<String, dynamic>? questions,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (categoryId != null) 'category_id': categoryId,
      if (questions != null) 'questions': questions,
      if (isActive != null) 'is_active': isActive,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      categoryId: categoryId,
      questions: questions,
      isActive: isActive,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static const _unset = Object();
  CheckinTemplates copyWith({
    Object? id = _unset,
    Object? categoryId = _unset,
    Object? questions = _unset,
    Object? isActive = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
  }) {
    return CheckinTemplates(
      id: id == _unset ? this.id : id as String,
      categoryId: categoryId == _unset ? this.categoryId : categoryId as String,
      questions: questions == _unset
          ? this.questions
          : questions as Map<String, dynamic>,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime,
    );
  }
}

// test-typescheckins.dart
class Checkins implements SupadartClass<Checkins> {
  final String id;
  final String userId;
  final String? categoryId;
  final String? userCategoryId;
  final num? wellnessLevel;
  final String? summary;
  final String? insights;
  final String status;
  final int? currentQuestion;
  final int? totalQuestions;
  final Map<String, dynamic>? responses;
  final num? completionPercentage;
  final DateTime? startedAt;
  final DateTime? completedAt;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final Map<String, dynamic>? metadata;
  final String? brief;
  final String? insight;
  final Map<String, dynamic>? mood;
  final int? questionsAsked;
  const Checkins({
    required this.id,
    required this.userId,
    this.categoryId,
    this.userCategoryId,
    this.wellnessLevel,
    this.summary,
    this.insights,
    required this.status,
    this.currentQuestion,
    this.totalQuestions,
    this.responses,
    this.completionPercentage,
    this.startedAt,
    this.completedAt,
    this.createdAt,
    this.updatedAt,
    this.metadata,
    this.brief,
    this.insight,
    this.mood,
    this.questionsAsked,
  });
  static String get table_name => 'checkins';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_userCategoryId => 'user_category_id';
  static String get c_wellnessLevel => 'wellness_level';
  static String get c_summary => 'summary';
  static String get c_insights => 'insights';
  static String get c_status => 'status';
  static String get c_currentQuestion => 'current_question';
  static String get c_totalQuestions => 'total_questions';
  static String get c_responses => 'responses';
  static String get c_completionPercentage => 'completion_percentage';
  static String get c_startedAt => 'started_at';
  static String get c_completedAt => 'completed_at';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_metadata => 'metadata';
  static String get c_brief => 'brief';
  static String get c_insight => 'insight';
  static String get c_mood => 'mood';
  static String get c_questionsAsked => 'questions_asked';
  static List<Checkins> converter(List<Map<String, dynamic>> data) {
    return data.map(Checkins.fromJson).toList();
  }
  static Checkins converterSingle(Map<String, dynamic> data) {
    return Checkins.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (userCategoryId != null) 'user_category_id': userCategoryId,
      if (wellnessLevel != null) 'wellness_level': wellnessLevel.toString(),
      if (summary != null) 'summary': summary,
      if (insights != null) 'insights': insights,
      if (status != null) 'status': status,
      if (currentQuestion != null) 'current_question': currentQuestion,
      if (totalQuestions != null) 'total_questions': totalQuestions,
      if (responses != null) 'responses': responses,
      if (completionPercentage != null)
        'completion_percentage': completionPercentage.toString(),
      if (startedAt != null) 'started_at': startedAt.toUtc().toIso8601String(),
      if (completedAt != null)
        'completed_at': completedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
      if (brief != null) 'brief': brief,
      if (insight != null) 'insight': insight,
      if (mood != null) 'mood': mood,
      if (questionsAsked != null) 'questions_asked': questionsAsked,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      userCategoryId: userCategoryId,
      wellnessLevel: wellnessLevel,
      summary: summary,
      insights: insights,
      status: status,
      currentQuestion: currentQuestion,
      totalQuestions: totalQuestions,
      responses: responses,
      completionPercentage: completionPercentage,
      startedAt: startedAt,
      completedAt: completedAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
      brief: brief,
      insight: insight,
      mood: mood,
      questionsAsked: questionsAsked,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      userCategoryId: userCategoryId,
      wellnessLevel: wellnessLevel,
      summary: summary,
      insights: insights,
      status: status,
      currentQuestion: currentQuestion,
      totalQuestions: totalQuestions,
      responses: responses,
      completionPercentage: completionPercentage,
      startedAt: startedAt,
      completedAt: completedAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
      brief: brief,
      insight: insight,
      mood: mood,
      questionsAsked: questionsAsked,
    );
  }
  factory Checkins.fromJson(Map<String, dynamic> jsonn) {
    return Checkins(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      userCategoryId: jsonn['user_category_id'] != null
          ? jsonn['user_category_id'].toString()
          : null,
      wellnessLevel: jsonn['wellness_level'] != null
          ? num.parse(jsonn['wellness_level'].toString())
          : null,
      summary: jsonn['summary'] != null ? jsonn['summary'].toString() : null,
      insights: jsonn['insights'] != null ? jsonn['insights'].toString() : null,
      status: jsonn['status'] != null ? jsonn['status'].toString() : '',
      currentQuestion: jsonn['current_question'] != null
          ? int.parse(jsonn['current_question'].toString())
          : null,
      totalQuestions: jsonn['total_questions'] != null
          ? int.parse(jsonn['total_questions'].toString())
          : null,
      responses: jsonn['responses'] != null
          ? jsonn['responses'] as Map<String, dynamic>
          : null,
      completionPercentage: jsonn['completion_percentage'] != null
          ? num.parse(jsonn['completion_percentage'].toString())
          : null,
      startedAt: jsonn['started_at'] != null
          ? DateTime.parse(jsonn['started_at'].toString())
          : null,
      completedAt: jsonn['completed_at'] != null
          ? DateTime.parse(jsonn['completed_at'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      brief: jsonn['brief'] != null ? jsonn['brief'].toString() : null,
      insight: jsonn['insight'] != null ? jsonn['insight'].toString() : null,
      mood:
          jsonn['mood'] != null ? jsonn['mood'] as Map<String, dynamic> : null,
      questionsAsked: jsonn['questions_asked'] != null
          ? int.parse(jsonn['questions_asked'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (userCategoryId != null) 'user_category_id': userCategoryId,
      if (wellnessLevel != null) 'wellness_level': wellnessLevel,
      if (summary != null) 'summary': summary,
      if (insights != null) 'insights': insights,
      if (status != null) 'status': status,
      if (currentQuestion != null) 'current_question': currentQuestion,
      if (totalQuestions != null) 'total_questions': totalQuestions,
      if (responses != null) 'responses': responses,
      if (completionPercentage != null)
        'completion_percentage': completionPercentage,
      if (startedAt != null) 'started_at': startedAt,
      if (completedAt != null) 'completed_at': completedAt,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (metadata != null) 'metadata': metadata,
      if (brief != null) 'brief': brief,
      if (insight != null) 'insight': insight,
      if (mood != null) 'mood': mood,
      if (questionsAsked != null) 'questions_asked': questionsAsked,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      userCategoryId: userCategoryId,
      wellnessLevel: wellnessLevel,
      summary: summary,
      insights: insights,
      status: status,
      currentQuestion: currentQuestion,
      totalQuestions: totalQuestions,
      responses: responses,
      completionPercentage: completionPercentage,
      startedAt: startedAt,
      completedAt: completedAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
      brief: brief,
      insight: insight,
      mood: mood,
      questionsAsked: questionsAsked,
    );
  }
  static const _unset = Object();
  Checkins copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? userCategoryId = _unset,
    Object? wellnessLevel = _unset,
    Object? summary = _unset,
    Object? insights = _unset,
    Object? status = _unset,
    Object? currentQuestion = _unset,
    Object? totalQuestions = _unset,
    Object? responses = _unset,
    Object? completionPercentage = _unset,
    Object? startedAt = _unset,
    Object? completedAt = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? metadata = _unset,
    Object? brief = _unset,
    Object? insight = _unset,
    Object? mood = _unset,
    Object? questionsAsked = _unset,
  }) {
    return Checkins(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      userCategoryId: userCategoryId == _unset
          ? this.userCategoryId
          : userCategoryId as String?,
      wellnessLevel:
          wellnessLevel == _unset ? this.wellnessLevel : wellnessLevel as num?,
      summary: summary == _unset ? this.summary : summary as String?,
      insights: insights == _unset ? this.insights : insights as String?,
      status: status == _unset ? this.status : status as String,
      currentQuestion: currentQuestion == _unset
          ? this.currentQuestion
          : currentQuestion as int?,
      totalQuestions: totalQuestions == _unset
          ? this.totalQuestions
          : totalQuestions as int?,
      responses: responses == _unset
          ? this.responses
          : responses as Map<String, dynamic>?,
      completionPercentage: completionPercentage == _unset
          ? this.completionPercentage
          : completionPercentage as num?,
      startedAt: startedAt == _unset ? this.startedAt : startedAt as DateTime?,
      completedAt:
          completedAt == _unset ? this.completedAt : completedAt as DateTime?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      brief: brief == _unset ? this.brief : brief as String?,
      insight: insight == _unset ? this.insight : insight as String?,
      mood: mood == _unset ? this.mood : mood as Map<String, dynamic>?,
      questionsAsked: questionsAsked == _unset
          ? this.questionsAsked
          : questionsAsked as int?,
    );
  }
}

// test-typescoaches.dart
class Coaches implements SupadartClass<Coaches> {
  final String id;
  final String name;
  final String? bio;
  final String? photoUrl;
  final String? sex;
  final int? yearOfBirth;
  final String? voiceId;
  final Map<String, dynamic>? voiceSettings;
  final String? prompt;
  final bool? isActive;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final String? imageUrl;
  final Map<String, dynamic>? avatarSizes;
  final Map<String, dynamic>? metadata;
  final String? voice;
  final String? imageSmallUrl;
  final String? imageMediumUrl;
  final String? imageLargeUrl;
  final String? systemPrompt;
  const Coaches({
    required this.id,
    required this.name,
    this.bio,
    this.photoUrl,
    this.sex,
    this.yearOfBirth,
    this.voiceId,
    this.voiceSettings,
    this.prompt,
    this.isActive,
    this.createdAt,
    this.updatedAt,
    this.imageUrl,
    this.avatarSizes,
    this.metadata,
    this.voice,
    this.imageSmallUrl,
    this.imageMediumUrl,
    this.imageLargeUrl,
    this.systemPrompt,
  });
  static String get table_name => 'coaches';
  static String get c_id => 'id';
  static String get c_name => 'name';
  static String get c_bio => 'bio';
  static String get c_photoUrl => 'photo_url';
  static String get c_sex => 'sex';
  static String get c_yearOfBirth => 'year_of_birth';
  static String get c_voiceId => 'voice_id';
  static String get c_voiceSettings => 'voice_settings';
  static String get c_prompt => 'prompt';
  static String get c_isActive => 'is_active';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_imageUrl => 'image_url';
  static String get c_avatarSizes => 'avatar_sizes';
  static String get c_metadata => 'metadata';
  static String get c_voice => 'voice';
  static String get c_imageSmallUrl => 'image_small_url';
  static String get c_imageMediumUrl => 'image_medium_url';
  static String get c_imageLargeUrl => 'image_large_url';
  static String get c_systemPrompt => 'system_prompt';
  static List<Coaches> converter(List<Map<String, dynamic>> data) {
    return data.map(Coaches.fromJson).toList();
  }
  static Coaches converterSingle(Map<String, dynamic> data) {
    return Coaches.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? name,
    String? bio,
    String? photoUrl,
    String? sex,
    int? yearOfBirth,
    String? voiceId,
    Map<String, dynamic>? voiceSettings,
    String? prompt,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? imageUrl,
    Map<String, dynamic>? avatarSizes,
    Map<String, dynamic>? metadata,
    String? voice,
    String? imageSmallUrl,
    String? imageMediumUrl,
    String? imageLargeUrl,
    String? systemPrompt,
  }) {
    return {
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (bio != null) 'bio': bio,
      if (photoUrl != null) 'photo_url': photoUrl,
      if (sex != null) 'sex': sex,
      if (yearOfBirth != null) 'year_of_birth': yearOfBirth,
      if (voiceId != null) 'voice_id': voiceId,
      if (voiceSettings != null) 'voice_settings': voiceSettings,
      if (prompt != null) 'prompt': prompt,
      if (isActive != null) 'is_active': isActive,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (imageUrl != null) 'image_url': imageUrl,
      if (avatarSizes != null) 'avatar_sizes': avatarSizes,
      if (metadata != null) 'metadata': metadata,
      if (voice != null) 'voice': voice,
      if (imageSmallUrl != null) 'image_small_url': imageSmallUrl,
      if (imageMediumUrl != null) 'image_medium_url': imageMediumUrl,
      if (imageLargeUrl != null) 'image_large_url': imageLargeUrl,
      if (systemPrompt != null) 'system_prompt': systemPrompt,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String name,
    String? bio,
    String? photoUrl,
    String? sex,
    int? yearOfBirth,
    String? voiceId,
    Map<String, dynamic>? voiceSettings,
    String? prompt,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? imageUrl,
    Map<String, dynamic>? avatarSizes,
    Map<String, dynamic>? metadata,
    String? voice,
    String? imageSmallUrl,
    String? imageMediumUrl,
    String? imageLargeUrl,
    String? systemPrompt,
  }) {
    return _generateMap(
      id: id,
      name: name,
      bio: bio,
      photoUrl: photoUrl,
      sex: sex,
      yearOfBirth: yearOfBirth,
      voiceId: voiceId,
      voiceSettings: voiceSettings,
      prompt: prompt,
      isActive: isActive,
      createdAt: createdAt,
      updatedAt: updatedAt,
      imageUrl: imageUrl,
      avatarSizes: avatarSizes,
      metadata: metadata,
      voice: voice,
      imageSmallUrl: imageSmallUrl,
      imageMediumUrl: imageMediumUrl,
      imageLargeUrl: imageLargeUrl,
      systemPrompt: systemPrompt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? name,
    String? bio,
    String? photoUrl,
    String? sex,
    int? yearOfBirth,
    String? voiceId,
    Map<String, dynamic>? voiceSettings,
    String? prompt,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? imageUrl,
    Map<String, dynamic>? avatarSizes,
    Map<String, dynamic>? metadata,
    String? voice,
    String? imageSmallUrl,
    String? imageMediumUrl,
    String? imageLargeUrl,
    String? systemPrompt,
  }) {
    return _generateMap(
      id: id,
      name: name,
      bio: bio,
      photoUrl: photoUrl,
      sex: sex,
      yearOfBirth: yearOfBirth,
      voiceId: voiceId,
      voiceSettings: voiceSettings,
      prompt: prompt,
      isActive: isActive,
      createdAt: createdAt,
      updatedAt: updatedAt,
      imageUrl: imageUrl,
      avatarSizes: avatarSizes,
      metadata: metadata,
      voice: voice,
      imageSmallUrl: imageSmallUrl,
      imageMediumUrl: imageMediumUrl,
      imageLargeUrl: imageLargeUrl,
      systemPrompt: systemPrompt,
    );
  }
  factory Coaches.fromJson(Map<String, dynamic> jsonn) {
    return Coaches(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      name: jsonn['name'] != null ? jsonn['name'].toString() : '',
      bio: jsonn['bio'] != null ? jsonn['bio'].toString() : null,
      photoUrl:
          jsonn['photo_url'] != null ? jsonn['photo_url'].toString() : null,
      sex: jsonn['sex'] != null ? jsonn['sex'].toString() : null,
      yearOfBirth: jsonn['year_of_birth'] != null
          ? int.parse(jsonn['year_of_birth'].toString())
          : null,
      voiceId: jsonn['voice_id'] != null ? jsonn['voice_id'].toString() : null,
      voiceSettings: jsonn['voice_settings'] != null
          ? jsonn['voice_settings'] as Map<String, dynamic>
          : null,
      prompt: jsonn['prompt'] != null ? jsonn['prompt'].toString() : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      imageUrl:
          jsonn['image_url'] != null ? jsonn['image_url'].toString() : null,
      avatarSizes: jsonn['avatar_sizes'] != null
          ? jsonn['avatar_sizes'] as Map<String, dynamic>
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      voice: jsonn['voice'] != null ? jsonn['voice'].toString() : null,
      imageSmallUrl: jsonn['image_small_url'] != null
          ? jsonn['image_small_url'].toString()
          : null,
      imageMediumUrl: jsonn['image_medium_url'] != null
          ? jsonn['image_medium_url'].toString()
          : null,
      imageLargeUrl: jsonn['image_large_url'] != null
          ? jsonn['image_large_url'].toString()
          : null,
      systemPrompt: jsonn['system_prompt'] != null
          ? jsonn['system_prompt'].toString()
          : null,
    );
  }
  static Object New({
    String? id,
    String? name,
    String? bio,
    String? photoUrl,
    String? sex,
    int? yearOfBirth,
    String? voiceId,
    Map<String, dynamic>? voiceSettings,
    String? prompt,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? imageUrl,
    Map<String, dynamic>? avatarSizes,
    Map<String, dynamic>? metadata,
    String? voice,
    String? imageSmallUrl,
    String? imageMediumUrl,
    String? imageLargeUrl,
    String? systemPrompt,
  }) {
    return {
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (bio != null) 'bio': bio,
      if (photoUrl != null) 'photo_url': photoUrl,
      if (sex != null) 'sex': sex,
      if (yearOfBirth != null) 'year_of_birth': yearOfBirth,
      if (voiceId != null) 'voice_id': voiceId,
      if (voiceSettings != null) 'voice_settings': voiceSettings,
      if (prompt != null) 'prompt': prompt,
      if (isActive != null) 'is_active': isActive,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (imageUrl != null) 'image_url': imageUrl,
      if (avatarSizes != null) 'avatar_sizes': avatarSizes,
      if (metadata != null) 'metadata': metadata,
      if (voice != null) 'voice': voice,
      if (imageSmallUrl != null) 'image_small_url': imageSmallUrl,
      if (imageMediumUrl != null) 'image_medium_url': imageMediumUrl,
      if (imageLargeUrl != null) 'image_large_url': imageLargeUrl,
      if (systemPrompt != null) 'system_prompt': systemPrompt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      name: name,
      bio: bio,
      photoUrl: photoUrl,
      sex: sex,
      yearOfBirth: yearOfBirth,
      voiceId: voiceId,
      voiceSettings: voiceSettings,
      prompt: prompt,
      isActive: isActive,
      createdAt: createdAt,
      updatedAt: updatedAt,
      imageUrl: imageUrl,
      avatarSizes: avatarSizes,
      metadata: metadata,
      voice: voice,
      imageSmallUrl: imageSmallUrl,
      imageMediumUrl: imageMediumUrl,
      imageLargeUrl: imageLargeUrl,
      systemPrompt: systemPrompt,
    );
  }
  static const _unset = Object();
  Coaches copyWith({
    Object? id = _unset,
    Object? name = _unset,
    Object? bio = _unset,
    Object? photoUrl = _unset,
    Object? sex = _unset,
    Object? yearOfBirth = _unset,
    Object? voiceId = _unset,
    Object? voiceSettings = _unset,
    Object? prompt = _unset,
    Object? isActive = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? imageUrl = _unset,
    Object? avatarSizes = _unset,
    Object? metadata = _unset,
    Object? voice = _unset,
    Object? imageSmallUrl = _unset,
    Object? imageMediumUrl = _unset,
    Object? imageLargeUrl = _unset,
    Object? systemPrompt = _unset,
  }) {
    return Coaches(
      id: id == _unset ? this.id : id as String,
      name: name == _unset ? this.name : name as String,
      bio: bio == _unset ? this.bio : bio as String?,
      photoUrl: photoUrl == _unset ? this.photoUrl : photoUrl as String?,
      sex: sex == _unset ? this.sex : sex as String?,
      yearOfBirth:
          yearOfBirth == _unset ? this.yearOfBirth : yearOfBirth as int?,
      voiceId: voiceId == _unset ? this.voiceId : voiceId as String?,
      voiceSettings: voiceSettings == _unset
          ? this.voiceSettings
          : voiceSettings as Map<String, dynamic>?,
      prompt: prompt == _unset ? this.prompt : prompt as String?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      imageUrl: imageUrl == _unset ? this.imageUrl : imageUrl as String?,
      avatarSizes: avatarSizes == _unset
          ? this.avatarSizes
          : avatarSizes as Map<String, dynamic>?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      voice: voice == _unset ? this.voice : voice as String?,
      imageSmallUrl: imageSmallUrl == _unset
          ? this.imageSmallUrl
          : imageSmallUrl as String?,
      imageMediumUrl: imageMediumUrl == _unset
          ? this.imageMediumUrl
          : imageMediumUrl as String?,
      imageLargeUrl: imageLargeUrl == _unset
          ? this.imageLargeUrl
          : imageLargeUrl as String?,
      systemPrompt:
          systemPrompt == _unset ? this.systemPrompt : systemPrompt as String?,
    );
  }
}

// test-typeshealth_cards.dart
class HealthCards implements SupadartClass<HealthCards> {
  final String id;
  final String userId;
  final String? categoryId;
  final String? checkinId;
  final int type;
  final String title;
  final String content;
  final int? importance;
  final bool? isChecked;
  final DateTime? expiresAt;
  final DateTime? createdAt;
  const HealthCards({
    required this.id,
    required this.userId,
    this.categoryId,
    this.checkinId,
    required this.type,
    required this.title,
    required this.content,
    this.importance,
    this.isChecked,
    this.expiresAt,
    this.createdAt,
  });
  static String get table_name => 'health_cards';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_checkinId => 'checkin_id';
  static String get c_type => 'type';
  static String get c_title => 'title';
  static String get c_content => 'content';
  static String get c_importance => 'importance';
  static String get c_isChecked => 'is_checked';
  static String get c_expiresAt => 'expires_at';
  static String get c_createdAt => 'created_at';
  static List<HealthCards> converter(List<Map<String, dynamic>> data) {
    return data.map(HealthCards.fromJson).toList();
  }
  static HealthCards converterSingle(Map<String, dynamic> data) {
    return HealthCards.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinId,
    int? type,
    String? title,
    String? content,
    int? importance,
    bool? isChecked,
    DateTime? expiresAt,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinId != null) 'checkin_id': checkinId,
      if (type != null) 'type': type,
      if (title != null) 'title': title,
      if (content != null) 'content': content,
      if (importance != null) 'importance': importance,
      if (isChecked != null) 'is_checked': isChecked,
      if (expiresAt != null) 'expires_at': expiresAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    String? categoryId,
    String? checkinId,
    required int type,
    required String title,
    required String content,
    int? importance,
    bool? isChecked,
    DateTime? expiresAt,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinId: checkinId,
      type: type,
      title: title,
      content: content,
      importance: importance,
      isChecked: isChecked,
      expiresAt: expiresAt,
      createdAt: createdAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinId,
    int? type,
    String? title,
    String? content,
    int? importance,
    bool? isChecked,
    DateTime? expiresAt,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinId: checkinId,
      type: type,
      title: title,
      content: content,
      importance: importance,
      isChecked: isChecked,
      expiresAt: expiresAt,
      createdAt: createdAt,
    );
  }
  factory HealthCards.fromJson(Map<String, dynamic> jsonn) {
    return HealthCards(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      checkinId:
          jsonn['checkin_id'] != null ? jsonn['checkin_id'].toString() : null,
      type: jsonn['type'] != null ? int.parse(jsonn['type'].toString()) : 0,
      title: jsonn['title'] != null ? jsonn['title'].toString() : '',
      content: jsonn['content'] != null ? jsonn['content'].toString() : '',
      importance: jsonn['importance'] != null
          ? int.parse(jsonn['importance'].toString())
          : null,
      isChecked:
          jsonn['is_checked'] != null ? jsonn['is_checked'] as bool : null,
      expiresAt: jsonn['expires_at'] != null
          ? DateTime.parse(jsonn['expires_at'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinId,
    int? type,
    String? title,
    String? content,
    int? importance,
    bool? isChecked,
    DateTime? expiresAt,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinId != null) 'checkin_id': checkinId,
      if (type != null) 'type': type,
      if (title != null) 'title': title,
      if (content != null) 'content': content,
      if (importance != null) 'importance': importance,
      if (isChecked != null) 'is_checked': isChecked,
      if (expiresAt != null) 'expires_at': expiresAt,
      if (createdAt != null) 'created_at': createdAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinId: checkinId,
      type: type,
      title: title,
      content: content,
      importance: importance,
      isChecked: isChecked,
      expiresAt: expiresAt,
      createdAt: createdAt,
    );
  }
  static const _unset = Object();
  HealthCards copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? checkinId = _unset,
    Object? type = _unset,
    Object? title = _unset,
    Object? content = _unset,
    Object? importance = _unset,
    Object? isChecked = _unset,
    Object? expiresAt = _unset,
    Object? createdAt = _unset,
  }) {
    return HealthCards(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      checkinId: checkinId == _unset ? this.checkinId : checkinId as String?,
      type: type == _unset ? this.type : type as int,
      title: title == _unset ? this.title : title as String,
      content: content == _unset ? this.content : content as String,
      importance: importance == _unset ? this.importance : importance as int?,
      isChecked: isChecked == _unset ? this.isChecked : isChecked as bool?,
      expiresAt: expiresAt == _unset ? this.expiresAt : expiresAt as DateTime?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
    );
  }
}

// test-typesimage_migrations.dart
class ImageMigrations implements SupadartClass<ImageMigrations> {
  final String id;
  final int? oldImageId;
  final String newUrl;
  final String bucket;
  final String path;
  final DateTime? migratedAt;
  const ImageMigrations({
    required this.id,
    this.oldImageId,
    required this.newUrl,
    required this.bucket,
    required this.path,
    this.migratedAt,
  });
  static String get table_name => 'image_migrations';
  static String get c_id => 'id';
  static String get c_oldImageId => 'old_image_id';
  static String get c_newUrl => 'new_url';
  static String get c_bucket => 'bucket';
  static String get c_path => 'path';
  static String get c_migratedAt => 'migrated_at';
  static List<ImageMigrations> converter(List<Map<String, dynamic>> data) {
    return data.map(ImageMigrations.fromJson).toList();
  }
  static ImageMigrations converterSingle(Map<String, dynamic> data) {
    return ImageMigrations.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    int? oldImageId,
    String? newUrl,
    String? bucket,
    String? path,
    DateTime? migratedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (oldImageId != null) 'old_image_id': oldImageId,
      if (newUrl != null) 'new_url': newUrl,
      if (bucket != null) 'bucket': bucket,
      if (path != null) 'path': path,
      if (migratedAt != null)
        'migrated_at': migratedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    int? oldImageId,
    required String newUrl,
    required String bucket,
    required String path,
    DateTime? migratedAt,
  }) {
    return _generateMap(
      id: id,
      oldImageId: oldImageId,
      newUrl: newUrl,
      bucket: bucket,
      path: path,
      migratedAt: migratedAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    int? oldImageId,
    String? newUrl,
    String? bucket,
    String? path,
    DateTime? migratedAt,
  }) {
    return _generateMap(
      id: id,
      oldImageId: oldImageId,
      newUrl: newUrl,
      bucket: bucket,
      path: path,
      migratedAt: migratedAt,
    );
  }
  factory ImageMigrations.fromJson(Map<String, dynamic> jsonn) {
    return ImageMigrations(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      oldImageId: jsonn['old_image_id'] != null
          ? int.parse(jsonn['old_image_id'].toString())
          : null,
      newUrl: jsonn['new_url'] != null ? jsonn['new_url'].toString() : '',
      bucket: jsonn['bucket'] != null ? jsonn['bucket'].toString() : '',
      path: jsonn['path'] != null ? jsonn['path'].toString() : '',
      migratedAt: jsonn['migrated_at'] != null
          ? DateTime.parse(jsonn['migrated_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    int? oldImageId,
    String? newUrl,
    String? bucket,
    String? path,
    DateTime? migratedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (oldImageId != null) 'old_image_id': oldImageId,
      if (newUrl != null) 'new_url': newUrl,
      if (bucket != null) 'bucket': bucket,
      if (path != null) 'path': path,
      if (migratedAt != null) 'migrated_at': migratedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      oldImageId: oldImageId,
      newUrl: newUrl,
      bucket: bucket,
      path: path,
      migratedAt: migratedAt,
    );
  }
  static const _unset = Object();
  ImageMigrations copyWith({
    Object? id = _unset,
    Object? oldImageId = _unset,
    Object? newUrl = _unset,
    Object? bucket = _unset,
    Object? path = _unset,
    Object? migratedAt = _unset,
  }) {
    return ImageMigrations(
      id: id == _unset ? this.id : id as String,
      oldImageId: oldImageId == _unset ? this.oldImageId : oldImageId as int?,
      newUrl: newUrl == _unset ? this.newUrl : newUrl as String,
      bucket: bucket == _unset ? this.bucket : bucket as String,
      path: path == _unset ? this.path : path as String,
      migratedAt:
          migratedAt == _unset ? this.migratedAt : migratedAt as DateTime?,
    );
  }
}

// test-typesmessage_threads.dart
class MessageThreads implements SupadartClass<MessageThreads> {
  final String id;
  final String userId;
  final String categoryId;
  final String? coachId;
  final String? title;
  final DateTime? lastMessageAt;
  final int? messageCount;
  final bool? isArchived;
  final Map<String, dynamic>? metadata;
  final DateTime createdAt;
  final DateTime updatedAt;
  const MessageThreads({
    required this.id,
    required this.userId,
    required this.categoryId,
    this.coachId,
    this.title,
    this.lastMessageAt,
    this.messageCount,
    this.isArchived,
    this.metadata,
    required this.createdAt,
    required this.updatedAt,
  });
  static String get table_name => 'message_threads';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_coachId => 'coach_id';
  static String get c_title => 'title';
  static String get c_lastMessageAt => 'last_message_at';
  static String get c_messageCount => 'message_count';
  static String get c_isArchived => 'is_archived';
  static String get c_metadata => 'metadata';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static List<MessageThreads> converter(List<Map<String, dynamic>> data) {
    return data.map(MessageThreads.fromJson).toList();
  }
  static MessageThreads converterSingle(Map<String, dynamic> data) {
    return MessageThreads.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? coachId,
    String? title,
    DateTime? lastMessageAt,
    int? messageCount,
    bool? isArchived,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (coachId != null) 'coach_id': coachId,
      if (title != null) 'title': title,
      if (lastMessageAt != null)
        'last_message_at': lastMessageAt.toUtc().toIso8601String(),
      if (messageCount != null) 'message_count': messageCount,
      if (isArchived != null) 'is_archived': isArchived,
      if (metadata != null) 'metadata': metadata,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    required String categoryId,
    String? coachId,
    String? title,
    DateTime? lastMessageAt,
    int? messageCount,
    bool? isArchived,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      coachId: coachId,
      title: title,
      lastMessageAt: lastMessageAt,
      messageCount: messageCount,
      isArchived: isArchived,
      metadata: metadata,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? coachId,
    String? title,
    DateTime? lastMessageAt,
    int? messageCount,
    bool? isArchived,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      coachId: coachId,
      title: title,
      lastMessageAt: lastMessageAt,
      messageCount: messageCount,
      isArchived: isArchived,
      metadata: metadata,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  factory MessageThreads.fromJson(Map<String, dynamic> jsonn) {
    return MessageThreads(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : '',
      coachId: jsonn['coach_id'] != null ? jsonn['coach_id'].toString() : null,
      title: jsonn['title'] != null ? jsonn['title'].toString() : null,
      lastMessageAt: jsonn['last_message_at'] != null
          ? DateTime.parse(jsonn['last_message_at'].toString())
          : null,
      messageCount: jsonn['message_count'] != null
          ? int.parse(jsonn['message_count'].toString())
          : null,
      isArchived:
          jsonn['is_archived'] != null ? jsonn['is_archived'] as bool : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? coachId,
    String? title,
    DateTime? lastMessageAt,
    int? messageCount,
    bool? isArchived,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (coachId != null) 'coach_id': coachId,
      if (title != null) 'title': title,
      if (lastMessageAt != null) 'last_message_at': lastMessageAt,
      if (messageCount != null) 'message_count': messageCount,
      if (isArchived != null) 'is_archived': isArchived,
      if (metadata != null) 'metadata': metadata,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      coachId: coachId,
      title: title,
      lastMessageAt: lastMessageAt,
      messageCount: messageCount,
      isArchived: isArchived,
      metadata: metadata,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static const _unset = Object();
  MessageThreads copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? coachId = _unset,
    Object? title = _unset,
    Object? lastMessageAt = _unset,
    Object? messageCount = _unset,
    Object? isArchived = _unset,
    Object? metadata = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
  }) {
    return MessageThreads(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      categoryId: categoryId == _unset ? this.categoryId : categoryId as String,
      coachId: coachId == _unset ? this.coachId : coachId as String?,
      title: title == _unset ? this.title : title as String?,
      lastMessageAt: lastMessageAt == _unset
          ? this.lastMessageAt
          : lastMessageAt as DateTime?,
      messageCount:
          messageCount == _unset ? this.messageCount : messageCount as int?,
      isArchived: isArchived == _unset ? this.isArchived : isArchived as bool?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime,
    );
  }
}

// test-typesmessages.dart
class Messages implements SupadartClass<Messages> {
  final String id;
  final String userId;
  final String? categoryId;
  final String? parentMessageId;
  final String role;
  final String content;
  final String? contentType;
  final String? coachId;
  final Map<String, dynamic>? answerOptions;
  final Map<String, dynamic>? metadata;
  final int? tokensUsed;
  final DateTime? createdAt;
  final String? conversationId;
  final int? messageOrder;
  final String? refCategoryId;
  final String? refCheckinId;
  final String? refRecommendationId;
  final bool? isRead;
  final bool? aiProcessed;
  final int? aiResponseTimeMs;
  final String? voiceUrl;
  final int? durationSeconds;
  final String? threadId;
  final String? replyToId;
  final String? messageType;
  final bool? isEdited;
  final DateTime? editedAt;
  final DateTime? readAt;
  const Messages({
    required this.id,
    required this.userId,
    this.categoryId,
    this.parentMessageId,
    required this.role,
    required this.content,
    this.contentType,
    this.coachId,
    this.answerOptions,
    this.metadata,
    this.tokensUsed,
    this.createdAt,
    this.conversationId,
    this.messageOrder,
    this.refCategoryId,
    this.refCheckinId,
    this.refRecommendationId,
    this.isRead,
    this.aiProcessed,
    this.aiResponseTimeMs,
    this.voiceUrl,
    this.durationSeconds,
    this.threadId,
    this.replyToId,
    this.messageType,
    this.isEdited,
    this.editedAt,
    this.readAt,
  });
  static String get table_name => 'messages';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_parentMessageId => 'parent_message_id';
  static String get c_role => 'role';
  static String get c_content => 'content';
  static String get c_contentType => 'content_type';
  static String get c_coachId => 'coach_id';
  static String get c_answerOptions => 'answer_options';
  static String get c_metadata => 'metadata';
  static String get c_tokensUsed => 'tokens_used';
  static String get c_createdAt => 'created_at';
  static String get c_conversationId => 'conversation_id';
  static String get c_messageOrder => 'message_order';
  static String get c_refCategoryId => 'ref_category_id';
  static String get c_refCheckinId => 'ref_checkin_id';
  static String get c_refRecommendationId => 'ref_recommendation_id';
  static String get c_isRead => 'is_read';
  static String get c_aiProcessed => 'ai_processed';
  static String get c_aiResponseTimeMs => 'ai_response_time_ms';
  static String get c_voiceUrl => 'voice_url';
  static String get c_durationSeconds => 'duration_seconds';
  static String get c_threadId => 'thread_id';
  static String get c_replyToId => 'reply_to_id';
  static String get c_messageType => 'message_type';
  static String get c_isEdited => 'is_edited';
  static String get c_editedAt => 'edited_at';
  static String get c_readAt => 'read_at';
  static List<Messages> converter(List<Map<String, dynamic>> data) {
    return data.map(Messages.fromJson).toList();
  }
  static Messages converterSingle(Map<String, dynamic> data) {
    return Messages.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? parentMessageId,
    String? role,
    String? content,
    String? contentType,
    String? coachId,
    Map<String, dynamic>? answerOptions,
    Map<String, dynamic>? metadata,
    int? tokensUsed,
    DateTime? createdAt,
    String? conversationId,
    int? messageOrder,
    String? refCategoryId,
    String? refCheckinId,
    String? refRecommendationId,
    bool? isRead,
    bool? aiProcessed,
    int? aiResponseTimeMs,
    String? voiceUrl,
    int? durationSeconds,
    String? threadId,
    String? replyToId,
    String? messageType,
    bool? isEdited,
    DateTime? editedAt,
    DateTime? readAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (parentMessageId != null) 'parent_message_id': parentMessageId,
      if (role != null) 'role': role,
      if (content != null) 'content': content,
      if (contentType != null) 'content_type': contentType,
      if (coachId != null) 'coach_id': coachId,
      if (answerOptions != null) 'answer_options': answerOptions,
      if (metadata != null) 'metadata': metadata,
      if (tokensUsed != null) 'tokens_used': tokensUsed,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (conversationId != null) 'conversation_id': conversationId,
      if (messageOrder != null) 'message_order': messageOrder,
      if (refCategoryId != null) 'ref_category_id': refCategoryId,
      if (refCheckinId != null) 'ref_checkin_id': refCheckinId,
      if (refRecommendationId != null)
        'ref_recommendation_id': refRecommendationId,
      if (isRead != null) 'is_read': isRead,
      if (aiProcessed != null) 'ai_processed': aiProcessed,
      if (aiResponseTimeMs != null) 'ai_response_time_ms': aiResponseTimeMs,
      if (voiceUrl != null) 'voice_url': voiceUrl,
      if (durationSeconds != null) 'duration_seconds': durationSeconds,
      if (threadId != null) 'thread_id': threadId,
      if (replyToId != null) 'reply_to_id': replyToId,
      if (messageType != null) 'message_type': messageType,
      if (isEdited != null) 'is_edited': isEdited,
      if (editedAt != null) 'edited_at': editedAt.toUtc().toIso8601String(),
      if (readAt != null) 'read_at': readAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    String? categoryId,
    String? parentMessageId,
    required String role,
    required String content,
    String? contentType,
    String? coachId,
    Map<String, dynamic>? answerOptions,
    Map<String, dynamic>? metadata,
    int? tokensUsed,
    DateTime? createdAt,
    String? conversationId,
    int? messageOrder,
    String? refCategoryId,
    String? refCheckinId,
    String? refRecommendationId,
    bool? isRead,
    bool? aiProcessed,
    int? aiResponseTimeMs,
    String? voiceUrl,
    int? durationSeconds,
    String? threadId,
    String? replyToId,
    String? messageType,
    bool? isEdited,
    DateTime? editedAt,
    DateTime? readAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      parentMessageId: parentMessageId,
      role: role,
      content: content,
      contentType: contentType,
      coachId: coachId,
      answerOptions: answerOptions,
      metadata: metadata,
      tokensUsed: tokensUsed,
      createdAt: createdAt,
      conversationId: conversationId,
      messageOrder: messageOrder,
      refCategoryId: refCategoryId,
      refCheckinId: refCheckinId,
      refRecommendationId: refRecommendationId,
      isRead: isRead,
      aiProcessed: aiProcessed,
      aiResponseTimeMs: aiResponseTimeMs,
      voiceUrl: voiceUrl,
      durationSeconds: durationSeconds,
      threadId: threadId,
      replyToId: replyToId,
      messageType: messageType,
      isEdited: isEdited,
      editedAt: editedAt,
      readAt: readAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? parentMessageId,
    String? role,
    String? content,
    String? contentType,
    String? coachId,
    Map<String, dynamic>? answerOptions,
    Map<String, dynamic>? metadata,
    int? tokensUsed,
    DateTime? createdAt,
    String? conversationId,
    int? messageOrder,
    String? refCategoryId,
    String? refCheckinId,
    String? refRecommendationId,
    bool? isRead,
    bool? aiProcessed,
    int? aiResponseTimeMs,
    String? voiceUrl,
    int? durationSeconds,
    String? threadId,
    String? replyToId,
    String? messageType,
    bool? isEdited,
    DateTime? editedAt,
    DateTime? readAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      parentMessageId: parentMessageId,
      role: role,
      content: content,
      contentType: contentType,
      coachId: coachId,
      answerOptions: answerOptions,
      metadata: metadata,
      tokensUsed: tokensUsed,
      createdAt: createdAt,
      conversationId: conversationId,
      messageOrder: messageOrder,
      refCategoryId: refCategoryId,
      refCheckinId: refCheckinId,
      refRecommendationId: refRecommendationId,
      isRead: isRead,
      aiProcessed: aiProcessed,
      aiResponseTimeMs: aiResponseTimeMs,
      voiceUrl: voiceUrl,
      durationSeconds: durationSeconds,
      threadId: threadId,
      replyToId: replyToId,
      messageType: messageType,
      isEdited: isEdited,
      editedAt: editedAt,
      readAt: readAt,
    );
  }
  factory Messages.fromJson(Map<String, dynamic> jsonn) {
    return Messages(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      parentMessageId: jsonn['parent_message_id'] != null
          ? jsonn['parent_message_id'].toString()
          : null,
      role: jsonn['role'] != null ? jsonn['role'].toString() : '',
      content: jsonn['content'] != null ? jsonn['content'].toString() : '',
      contentType: jsonn['content_type'] != null
          ? jsonn['content_type'].toString()
          : null,
      coachId: jsonn['coach_id'] != null ? jsonn['coach_id'].toString() : null,
      answerOptions: jsonn['answer_options'] != null
          ? jsonn['answer_options'] as Map<String, dynamic>
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      tokensUsed: jsonn['tokens_used'] != null
          ? int.parse(jsonn['tokens_used'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      conversationId: jsonn['conversation_id'] != null
          ? jsonn['conversation_id'].toString()
          : null,
      messageOrder: jsonn['message_order'] != null
          ? int.parse(jsonn['message_order'].toString())
          : null,
      refCategoryId: jsonn['ref_category_id'] != null
          ? jsonn['ref_category_id'].toString()
          : null,
      refCheckinId: jsonn['ref_checkin_id'] != null
          ? jsonn['ref_checkin_id'].toString()
          : null,
      refRecommendationId: jsonn['ref_recommendation_id'] != null
          ? jsonn['ref_recommendation_id'].toString()
          : null,
      isRead: jsonn['is_read'] != null ? jsonn['is_read'] as bool : null,
      aiProcessed:
          jsonn['ai_processed'] != null ? jsonn['ai_processed'] as bool : null,
      aiResponseTimeMs: jsonn['ai_response_time_ms'] != null
          ? int.parse(jsonn['ai_response_time_ms'].toString())
          : null,
      voiceUrl:
          jsonn['voice_url'] != null ? jsonn['voice_url'].toString() : null,
      durationSeconds: jsonn['duration_seconds'] != null
          ? int.parse(jsonn['duration_seconds'].toString())
          : null,
      threadId:
          jsonn['thread_id'] != null ? jsonn['thread_id'].toString() : null,
      replyToId:
          jsonn['reply_to_id'] != null ? jsonn['reply_to_id'].toString() : null,
      messageType: jsonn['message_type'] != null
          ? jsonn['message_type'].toString()
          : null,
      isEdited: jsonn['is_edited'] != null ? jsonn['is_edited'] as bool : null,
      editedAt: jsonn['edited_at'] != null
          ? DateTime.parse(jsonn['edited_at'].toString())
          : null,
      readAt: jsonn['read_at'] != null
          ? DateTime.parse(jsonn['read_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? parentMessageId,
    String? role,
    String? content,
    String? contentType,
    String? coachId,
    Map<String, dynamic>? answerOptions,
    Map<String, dynamic>? metadata,
    int? tokensUsed,
    DateTime? createdAt,
    String? conversationId,
    int? messageOrder,
    String? refCategoryId,
    String? refCheckinId,
    String? refRecommendationId,
    bool? isRead,
    bool? aiProcessed,
    int? aiResponseTimeMs,
    String? voiceUrl,
    int? durationSeconds,
    String? threadId,
    String? replyToId,
    String? messageType,
    bool? isEdited,
    DateTime? editedAt,
    DateTime? readAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (parentMessageId != null) 'parent_message_id': parentMessageId,
      if (role != null) 'role': role,
      if (content != null) 'content': content,
      if (contentType != null) 'content_type': contentType,
      if (coachId != null) 'coach_id': coachId,
      if (answerOptions != null) 'answer_options': answerOptions,
      if (metadata != null) 'metadata': metadata,
      if (tokensUsed != null) 'tokens_used': tokensUsed,
      if (createdAt != null) 'created_at': createdAt,
      if (conversationId != null) 'conversation_id': conversationId,
      if (messageOrder != null) 'message_order': messageOrder,
      if (refCategoryId != null) 'ref_category_id': refCategoryId,
      if (refCheckinId != null) 'ref_checkin_id': refCheckinId,
      if (refRecommendationId != null)
        'ref_recommendation_id': refRecommendationId,
      if (isRead != null) 'is_read': isRead,
      if (aiProcessed != null) 'ai_processed': aiProcessed,
      if (aiResponseTimeMs != null) 'ai_response_time_ms': aiResponseTimeMs,
      if (voiceUrl != null) 'voice_url': voiceUrl,
      if (durationSeconds != null) 'duration_seconds': durationSeconds,
      if (threadId != null) 'thread_id': threadId,
      if (replyToId != null) 'reply_to_id': replyToId,
      if (messageType != null) 'message_type': messageType,
      if (isEdited != null) 'is_edited': isEdited,
      if (editedAt != null) 'edited_at': editedAt,
      if (readAt != null) 'read_at': readAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      parentMessageId: parentMessageId,
      role: role,
      content: content,
      contentType: contentType,
      coachId: coachId,
      answerOptions: answerOptions,
      metadata: metadata,
      tokensUsed: tokensUsed,
      createdAt: createdAt,
      conversationId: conversationId,
      messageOrder: messageOrder,
      refCategoryId: refCategoryId,
      refCheckinId: refCheckinId,
      refRecommendationId: refRecommendationId,
      isRead: isRead,
      aiProcessed: aiProcessed,
      aiResponseTimeMs: aiResponseTimeMs,
      voiceUrl: voiceUrl,
      durationSeconds: durationSeconds,
      threadId: threadId,
      replyToId: replyToId,
      messageType: messageType,
      isEdited: isEdited,
      editedAt: editedAt,
      readAt: readAt,
    );
  }
  static const _unset = Object();
  Messages copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? parentMessageId = _unset,
    Object? role = _unset,
    Object? content = _unset,
    Object? contentType = _unset,
    Object? coachId = _unset,
    Object? answerOptions = _unset,
    Object? metadata = _unset,
    Object? tokensUsed = _unset,
    Object? createdAt = _unset,
    Object? conversationId = _unset,
    Object? messageOrder = _unset,
    Object? refCategoryId = _unset,
    Object? refCheckinId = _unset,
    Object? refRecommendationId = _unset,
    Object? isRead = _unset,
    Object? aiProcessed = _unset,
    Object? aiResponseTimeMs = _unset,
    Object? voiceUrl = _unset,
    Object? durationSeconds = _unset,
    Object? threadId = _unset,
    Object? replyToId = _unset,
    Object? messageType = _unset,
    Object? isEdited = _unset,
    Object? editedAt = _unset,
    Object? readAt = _unset,
  }) {
    return Messages(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      parentMessageId: parentMessageId == _unset
          ? this.parentMessageId
          : parentMessageId as String?,
      role: role == _unset ? this.role : role as String,
      content: content == _unset ? this.content : content as String,
      contentType:
          contentType == _unset ? this.contentType : contentType as String?,
      coachId: coachId == _unset ? this.coachId : coachId as String?,
      answerOptions: answerOptions == _unset
          ? this.answerOptions
          : answerOptions as Map<String, dynamic>?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      tokensUsed: tokensUsed == _unset ? this.tokensUsed : tokensUsed as int?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      conversationId: conversationId == _unset
          ? this.conversationId
          : conversationId as String?,
      messageOrder:
          messageOrder == _unset ? this.messageOrder : messageOrder as int?,
      refCategoryId: refCategoryId == _unset
          ? this.refCategoryId
          : refCategoryId as String?,
      refCheckinId:
          refCheckinId == _unset ? this.refCheckinId : refCheckinId as String?,
      refRecommendationId: refRecommendationId == _unset
          ? this.refRecommendationId
          : refRecommendationId as String?,
      isRead: isRead == _unset ? this.isRead : isRead as bool?,
      aiProcessed:
          aiProcessed == _unset ? this.aiProcessed : aiProcessed as bool?,
      aiResponseTimeMs: aiResponseTimeMs == _unset
          ? this.aiResponseTimeMs
          : aiResponseTimeMs as int?,
      voiceUrl: voiceUrl == _unset ? this.voiceUrl : voiceUrl as String?,
      durationSeconds: durationSeconds == _unset
          ? this.durationSeconds
          : durationSeconds as int?,
      threadId: threadId == _unset ? this.threadId : threadId as String?,
      replyToId: replyToId == _unset ? this.replyToId : replyToId as String?,
      messageType:
          messageType == _unset ? this.messageType : messageType as String?,
      isEdited: isEdited == _unset ? this.isEdited : isEdited as bool?,
      editedAt: editedAt == _unset ? this.editedAt : editedAt as DateTime?,
      readAt: readAt == _unset ? this.readAt : readAt as DateTime?,
    );
  }
}

// test-typesoffline_queue.dart
class OfflineQueue implements SupadartClass<OfflineQueue> {
  final String id;
  final String? userId;
  final String operationType;
  final Map<String, dynamic> payload;
  final String status;
  final int? retryCount;
  final String? errorMessage;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  const OfflineQueue({
    required this.id,
    this.userId,
    required this.operationType,
    required this.payload,
    required this.status,
    this.retryCount,
    this.errorMessage,
    this.createdAt,
    this.updatedAt,
  });
  static String get table_name => 'offline_queue';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_operationType => 'operation_type';
  static String get c_payload => 'payload';
  static String get c_status => 'status';
  static String get c_retryCount => 'retry_count';
  static String get c_errorMessage => 'error_message';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static List<OfflineQueue> converter(List<Map<String, dynamic>> data) {
    return data.map(OfflineQueue.fromJson).toList();
  }
  static OfflineQueue converterSingle(Map<String, dynamic> data) {
    return OfflineQueue.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? operationType,
    Map<String, dynamic>? payload,
    String? status,
    int? retryCount,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (operationType != null) 'operation_type': operationType,
      if (payload != null) 'payload': payload,
      if (status != null) 'status': status,
      if (retryCount != null) 'retry_count': retryCount,
      if (errorMessage != null) 'error_message': errorMessage,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    required String operationType,
    required Map<String, dynamic> payload,
    String? status,
    int? retryCount,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      operationType: operationType,
      payload: payload,
      status: status,
      retryCount: retryCount,
      errorMessage: errorMessage,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? operationType,
    Map<String, dynamic>? payload,
    String? status,
    int? retryCount,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      operationType: operationType,
      payload: payload,
      status: status,
      retryCount: retryCount,
      errorMessage: errorMessage,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  factory OfflineQueue.fromJson(Map<String, dynamic> jsonn) {
    return OfflineQueue(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      operationType: jsonn['operation_type'] != null
          ? jsonn['operation_type'].toString()
          : '',
      payload: jsonn['payload'] != null
          ? jsonn['payload'] as Map<String, dynamic>
          : <String, dynamic>{},
      status: jsonn['status'] != null ? jsonn['status'].toString() : '',
      retryCount: jsonn['retry_count'] != null
          ? int.parse(jsonn['retry_count'].toString())
          : null,
      errorMessage: jsonn['error_message'] != null
          ? jsonn['error_message'].toString()
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? operationType,
    Map<String, dynamic>? payload,
    String? status,
    int? retryCount,
    String? errorMessage,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (operationType != null) 'operation_type': operationType,
      if (payload != null) 'payload': payload,
      if (status != null) 'status': status,
      if (retryCount != null) 'retry_count': retryCount,
      if (errorMessage != null) 'error_message': errorMessage,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      operationType: operationType,
      payload: payload,
      status: status,
      retryCount: retryCount,
      errorMessage: errorMessage,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static const _unset = Object();
  OfflineQueue copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? operationType = _unset,
    Object? payload = _unset,
    Object? status = _unset,
    Object? retryCount = _unset,
    Object? errorMessage = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
  }) {
    return OfflineQueue(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String?,
      operationType: operationType == _unset
          ? this.operationType
          : operationType as String,
      payload:
          payload == _unset ? this.payload : payload as Map<String, dynamic>,
      status: status == _unset ? this.status : status as String,
      retryCount: retryCount == _unset ? this.retryCount : retryCount as int?,
      errorMessage:
          errorMessage == _unset ? this.errorMessage : errorMessage as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
    );
  }
}

// test-typesprofile_categories.dart
class ProfileCategories implements SupadartClass<ProfileCategories> {
  final String id;
  final String userId;
  final String categoryId;
  final bool? isFavorite;
  final bool? isShortcut;
  final int? progress;
  final DateTime? lastCheckinAt;
  final int? checkinCount;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final int? totalCheckins;
  final num? averageWellnessLevel;
  final Map<String, dynamic>? metadata;
  const ProfileCategories({
    required this.id,
    required this.userId,
    required this.categoryId,
    this.isFavorite,
    this.isShortcut,
    this.progress,
    this.lastCheckinAt,
    this.checkinCount,
    this.createdAt,
    this.updatedAt,
    this.totalCheckins,
    this.averageWellnessLevel,
    this.metadata,
  });
  static String get table_name => 'profile_categories';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_isFavorite => 'is_favorite';
  static String get c_isShortcut => 'is_shortcut';
  static String get c_progress => 'progress';
  static String get c_lastCheckinAt => 'last_checkin_at';
  static String get c_checkinCount => 'checkin_count';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_totalCheckins => 'total_checkins';
  static String get c_averageWellnessLevel => 'average_wellness_level';
  static String get c_metadata => 'metadata';
  static List<ProfileCategories> converter(List<Map<String, dynamic>> data) {
    return data.map(ProfileCategories.fromJson).toList();
  }
  static ProfileCategories converterSingle(Map<String, dynamic> data) {
    return ProfileCategories.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isShortcut,
    int? progress,
    DateTime? lastCheckinAt,
    int? checkinCount,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? totalCheckins,
    num? averageWellnessLevel,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (isFavorite != null) 'is_favorite': isFavorite,
      if (isShortcut != null) 'is_shortcut': isShortcut,
      if (progress != null) 'progress': progress,
      if (lastCheckinAt != null)
        'last_checkin_at': lastCheckinAt.toUtc().toIso8601String(),
      if (checkinCount != null) 'checkin_count': checkinCount,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (totalCheckins != null) 'total_checkins': totalCheckins,
      if (averageWellnessLevel != null)
        'average_wellness_level': averageWellnessLevel.toString(),
      if (metadata != null) 'metadata': metadata,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    required String categoryId,
    bool? isFavorite,
    bool? isShortcut,
    int? progress,
    DateTime? lastCheckinAt,
    int? checkinCount,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? totalCheckins,
    num? averageWellnessLevel,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      isFavorite: isFavorite,
      isShortcut: isShortcut,
      progress: progress,
      lastCheckinAt: lastCheckinAt,
      checkinCount: checkinCount,
      createdAt: createdAt,
      updatedAt: updatedAt,
      totalCheckins: totalCheckins,
      averageWellnessLevel: averageWellnessLevel,
      metadata: metadata,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isShortcut,
    int? progress,
    DateTime? lastCheckinAt,
    int? checkinCount,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? totalCheckins,
    num? averageWellnessLevel,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      isFavorite: isFavorite,
      isShortcut: isShortcut,
      progress: progress,
      lastCheckinAt: lastCheckinAt,
      checkinCount: checkinCount,
      createdAt: createdAt,
      updatedAt: updatedAt,
      totalCheckins: totalCheckins,
      averageWellnessLevel: averageWellnessLevel,
      metadata: metadata,
    );
  }
  factory ProfileCategories.fromJson(Map<String, dynamic> jsonn) {
    return ProfileCategories(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : '',
      isFavorite:
          jsonn['is_favorite'] != null ? jsonn['is_favorite'] as bool : null,
      isShortcut:
          jsonn['is_shortcut'] != null ? jsonn['is_shortcut'] as bool : null,
      progress: jsonn['progress'] != null
          ? int.parse(jsonn['progress'].toString())
          : null,
      lastCheckinAt: jsonn['last_checkin_at'] != null
          ? DateTime.parse(jsonn['last_checkin_at'].toString())
          : null,
      checkinCount: jsonn['checkin_count'] != null
          ? int.parse(jsonn['checkin_count'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      totalCheckins: jsonn['total_checkins'] != null
          ? int.parse(jsonn['total_checkins'].toString())
          : null,
      averageWellnessLevel: jsonn['average_wellness_level'] != null
          ? num.parse(jsonn['average_wellness_level'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isShortcut,
    int? progress,
    DateTime? lastCheckinAt,
    int? checkinCount,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? totalCheckins,
    num? averageWellnessLevel,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (isFavorite != null) 'is_favorite': isFavorite,
      if (isShortcut != null) 'is_shortcut': isShortcut,
      if (progress != null) 'progress': progress,
      if (lastCheckinAt != null) 'last_checkin_at': lastCheckinAt,
      if (checkinCount != null) 'checkin_count': checkinCount,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (totalCheckins != null) 'total_checkins': totalCheckins,
      if (averageWellnessLevel != null)
        'average_wellness_level': averageWellnessLevel,
      if (metadata != null) 'metadata': metadata,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      isFavorite: isFavorite,
      isShortcut: isShortcut,
      progress: progress,
      lastCheckinAt: lastCheckinAt,
      checkinCount: checkinCount,
      createdAt: createdAt,
      updatedAt: updatedAt,
      totalCheckins: totalCheckins,
      averageWellnessLevel: averageWellnessLevel,
      metadata: metadata,
    );
  }
  static const _unset = Object();
  ProfileCategories copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? isFavorite = _unset,
    Object? isShortcut = _unset,
    Object? progress = _unset,
    Object? lastCheckinAt = _unset,
    Object? checkinCount = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? totalCheckins = _unset,
    Object? averageWellnessLevel = _unset,
    Object? metadata = _unset,
  }) {
    return ProfileCategories(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      categoryId: categoryId == _unset ? this.categoryId : categoryId as String,
      isFavorite: isFavorite == _unset ? this.isFavorite : isFavorite as bool?,
      isShortcut: isShortcut == _unset ? this.isShortcut : isShortcut as bool?,
      progress: progress == _unset ? this.progress : progress as int?,
      lastCheckinAt: lastCheckinAt == _unset
          ? this.lastCheckinAt
          : lastCheckinAt as DateTime?,
      checkinCount:
          checkinCount == _unset ? this.checkinCount : checkinCount as int?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      totalCheckins:
          totalCheckins == _unset ? this.totalCheckins : totalCheckins as int?,
      averageWellnessLevel: averageWellnessLevel == _unset
          ? this.averageWellnessLevel
          : averageWellnessLevel as num?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
    );
  }
}

// test-typesprofile_categories_detailed.dart
class ProfileCategoriesDetailed
    implements SupadartClass<ProfileCategoriesDetailed> {
  final String? id;
  final String? userId;
  final String? categoryId;
  final bool? isFavorite;
  final bool? isShortcut;
  final int? progress;
  final DateTime? lastCheckinAt;
  final int? checkinCount;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final int? totalCheckins;
  final num? averageWellnessLevel;
  final String? categoryName;
  final String? categoryNameShort;
  final String? categoryDescription;
  final String? categoryIcon;
  final String? primaryColor;
  final String? secondaryColor;
  final bool? checkinEnabled;
  final int? maxQuestions;
  const ProfileCategoriesDetailed({
    this.id,
    this.userId,
    this.categoryId,
    this.isFavorite,
    this.isShortcut,
    this.progress,
    this.lastCheckinAt,
    this.checkinCount,
    this.createdAt,
    this.updatedAt,
    this.totalCheckins,
    this.averageWellnessLevel,
    this.categoryName,
    this.categoryNameShort,
    this.categoryDescription,
    this.categoryIcon,
    this.primaryColor,
    this.secondaryColor,
    this.checkinEnabled,
    this.maxQuestions,
  });
  static String get table_name => 'profile_categories_detailed';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_isFavorite => 'is_favorite';
  static String get c_isShortcut => 'is_shortcut';
  static String get c_progress => 'progress';
  static String get c_lastCheckinAt => 'last_checkin_at';
  static String get c_checkinCount => 'checkin_count';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_totalCheckins => 'total_checkins';
  static String get c_averageWellnessLevel => 'average_wellness_level';
  static String get c_categoryName => 'category_name';
  static String get c_categoryNameShort => 'category_name_short';
  static String get c_categoryDescription => 'category_description';
  static String get c_categoryIcon => 'category_icon';
  static String get c_primaryColor => 'primary_color';
  static String get c_secondaryColor => 'secondary_color';
  static String get c_checkinEnabled => 'checkin_enabled';
  static String get c_maxQuestions => 'max_questions';
  static List<ProfileCategoriesDetailed> converter(
      List<Map<String, dynamic>> data) {
    return data.map(ProfileCategoriesDetailed.fromJson).toList();
  }
  static ProfileCategoriesDetailed converterSingle(Map<String, dynamic> data) {
    return ProfileCategoriesDetailed.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isShortcut,
    int? progress,
    DateTime? lastCheckinAt,
    int? checkinCount,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? totalCheckins,
    num? averageWellnessLevel,
    String? categoryName,
    String? categoryNameShort,
    String? categoryDescription,
    String? categoryIcon,
    String? primaryColor,
    String? secondaryColor,
    bool? checkinEnabled,
    int? maxQuestions,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (isFavorite != null) 'is_favorite': isFavorite,
      if (isShortcut != null) 'is_shortcut': isShortcut,
      if (progress != null) 'progress': progress,
      if (lastCheckinAt != null)
        'last_checkin_at': lastCheckinAt.toUtc().toIso8601String(),
      if (checkinCount != null) 'checkin_count': checkinCount,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (totalCheckins != null) 'total_checkins': totalCheckins,
      if (averageWellnessLevel != null)
        'average_wellness_level': averageWellnessLevel.toString(),
      if (categoryName != null) 'category_name': categoryName,
      if (categoryNameShort != null) 'category_name_short': categoryNameShort,
      if (categoryDescription != null)
        'category_description': categoryDescription,
      if (categoryIcon != null) 'category_icon': categoryIcon,
      if (primaryColor != null) 'primary_color': primaryColor,
      if (secondaryColor != null) 'secondary_color': secondaryColor,
      if (checkinEnabled != null) 'checkin_enabled': checkinEnabled,
      if (maxQuestions != null) 'max_questions': maxQuestions,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isShortcut,
    int? progress,
    DateTime? lastCheckinAt,
    int? checkinCount,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? totalCheckins,
    num? averageWellnessLevel,
    String? categoryName,
    String? categoryNameShort,
    String? categoryDescription,
    String? categoryIcon,
    String? primaryColor,
    String? secondaryColor,
    bool? checkinEnabled,
    int? maxQuestions,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      isFavorite: isFavorite,
      isShortcut: isShortcut,
      progress: progress,
      lastCheckinAt: lastCheckinAt,
      checkinCount: checkinCount,
      createdAt: createdAt,
      updatedAt: updatedAt,
      totalCheckins: totalCheckins,
      averageWellnessLevel: averageWellnessLevel,
      categoryName: categoryName,
      categoryNameShort: categoryNameShort,
      categoryDescription: categoryDescription,
      categoryIcon: categoryIcon,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      checkinEnabled: checkinEnabled,
      maxQuestions: maxQuestions,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isShortcut,
    int? progress,
    DateTime? lastCheckinAt,
    int? checkinCount,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? totalCheckins,
    num? averageWellnessLevel,
    String? categoryName,
    String? categoryNameShort,
    String? categoryDescription,
    String? categoryIcon,
    String? primaryColor,
    String? secondaryColor,
    bool? checkinEnabled,
    int? maxQuestions,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      isFavorite: isFavorite,
      isShortcut: isShortcut,
      progress: progress,
      lastCheckinAt: lastCheckinAt,
      checkinCount: checkinCount,
      createdAt: createdAt,
      updatedAt: updatedAt,
      totalCheckins: totalCheckins,
      averageWellnessLevel: averageWellnessLevel,
      categoryName: categoryName,
      categoryNameShort: categoryNameShort,
      categoryDescription: categoryDescription,
      categoryIcon: categoryIcon,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      checkinEnabled: checkinEnabled,
      maxQuestions: maxQuestions,
    );
  }
  factory ProfileCategoriesDetailed.fromJson(Map<String, dynamic> jsonn) {
    return ProfileCategoriesDetailed(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      isFavorite:
          jsonn['is_favorite'] != null ? jsonn['is_favorite'] as bool : null,
      isShortcut:
          jsonn['is_shortcut'] != null ? jsonn['is_shortcut'] as bool : null,
      progress: jsonn['progress'] != null
          ? int.parse(jsonn['progress'].toString())
          : null,
      lastCheckinAt: jsonn['last_checkin_at'] != null
          ? DateTime.parse(jsonn['last_checkin_at'].toString())
          : null,
      checkinCount: jsonn['checkin_count'] != null
          ? int.parse(jsonn['checkin_count'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      totalCheckins: jsonn['total_checkins'] != null
          ? int.parse(jsonn['total_checkins'].toString())
          : null,
      averageWellnessLevel: jsonn['average_wellness_level'] != null
          ? num.parse(jsonn['average_wellness_level'].toString())
          : null,
      categoryName: jsonn['category_name'] != null
          ? jsonn['category_name'].toString()
          : null,
      categoryNameShort: jsonn['category_name_short'] != null
          ? jsonn['category_name_short'].toString()
          : null,
      categoryDescription: jsonn['category_description'] != null
          ? jsonn['category_description'].toString()
          : null,
      categoryIcon: jsonn['category_icon'] != null
          ? jsonn['category_icon'].toString()
          : null,
      primaryColor: jsonn['primary_color'] != null
          ? jsonn['primary_color'].toString()
          : null,
      secondaryColor: jsonn['secondary_color'] != null
          ? jsonn['secondary_color'].toString()
          : null,
      checkinEnabled: jsonn['checkin_enabled'] != null
          ? jsonn['checkin_enabled'] as bool
          : null,
      maxQuestions: jsonn['max_questions'] != null
          ? int.parse(jsonn['max_questions'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isShortcut,
    int? progress,
    DateTime? lastCheckinAt,
    int? checkinCount,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? totalCheckins,
    num? averageWellnessLevel,
    String? categoryName,
    String? categoryNameShort,
    String? categoryDescription,
    String? categoryIcon,
    String? primaryColor,
    String? secondaryColor,
    bool? checkinEnabled,
    int? maxQuestions,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (isFavorite != null) 'is_favorite': isFavorite,
      if (isShortcut != null) 'is_shortcut': isShortcut,
      if (progress != null) 'progress': progress,
      if (lastCheckinAt != null) 'last_checkin_at': lastCheckinAt,
      if (checkinCount != null) 'checkin_count': checkinCount,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (totalCheckins != null) 'total_checkins': totalCheckins,
      if (averageWellnessLevel != null)
        'average_wellness_level': averageWellnessLevel,
      if (categoryName != null) 'category_name': categoryName,
      if (categoryNameShort != null) 'category_name_short': categoryNameShort,
      if (categoryDescription != null)
        'category_description': categoryDescription,
      if (categoryIcon != null) 'category_icon': categoryIcon,
      if (primaryColor != null) 'primary_color': primaryColor,
      if (secondaryColor != null) 'secondary_color': secondaryColor,
      if (checkinEnabled != null) 'checkin_enabled': checkinEnabled,
      if (maxQuestions != null) 'max_questions': maxQuestions,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      isFavorite: isFavorite,
      isShortcut: isShortcut,
      progress: progress,
      lastCheckinAt: lastCheckinAt,
      checkinCount: checkinCount,
      createdAt: createdAt,
      updatedAt: updatedAt,
      totalCheckins: totalCheckins,
      averageWellnessLevel: averageWellnessLevel,
      categoryName: categoryName,
      categoryNameShort: categoryNameShort,
      categoryDescription: categoryDescription,
      categoryIcon: categoryIcon,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      checkinEnabled: checkinEnabled,
      maxQuestions: maxQuestions,
    );
  }
  static const _unset = Object();
  ProfileCategoriesDetailed copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? isFavorite = _unset,
    Object? isShortcut = _unset,
    Object? progress = _unset,
    Object? lastCheckinAt = _unset,
    Object? checkinCount = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? totalCheckins = _unset,
    Object? averageWellnessLevel = _unset,
    Object? categoryName = _unset,
    Object? categoryNameShort = _unset,
    Object? categoryDescription = _unset,
    Object? categoryIcon = _unset,
    Object? primaryColor = _unset,
    Object? secondaryColor = _unset,
    Object? checkinEnabled = _unset,
    Object? maxQuestions = _unset,
  }) {
    return ProfileCategoriesDetailed(
      id: id == _unset ? this.id : id as String?,
      userId: userId == _unset ? this.userId : userId as String?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      isFavorite: isFavorite == _unset ? this.isFavorite : isFavorite as bool?,
      isShortcut: isShortcut == _unset ? this.isShortcut : isShortcut as bool?,
      progress: progress == _unset ? this.progress : progress as int?,
      lastCheckinAt: lastCheckinAt == _unset
          ? this.lastCheckinAt
          : lastCheckinAt as DateTime?,
      checkinCount:
          checkinCount == _unset ? this.checkinCount : checkinCount as int?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      totalCheckins:
          totalCheckins == _unset ? this.totalCheckins : totalCheckins as int?,
      averageWellnessLevel: averageWellnessLevel == _unset
          ? this.averageWellnessLevel
          : averageWellnessLevel as num?,
      categoryName:
          categoryName == _unset ? this.categoryName : categoryName as String?,
      categoryNameShort: categoryNameShort == _unset
          ? this.categoryNameShort
          : categoryNameShort as String?,
      categoryDescription: categoryDescription == _unset
          ? this.categoryDescription
          : categoryDescription as String?,
      categoryIcon:
          categoryIcon == _unset ? this.categoryIcon : categoryIcon as String?,
      primaryColor:
          primaryColor == _unset ? this.primaryColor : primaryColor as String?,
      secondaryColor: secondaryColor == _unset
          ? this.secondaryColor
          : secondaryColor as String?,
      checkinEnabled: checkinEnabled == _unset
          ? this.checkinEnabled
          : checkinEnabled as bool?,
      maxQuestions:
          maxQuestions == _unset ? this.maxQuestions : maxQuestions as int?,
    );
  }
}

// test-typesprofiles.dart
class Profiles implements SupadartClass<Profiles> {
  final String id;
  final String? name;
  final String? coachId;
  final int? yearOfBirth;
  final String? sex;
  final Map<String, dynamic>? notificationSettings;
  final Map<String, dynamic>? moodConfig;
  final bool? voiceEnabled;
  final String? languageCode;
  final String? timezone;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final Map<String, dynamic>? coach;
  final String? avatarUrl;
  final Map<String, dynamic>? metadata;
  final String? firstName;
  final String? lastName;
  final DateTime? birthDate;
  final bool? isTester;
  final int? birthYear;
  final bool? summarizationEnabled;
  final String? email;
  final String? phoneNumber;
  final String? imageUrl;
  final DateTime? lastSeenAt;
  final DateTime? lastLogin;
  const Profiles({
    required this.id,
    this.name,
    this.coachId,
    this.yearOfBirth,
    this.sex,
    this.notificationSettings,
    this.moodConfig,
    this.voiceEnabled,
    this.languageCode,
    this.timezone,
    this.createdAt,
    this.updatedAt,
    this.coach,
    this.avatarUrl,
    this.metadata,
    this.firstName,
    this.lastName,
    this.birthDate,
    this.isTester,
    this.birthYear,
    this.summarizationEnabled,
    this.email,
    this.phoneNumber,
    this.imageUrl,
    this.lastSeenAt,
    this.lastLogin,
  });
  static String get table_name => 'profiles';
  static String get c_id => 'id';
  static String get c_name => 'name';
  static String get c_coachId => 'coach_id';
  static String get c_yearOfBirth => 'year_of_birth';
  static String get c_sex => 'sex';
  static String get c_notificationSettings => 'notification_settings';
  static String get c_moodConfig => 'mood_config';
  static String get c_voiceEnabled => 'voice_enabled';
  static String get c_languageCode => 'language_code';
  static String get c_timezone => 'timezone';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_coach => 'coach';
  static String get c_avatarUrl => 'avatar_url';
  static String get c_metadata => 'metadata';
  static String get c_firstName => 'first_name';
  static String get c_lastName => 'last_name';
  static String get c_birthDate => 'birth_date';
  static String get c_isTester => 'is_tester';
  static String get c_birthYear => 'birth_year';
  static String get c_summarizationEnabled => 'summarization_enabled';
  static String get c_email => 'email';
  static String get c_phoneNumber => 'phone_number';
  static String get c_imageUrl => 'image_url';
  static String get c_lastSeenAt => 'last_seen_at';
  static String get c_lastLogin => 'last_login';
  static List<Profiles> converter(List<Map<String, dynamic>> data) {
    return data.map(Profiles.fromJson).toList();
  }
  static Profiles converterSingle(Map<String, dynamic> data) {
    return Profiles.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? name,
    String? coachId,
    int? yearOfBirth,
    String? sex,
    Map<String, dynamic>? notificationSettings,
    Map<String, dynamic>? moodConfig,
    bool? voiceEnabled,
    String? languageCode,
    String? timezone,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? coach,
    String? avatarUrl,
    Map<String, dynamic>? metadata,
    String? firstName,
    String? lastName,
    DateTime? birthDate,
    bool? isTester,
    int? birthYear,
    bool? summarizationEnabled,
    String? email,
    String? phoneNumber,
    String? imageUrl,
    DateTime? lastSeenAt,
    DateTime? lastLogin,
  }) {
    return {
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (coachId != null) 'coach_id': coachId,
      if (yearOfBirth != null) 'year_of_birth': yearOfBirth,
      if (sex != null) 'sex': sex,
      if (notificationSettings != null)
        'notification_settings': notificationSettings,
      if (moodConfig != null) 'mood_config': moodConfig,
      if (voiceEnabled != null) 'voice_enabled': voiceEnabled,
      if (languageCode != null) 'language_code': languageCode,
      if (timezone != null) 'timezone': timezone,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (coach != null) 'coach': coach,
      if (avatarUrl != null) 'avatar_url': avatarUrl,
      if (metadata != null) 'metadata': metadata,
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (birthDate != null) 'birth_date': birthDate.toIso8601String(),
      if (isTester != null) 'is_tester': isTester,
      if (birthYear != null) 'birth_year': birthYear,
      if (summarizationEnabled != null)
        'summarization_enabled': summarizationEnabled,
      if (email != null) 'email': email,
      if (phoneNumber != null) 'phone_number': phoneNumber,
      if (imageUrl != null) 'image_url': imageUrl,
      if (lastSeenAt != null)
        'last_seen_at': lastSeenAt.toUtc().toIso8601String(),
      if (lastLogin != null) 'last_login': lastLogin.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? name,
    String? coachId,
    int? yearOfBirth,
    String? sex,
    Map<String, dynamic>? notificationSettings,
    Map<String, dynamic>? moodConfig,
    bool? voiceEnabled,
    String? languageCode,
    String? timezone,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? coach,
    String? avatarUrl,
    Map<String, dynamic>? metadata,
    String? firstName,
    String? lastName,
    DateTime? birthDate,
    bool? isTester,
    int? birthYear,
    bool? summarizationEnabled,
    String? email,
    String? phoneNumber,
    String? imageUrl,
    DateTime? lastSeenAt,
    DateTime? lastLogin,
  }) {
    return _generateMap(
      id: id,
      name: name,
      coachId: coachId,
      yearOfBirth: yearOfBirth,
      sex: sex,
      notificationSettings: notificationSettings,
      moodConfig: moodConfig,
      voiceEnabled: voiceEnabled,
      languageCode: languageCode,
      timezone: timezone,
      createdAt: createdAt,
      updatedAt: updatedAt,
      coach: coach,
      avatarUrl: avatarUrl,
      metadata: metadata,
      firstName: firstName,
      lastName: lastName,
      birthDate: birthDate,
      isTester: isTester,
      birthYear: birthYear,
      summarizationEnabled: summarizationEnabled,
      email: email,
      phoneNumber: phoneNumber,
      imageUrl: imageUrl,
      lastSeenAt: lastSeenAt,
      lastLogin: lastLogin,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? name,
    String? coachId,
    int? yearOfBirth,
    String? sex,
    Map<String, dynamic>? notificationSettings,
    Map<String, dynamic>? moodConfig,
    bool? voiceEnabled,
    String? languageCode,
    String? timezone,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? coach,
    String? avatarUrl,
    Map<String, dynamic>? metadata,
    String? firstName,
    String? lastName,
    DateTime? birthDate,
    bool? isTester,
    int? birthYear,
    bool? summarizationEnabled,
    String? email,
    String? phoneNumber,
    String? imageUrl,
    DateTime? lastSeenAt,
    DateTime? lastLogin,
  }) {
    return _generateMap(
      id: id,
      name: name,
      coachId: coachId,
      yearOfBirth: yearOfBirth,
      sex: sex,
      notificationSettings: notificationSettings,
      moodConfig: moodConfig,
      voiceEnabled: voiceEnabled,
      languageCode: languageCode,
      timezone: timezone,
      createdAt: createdAt,
      updatedAt: updatedAt,
      coach: coach,
      avatarUrl: avatarUrl,
      metadata: metadata,
      firstName: firstName,
      lastName: lastName,
      birthDate: birthDate,
      isTester: isTester,
      birthYear: birthYear,
      summarizationEnabled: summarizationEnabled,
      email: email,
      phoneNumber: phoneNumber,
      imageUrl: imageUrl,
      lastSeenAt: lastSeenAt,
      lastLogin: lastLogin,
    );
  }
  factory Profiles.fromJson(Map<String, dynamic> jsonn) {
    return Profiles(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      name: jsonn['name'] != null ? jsonn['name'].toString() : null,
      coachId: jsonn['coach_id'] != null ? jsonn['coach_id'].toString() : null,
      yearOfBirth: jsonn['year_of_birth'] != null
          ? int.parse(jsonn['year_of_birth'].toString())
          : null,
      sex: jsonn['sex'] != null ? jsonn['sex'].toString() : null,
      notificationSettings: jsonn['notification_settings'] != null
          ? jsonn['notification_settings'] as Map<String, dynamic>
          : null,
      moodConfig: jsonn['mood_config'] != null
          ? jsonn['mood_config'] as Map<String, dynamic>
          : null,
      voiceEnabled: jsonn['voice_enabled'] != null
          ? jsonn['voice_enabled'] as bool
          : null,
      languageCode: jsonn['language_code'] != null
          ? jsonn['language_code'].toString()
          : null,
      timezone: jsonn['timezone'] != null ? jsonn['timezone'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      coach: jsonn['coach'] != null
          ? jsonn['coach'] as Map<String, dynamic>
          : null,
      avatarUrl:
          jsonn['avatar_url'] != null ? jsonn['avatar_url'].toString() : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      firstName:
          jsonn['first_name'] != null ? jsonn['first_name'].toString() : null,
      lastName:
          jsonn['last_name'] != null ? jsonn['last_name'].toString() : null,
      birthDate: jsonn['birth_date'] != null
          ? DateTime.parse(jsonn['birth_date'].toString())
          : null,
      isTester: jsonn['is_tester'] != null ? jsonn['is_tester'] as bool : null,
      birthYear: jsonn['birth_year'] != null
          ? int.parse(jsonn['birth_year'].toString())
          : null,
      summarizationEnabled: jsonn['summarization_enabled'] != null
          ? jsonn['summarization_enabled'] as bool
          : null,
      email: jsonn['email'] != null ? jsonn['email'].toString() : null,
      phoneNumber: jsonn['phone_number'] != null
          ? jsonn['phone_number'].toString()
          : null,
      imageUrl:
          jsonn['image_url'] != null ? jsonn['image_url'].toString() : null,
      lastSeenAt: jsonn['last_seen_at'] != null
          ? DateTime.parse(jsonn['last_seen_at'].toString())
          : null,
      lastLogin: jsonn['last_login'] != null
          ? DateTime.parse(jsonn['last_login'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? name,
    String? coachId,
    int? yearOfBirth,
    String? sex,
    Map<String, dynamic>? notificationSettings,
    Map<String, dynamic>? moodConfig,
    bool? voiceEnabled,
    String? languageCode,
    String? timezone,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? coach,
    String? avatarUrl,
    Map<String, dynamic>? metadata,
    String? firstName,
    String? lastName,
    DateTime? birthDate,
    bool? isTester,
    int? birthYear,
    bool? summarizationEnabled,
    String? email,
    String? phoneNumber,
    String? imageUrl,
    DateTime? lastSeenAt,
    DateTime? lastLogin,
  }) {
    return {
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (coachId != null) 'coach_id': coachId,
      if (yearOfBirth != null) 'year_of_birth': yearOfBirth,
      if (sex != null) 'sex': sex,
      if (notificationSettings != null)
        'notification_settings': notificationSettings,
      if (moodConfig != null) 'mood_config': moodConfig,
      if (voiceEnabled != null) 'voice_enabled': voiceEnabled,
      if (languageCode != null) 'language_code': languageCode,
      if (timezone != null) 'timezone': timezone,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (coach != null) 'coach': coach,
      if (avatarUrl != null) 'avatar_url': avatarUrl,
      if (metadata != null) 'metadata': metadata,
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (birthDate != null) 'birth_date': birthDate,
      if (isTester != null) 'is_tester': isTester,
      if (birthYear != null) 'birth_year': birthYear,
      if (summarizationEnabled != null)
        'summarization_enabled': summarizationEnabled,
      if (email != null) 'email': email,
      if (phoneNumber != null) 'phone_number': phoneNumber,
      if (imageUrl != null) 'image_url': imageUrl,
      if (lastSeenAt != null) 'last_seen_at': lastSeenAt,
      if (lastLogin != null) 'last_login': lastLogin,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      name: name,
      coachId: coachId,
      yearOfBirth: yearOfBirth,
      sex: sex,
      notificationSettings: notificationSettings,
      moodConfig: moodConfig,
      voiceEnabled: voiceEnabled,
      languageCode: languageCode,
      timezone: timezone,
      createdAt: createdAt,
      updatedAt: updatedAt,
      coach: coach,
      avatarUrl: avatarUrl,
      metadata: metadata,
      firstName: firstName,
      lastName: lastName,
      birthDate: birthDate,
      isTester: isTester,
      birthYear: birthYear,
      summarizationEnabled: summarizationEnabled,
      email: email,
      phoneNumber: phoneNumber,
      imageUrl: imageUrl,
      lastSeenAt: lastSeenAt,
      lastLogin: lastLogin,
    );
  }
  static const _unset = Object();
  Profiles copyWith({
    Object? id = _unset,
    Object? name = _unset,
    Object? coachId = _unset,
    Object? yearOfBirth = _unset,
    Object? sex = _unset,
    Object? notificationSettings = _unset,
    Object? moodConfig = _unset,
    Object? voiceEnabled = _unset,
    Object? languageCode = _unset,
    Object? timezone = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? coach = _unset,
    Object? avatarUrl = _unset,
    Object? metadata = _unset,
    Object? firstName = _unset,
    Object? lastName = _unset,
    Object? birthDate = _unset,
    Object? isTester = _unset,
    Object? birthYear = _unset,
    Object? summarizationEnabled = _unset,
    Object? email = _unset,
    Object? phoneNumber = _unset,
    Object? imageUrl = _unset,
    Object? lastSeenAt = _unset,
    Object? lastLogin = _unset,
  }) {
    return Profiles(
      id: id == _unset ? this.id : id as String,
      name: name == _unset ? this.name : name as String?,
      coachId: coachId == _unset ? this.coachId : coachId as String?,
      yearOfBirth:
          yearOfBirth == _unset ? this.yearOfBirth : yearOfBirth as int?,
      sex: sex == _unset ? this.sex : sex as String?,
      notificationSettings: notificationSettings == _unset
          ? this.notificationSettings
          : notificationSettings as Map<String, dynamic>?,
      moodConfig: moodConfig == _unset
          ? this.moodConfig
          : moodConfig as Map<String, dynamic>?,
      voiceEnabled:
          voiceEnabled == _unset ? this.voiceEnabled : voiceEnabled as bool?,
      languageCode:
          languageCode == _unset ? this.languageCode : languageCode as String?,
      timezone: timezone == _unset ? this.timezone : timezone as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      coach: coach == _unset ? this.coach : coach as Map<String, dynamic>?,
      avatarUrl: avatarUrl == _unset ? this.avatarUrl : avatarUrl as String?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      firstName: firstName == _unset ? this.firstName : firstName as String?,
      lastName: lastName == _unset ? this.lastName : lastName as String?,
      birthDate: birthDate == _unset ? this.birthDate : birthDate as DateTime?,
      isTester: isTester == _unset ? this.isTester : isTester as bool?,
      birthYear: birthYear == _unset ? this.birthYear : birthYear as int?,
      summarizationEnabled: summarizationEnabled == _unset
          ? this.summarizationEnabled
          : summarizationEnabled as bool?,
      email: email == _unset ? this.email : email as String?,
      phoneNumber:
          phoneNumber == _unset ? this.phoneNumber : phoneNumber as String?,
      imageUrl: imageUrl == _unset ? this.imageUrl : imageUrl as String?,
      lastSeenAt:
          lastSeenAt == _unset ? this.lastSeenAt : lastSeenAt as DateTime?,
      lastLogin: lastLogin == _unset ? this.lastLogin : lastLogin as DateTime?,
    );
  }
}

// test-typesrecommendations.dart
class Recommendations implements SupadartClass<Recommendations> {
  final String id;
  final String userId;
  final String? categoryId;
  final String? checkinMessageId;
  final String? parentRecommendationId;
  final String? title;
  final String recommendationText;
  final String? action;
  final String? why;
  final String recommendationType;
  final int? importance;
  final num? relevance;
  final List<String>? recommendedCategories;
  final String? context;
  final bool? isActive;
  final DateTime? viewedAt;
  final DateTime? dismissedAt;
  final DateTime? createdAt;
  final Map<String, dynamic>? metadata;
  final DateTime? expiresAt;
  final int? level;
  final int? viewCount;
  final DateTime? lastViewedAt;
  final DateTime? updatedAt;
  const Recommendations({
    required this.id,
    required this.userId,
    this.categoryId,
    this.checkinMessageId,
    this.parentRecommendationId,
    this.title,
    required this.recommendationText,
    this.action,
    this.why,
    required this.recommendationType,
    this.importance,
    this.relevance,
    this.recommendedCategories,
    this.context,
    this.isActive,
    this.viewedAt,
    this.dismissedAt,
    this.createdAt,
    this.metadata,
    this.expiresAt,
    this.level,
    this.viewCount,
    this.lastViewedAt,
    this.updatedAt,
  });
  static String get table_name => 'recommendations';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_checkinMessageId => 'checkin_message_id';
  static String get c_parentRecommendationId => 'parent_recommendation_id';
  static String get c_title => 'title';
  static String get c_recommendationText => 'recommendation_text';
  static String get c_action => 'action';
  static String get c_why => 'why';
  static String get c_recommendationType => 'recommendation_type';
  static String get c_importance => 'importance';
  static String get c_relevance => 'relevance';
  static String get c_recommendedCategories => 'recommended_categories';
  static String get c_context => 'context';
  static String get c_isActive => 'is_active';
  static String get c_viewedAt => 'viewed_at';
  static String get c_dismissedAt => 'dismissed_at';
  static String get c_createdAt => 'created_at';
  static String get c_metadata => 'metadata';
  static String get c_expiresAt => 'expires_at';
  static String get c_level => 'level';
  static String get c_viewCount => 'view_count';
  static String get c_lastViewedAt => 'last_viewed_at';
  static String get c_updatedAt => 'updated_at';
  static List<Recommendations> converter(List<Map<String, dynamic>> data) {
    return data.map(Recommendations.fromJson).toList();
  }
  static Recommendations converterSingle(Map<String, dynamic> data) {
    return Recommendations.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    int? level,
    int? viewCount,
    DateTime? lastViewedAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinMessageId != null) 'checkin_message_id': checkinMessageId,
      if (parentRecommendationId != null)
        'parent_recommendation_id': parentRecommendationId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance.toString(),
      if (recommendedCategories != null)
        'recommended_categories': recommendedCategories.map((e) => e).toList(),
      if (context != null) 'context': context,
      if (isActive != null) 'is_active': isActive,
      if (viewedAt != null) 'viewed_at': viewedAt.toUtc().toIso8601String(),
      if (dismissedAt != null)
        'dismissed_at': dismissedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
      if (expiresAt != null) 'expires_at': expiresAt.toUtc().toIso8601String(),
      if (level != null) 'level': level,
      if (viewCount != null) 'view_count': viewCount,
      if (lastViewedAt != null)
        'last_viewed_at': lastViewedAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    required String recommendationText,
    String? action,
    String? why,
    required String recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    int? level,
    int? viewCount,
    DateTime? lastViewedAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      expiresAt: expiresAt,
      level: level,
      viewCount: viewCount,
      lastViewedAt: lastViewedAt,
      updatedAt: updatedAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    int? level,
    int? viewCount,
    DateTime? lastViewedAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      expiresAt: expiresAt,
      level: level,
      viewCount: viewCount,
      lastViewedAt: lastViewedAt,
      updatedAt: updatedAt,
    );
  }
  factory Recommendations.fromJson(Map<String, dynamic> jsonn) {
    return Recommendations(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      checkinMessageId: jsonn['checkin_message_id'] != null
          ? jsonn['checkin_message_id'].toString()
          : null,
      parentRecommendationId: jsonn['parent_recommendation_id'] != null
          ? jsonn['parent_recommendation_id'].toString()
          : null,
      title: jsonn['title'] != null ? jsonn['title'].toString() : null,
      recommendationText: jsonn['recommendation_text'] != null
          ? jsonn['recommendation_text'].toString()
          : '',
      action: jsonn['action'] != null ? jsonn['action'].toString() : null,
      why: jsonn['why'] != null ? jsonn['why'].toString() : null,
      recommendationType: jsonn['recommendation_type'] != null
          ? jsonn['recommendation_type'].toString()
          : '',
      importance: jsonn['importance'] != null
          ? int.parse(jsonn['importance'].toString())
          : null,
      relevance: jsonn['relevance'] != null
          ? num.parse(jsonn['relevance'].toString())
          : null,
      recommendedCategories: jsonn['recommended_categories'] != null
          ? (jsonn['recommended_categories'] as List<dynamic>)
              .map((v) => v.toString())
              .toList()
          : null,
      context: jsonn['context'] != null ? jsonn['context'].toString() : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      viewedAt: jsonn['viewed_at'] != null
          ? DateTime.parse(jsonn['viewed_at'].toString())
          : null,
      dismissedAt: jsonn['dismissed_at'] != null
          ? DateTime.parse(jsonn['dismissed_at'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      expiresAt: jsonn['expires_at'] != null
          ? DateTime.parse(jsonn['expires_at'].toString())
          : null,
      level:
          jsonn['level'] != null ? int.parse(jsonn['level'].toString()) : null,
      viewCount: jsonn['view_count'] != null
          ? int.parse(jsonn['view_count'].toString())
          : null,
      lastViewedAt: jsonn['last_viewed_at'] != null
          ? DateTime.parse(jsonn['last_viewed_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    int? level,
    int? viewCount,
    DateTime? lastViewedAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinMessageId != null) 'checkin_message_id': checkinMessageId,
      if (parentRecommendationId != null)
        'parent_recommendation_id': parentRecommendationId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance,
      if (recommendedCategories != null)
        'recommended_categories': recommendedCategories,
      if (context != null) 'context': context,
      if (isActive != null) 'is_active': isActive,
      if (viewedAt != null) 'viewed_at': viewedAt,
      if (dismissedAt != null) 'dismissed_at': dismissedAt,
      if (createdAt != null) 'created_at': createdAt,
      if (metadata != null) 'metadata': metadata,
      if (expiresAt != null) 'expires_at': expiresAt,
      if (level != null) 'level': level,
      if (viewCount != null) 'view_count': viewCount,
      if (lastViewedAt != null) 'last_viewed_at': lastViewedAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      expiresAt: expiresAt,
      level: level,
      viewCount: viewCount,
      lastViewedAt: lastViewedAt,
      updatedAt: updatedAt,
    );
  }
  static const _unset = Object();
  Recommendations copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? checkinMessageId = _unset,
    Object? parentRecommendationId = _unset,
    Object? title = _unset,
    Object? recommendationText = _unset,
    Object? action = _unset,
    Object? why = _unset,
    Object? recommendationType = _unset,
    Object? importance = _unset,
    Object? relevance = _unset,
    Object? recommendedCategories = _unset,
    Object? context = _unset,
    Object? isActive = _unset,
    Object? viewedAt = _unset,
    Object? dismissedAt = _unset,
    Object? createdAt = _unset,
    Object? metadata = _unset,
    Object? expiresAt = _unset,
    Object? level = _unset,
    Object? viewCount = _unset,
    Object? lastViewedAt = _unset,
    Object? updatedAt = _unset,
  }) {
    return Recommendations(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      checkinMessageId: checkinMessageId == _unset
          ? this.checkinMessageId
          : checkinMessageId as String?,
      parentRecommendationId: parentRecommendationId == _unset
          ? this.parentRecommendationId
          : parentRecommendationId as String?,
      title: title == _unset ? this.title : title as String?,
      recommendationText: recommendationText == _unset
          ? this.recommendationText
          : recommendationText as String,
      action: action == _unset ? this.action : action as String?,
      why: why == _unset ? this.why : why as String?,
      recommendationType: recommendationType == _unset
          ? this.recommendationType
          : recommendationType as String,
      importance: importance == _unset ? this.importance : importance as int?,
      relevance: relevance == _unset ? this.relevance : relevance as num?,
      recommendedCategories: recommendedCategories == _unset
          ? this.recommendedCategories
          : recommendedCategories as List<String>?,
      context: context == _unset ? this.context : context as String?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      viewedAt: viewedAt == _unset ? this.viewedAt : viewedAt as DateTime?,
      dismissedAt:
          dismissedAt == _unset ? this.dismissedAt : dismissedAt as DateTime?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      expiresAt: expiresAt == _unset ? this.expiresAt : expiresAt as DateTime?,
      level: level == _unset ? this.level : level as int?,
      viewCount: viewCount == _unset ? this.viewCount : viewCount as int?,
      lastViewedAt: lastViewedAt == _unset
          ? this.lastViewedAt
          : lastViewedAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
    );
  }
}

// test-typesrecommendations_active.dart
class RecommendationsActive implements SupadartClass<RecommendationsActive> {
  final String? id;
  final String? userId;
  final String? categoryId;
  final String? checkinMessageId;
  final String? parentRecommendationId;
  final String? title;
  final String? recommendationText;
  final String? action;
  final String? why;
  final String? recommendationType;
  final int? importance;
  final num? relevance;
  final List<String>? recommendedCategories;
  final String? context;
  final bool? isActive;
  final DateTime? viewedAt;
  final DateTime? dismissedAt;
  final DateTime? createdAt;
  final Map<String, dynamic>? metadata;
  final DateTime? expiresAt;
  final String? categoryName;
  final String? categoryIcon;
  final String? categoryColor;
  const RecommendationsActive({
    this.id,
    this.userId,
    this.categoryId,
    this.checkinMessageId,
    this.parentRecommendationId,
    this.title,
    this.recommendationText,
    this.action,
    this.why,
    this.recommendationType,
    this.importance,
    this.relevance,
    this.recommendedCategories,
    this.context,
    this.isActive,
    this.viewedAt,
    this.dismissedAt,
    this.createdAt,
    this.metadata,
    this.expiresAt,
    this.categoryName,
    this.categoryIcon,
    this.categoryColor,
  });
  static String get table_name => 'recommendations_active';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_checkinMessageId => 'checkin_message_id';
  static String get c_parentRecommendationId => 'parent_recommendation_id';
  static String get c_title => 'title';
  static String get c_recommendationText => 'recommendation_text';
  static String get c_action => 'action';
  static String get c_why => 'why';
  static String get c_recommendationType => 'recommendation_type';
  static String get c_importance => 'importance';
  static String get c_relevance => 'relevance';
  static String get c_recommendedCategories => 'recommended_categories';
  static String get c_context => 'context';
  static String get c_isActive => 'is_active';
  static String get c_viewedAt => 'viewed_at';
  static String get c_dismissedAt => 'dismissed_at';
  static String get c_createdAt => 'created_at';
  static String get c_metadata => 'metadata';
  static String get c_expiresAt => 'expires_at';
  static String get c_categoryName => 'category_name';
  static String get c_categoryIcon => 'category_icon';
  static String get c_categoryColor => 'category_color';
  static List<RecommendationsActive> converter(
      List<Map<String, dynamic>> data) {
    return data.map(RecommendationsActive.fromJson).toList();
  }
  static RecommendationsActive converterSingle(Map<String, dynamic> data) {
    return RecommendationsActive.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    String? categoryName,
    String? categoryIcon,
    String? categoryColor,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinMessageId != null) 'checkin_message_id': checkinMessageId,
      if (parentRecommendationId != null)
        'parent_recommendation_id': parentRecommendationId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance.toString(),
      if (recommendedCategories != null)
        'recommended_categories': recommendedCategories.map((e) => e).toList(),
      if (context != null) 'context': context,
      if (isActive != null) 'is_active': isActive,
      if (viewedAt != null) 'viewed_at': viewedAt.toUtc().toIso8601String(),
      if (dismissedAt != null)
        'dismissed_at': dismissedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
      if (expiresAt != null) 'expires_at': expiresAt.toUtc().toIso8601String(),
      if (categoryName != null) 'category_name': categoryName,
      if (categoryIcon != null) 'category_icon': categoryIcon,
      if (categoryColor != null) 'category_color': categoryColor,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    String? categoryName,
    String? categoryIcon,
    String? categoryColor,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      expiresAt: expiresAt,
      categoryName: categoryName,
      categoryIcon: categoryIcon,
      categoryColor: categoryColor,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    String? categoryName,
    String? categoryIcon,
    String? categoryColor,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      expiresAt: expiresAt,
      categoryName: categoryName,
      categoryIcon: categoryIcon,
      categoryColor: categoryColor,
    );
  }
  factory RecommendationsActive.fromJson(Map<String, dynamic> jsonn) {
    return RecommendationsActive(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      checkinMessageId: jsonn['checkin_message_id'] != null
          ? jsonn['checkin_message_id'].toString()
          : null,
      parentRecommendationId: jsonn['parent_recommendation_id'] != null
          ? jsonn['parent_recommendation_id'].toString()
          : null,
      title: jsonn['title'] != null ? jsonn['title'].toString() : null,
      recommendationText: jsonn['recommendation_text'] != null
          ? jsonn['recommendation_text'].toString()
          : null,
      action: jsonn['action'] != null ? jsonn['action'].toString() : null,
      why: jsonn['why'] != null ? jsonn['why'].toString() : null,
      recommendationType: jsonn['recommendation_type'] != null
          ? jsonn['recommendation_type'].toString()
          : null,
      importance: jsonn['importance'] != null
          ? int.parse(jsonn['importance'].toString())
          : null,
      relevance: jsonn['relevance'] != null
          ? num.parse(jsonn['relevance'].toString())
          : null,
      recommendedCategories: jsonn['recommended_categories'] != null
          ? (jsonn['recommended_categories'] as List<dynamic>)
              .map((v) => v.toString())
              .toList()
          : null,
      context: jsonn['context'] != null ? jsonn['context'].toString() : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      viewedAt: jsonn['viewed_at'] != null
          ? DateTime.parse(jsonn['viewed_at'].toString())
          : null,
      dismissedAt: jsonn['dismissed_at'] != null
          ? DateTime.parse(jsonn['dismissed_at'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      expiresAt: jsonn['expires_at'] != null
          ? DateTime.parse(jsonn['expires_at'].toString())
          : null,
      categoryName: jsonn['category_name'] != null
          ? jsonn['category_name'].toString()
          : null,
      categoryIcon: jsonn['category_icon'] != null
          ? jsonn['category_icon'].toString()
          : null,
      categoryColor: jsonn['category_color'] != null
          ? jsonn['category_color'].toString()
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    String? categoryName,
    String? categoryIcon,
    String? categoryColor,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinMessageId != null) 'checkin_message_id': checkinMessageId,
      if (parentRecommendationId != null)
        'parent_recommendation_id': parentRecommendationId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance,
      if (recommendedCategories != null)
        'recommended_categories': recommendedCategories,
      if (context != null) 'context': context,
      if (isActive != null) 'is_active': isActive,
      if (viewedAt != null) 'viewed_at': viewedAt,
      if (dismissedAt != null) 'dismissed_at': dismissedAt,
      if (createdAt != null) 'created_at': createdAt,
      if (metadata != null) 'metadata': metadata,
      if (expiresAt != null) 'expires_at': expiresAt,
      if (categoryName != null) 'category_name': categoryName,
      if (categoryIcon != null) 'category_icon': categoryIcon,
      if (categoryColor != null) 'category_color': categoryColor,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      expiresAt: expiresAt,
      categoryName: categoryName,
      categoryIcon: categoryIcon,
      categoryColor: categoryColor,
    );
  }
  static const _unset = Object();
  RecommendationsActive copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? checkinMessageId = _unset,
    Object? parentRecommendationId = _unset,
    Object? title = _unset,
    Object? recommendationText = _unset,
    Object? action = _unset,
    Object? why = _unset,
    Object? recommendationType = _unset,
    Object? importance = _unset,
    Object? relevance = _unset,
    Object? recommendedCategories = _unset,
    Object? context = _unset,
    Object? isActive = _unset,
    Object? viewedAt = _unset,
    Object? dismissedAt = _unset,
    Object? createdAt = _unset,
    Object? metadata = _unset,
    Object? expiresAt = _unset,
    Object? categoryName = _unset,
    Object? categoryIcon = _unset,
    Object? categoryColor = _unset,
  }) {
    return RecommendationsActive(
      id: id == _unset ? this.id : id as String?,
      userId: userId == _unset ? this.userId : userId as String?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      checkinMessageId: checkinMessageId == _unset
          ? this.checkinMessageId
          : checkinMessageId as String?,
      parentRecommendationId: parentRecommendationId == _unset
          ? this.parentRecommendationId
          : parentRecommendationId as String?,
      title: title == _unset ? this.title : title as String?,
      recommendationText: recommendationText == _unset
          ? this.recommendationText
          : recommendationText as String?,
      action: action == _unset ? this.action : action as String?,
      why: why == _unset ? this.why : why as String?,
      recommendationType: recommendationType == _unset
          ? this.recommendationType
          : recommendationType as String?,
      importance: importance == _unset ? this.importance : importance as int?,
      relevance: relevance == _unset ? this.relevance : relevance as num?,
      recommendedCategories: recommendedCategories == _unset
          ? this.recommendedCategories
          : recommendedCategories as List<String>?,
      context: context == _unset ? this.context : context as String?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      viewedAt: viewedAt == _unset ? this.viewedAt : viewedAt as DateTime?,
      dismissedAt:
          dismissedAt == _unset ? this.dismissedAt : dismissedAt as DateTime?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      expiresAt: expiresAt == _unset ? this.expiresAt : expiresAt as DateTime?,
      categoryName:
          categoryName == _unset ? this.categoryName : categoryName as String?,
      categoryIcon:
          categoryIcon == _unset ? this.categoryIcon : categoryIcon as String?,
      categoryColor: categoryColor == _unset
          ? this.categoryColor
          : categoryColor as String?,
    );
  }
}

// test-typessystem_logs.dart
class SystemLogs implements SupadartClass<SystemLogs> {
  final String id;
  final String eventType;
  final Map<String, dynamic>? eventData;
  final DateTime? createdAt;
  final String? createdBy;
  const SystemLogs({
    required this.id,
    required this.eventType,
    this.eventData,
    this.createdAt,
    this.createdBy,
  });
  static String get table_name => 'system_logs';
  static String get c_id => 'id';
  static String get c_eventType => 'event_type';
  static String get c_eventData => 'event_data';
  static String get c_createdAt => 'created_at';
  static String get c_createdBy => 'created_by';
  static List<SystemLogs> converter(List<Map<String, dynamic>> data) {
    return data.map(SystemLogs.fromJson).toList();
  }
  static SystemLogs converterSingle(Map<String, dynamic> data) {
    return SystemLogs.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? eventType,
    Map<String, dynamic>? eventData,
    DateTime? createdAt,
    String? createdBy,
  }) {
    return {
      if (id != null) 'id': id,
      if (eventType != null) 'event_type': eventType,
      if (eventData != null) 'event_data': eventData,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (createdBy != null) 'created_by': createdBy,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String eventType,
    Map<String, dynamic>? eventData,
    DateTime? createdAt,
    String? createdBy,
  }) {
    return _generateMap(
      id: id,
      eventType: eventType,
      eventData: eventData,
      createdAt: createdAt,
      createdBy: createdBy,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? eventType,
    Map<String, dynamic>? eventData,
    DateTime? createdAt,
    String? createdBy,
  }) {
    return _generateMap(
      id: id,
      eventType: eventType,
      eventData: eventData,
      createdAt: createdAt,
      createdBy: createdBy,
    );
  }
  factory SystemLogs.fromJson(Map<String, dynamic> jsonn) {
    return SystemLogs(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      eventType:
          jsonn['event_type'] != null ? jsonn['event_type'].toString() : '',
      eventData: jsonn['event_data'] != null
          ? jsonn['event_data'] as Map<String, dynamic>
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      createdBy:
          jsonn['created_by'] != null ? jsonn['created_by'].toString() : null,
    );
  }
  static Object New({
    String? id,
    String? eventType,
    Map<String, dynamic>? eventData,
    DateTime? createdAt,
    String? createdBy,
  }) {
    return {
      if (id != null) 'id': id,
      if (eventType != null) 'event_type': eventType,
      if (eventData != null) 'event_data': eventData,
      if (createdAt != null) 'created_at': createdAt,
      if (createdBy != null) 'created_by': createdBy,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      eventType: eventType,
      eventData: eventData,
      createdAt: createdAt,
      createdBy: createdBy,
    );
  }
  static const _unset = Object();
  SystemLogs copyWith({
    Object? id = _unset,
    Object? eventType = _unset,
    Object? eventData = _unset,
    Object? createdAt = _unset,
    Object? createdBy = _unset,
  }) {
    return SystemLogs(
      id: id == _unset ? this.id : id as String,
      eventType: eventType == _unset ? this.eventType : eventType as String,
      eventData: eventData == _unset
          ? this.eventData
          : eventData as Map<String, dynamic>?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      createdBy: createdBy == _unset ? this.createdBy : createdBy as String?,
    );
  }
}

// test-typestest_cicd_verification.dart
class TestCicdVerification implements SupadartClass<TestCicdVerification> {
  final String id;
  final String testName;
  final DateTime? testTimestamp;
  final Map<String, dynamic>? metadata;
  const TestCicdVerification({
    required this.id,
    required this.testName,
    this.testTimestamp,
    this.metadata,
  });
  static String get table_name => 'test_cicd_verification';
  static String get c_id => 'id';
  static String get c_testName => 'test_name';
  static String get c_testTimestamp => 'test_timestamp';
  static String get c_metadata => 'metadata';
  static List<TestCicdVerification> converter(List<Map<String, dynamic>> data) {
    return data.map(TestCicdVerification.fromJson).toList();
  }
  static TestCicdVerification converterSingle(Map<String, dynamic> data) {
    return TestCicdVerification.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? testName,
    DateTime? testTimestamp,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (id != null) 'id': id,
      if (testName != null) 'test_name': testName,
      if (testTimestamp != null)
        'test_timestamp': testTimestamp.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String testName,
    DateTime? testTimestamp,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      id: id,
      testName: testName,
      testTimestamp: testTimestamp,
      metadata: metadata,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? testName,
    DateTime? testTimestamp,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      id: id,
      testName: testName,
      testTimestamp: testTimestamp,
      metadata: metadata,
    );
  }
  factory TestCicdVerification.fromJson(Map<String, dynamic> jsonn) {
    return TestCicdVerification(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      testName: jsonn['test_name'] != null ? jsonn['test_name'].toString() : '',
      testTimestamp: jsonn['test_timestamp'] != null
          ? DateTime.parse(jsonn['test_timestamp'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
    );
  }
  static Object New({
    String? id,
    String? testName,
    DateTime? testTimestamp,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (id != null) 'id': id,
      if (testName != null) 'test_name': testName,
      if (testTimestamp != null) 'test_timestamp': testTimestamp,
      if (metadata != null) 'metadata': metadata,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      testName: testName,
      testTimestamp: testTimestamp,
      metadata: metadata,
    );
  }
  static const _unset = Object();
  TestCicdVerification copyWith({
    Object? id = _unset,
    Object? testName = _unset,
    Object? testTimestamp = _unset,
    Object? metadata = _unset,
  }) {
    return TestCicdVerification(
      id: id == _unset ? this.id : id as String,
      testName: testName == _unset ? this.testName : testName as String,
      testTimestamp: testTimestamp == _unset
          ? this.testTimestamp
          : testTimestamp as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
    );
  }
}

// test-typesuser_app_versions.dart
class UserAppVersions implements SupadartClass<UserAppVersions> {
  final String id;
  final String userId;
  final String versionId;
  final String? deviceModel;
  final String? osVersion;
  final DateTime? installedAt;
  final DateTime? lastOpenedAt;
  const UserAppVersions({
    required this.id,
    required this.userId,
    required this.versionId,
    this.deviceModel,
    this.osVersion,
    this.installedAt,
    this.lastOpenedAt,
  });
  static String get table_name => 'user_app_versions';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_versionId => 'version_id';
  static String get c_deviceModel => 'device_model';
  static String get c_osVersion => 'os_version';
  static String get c_installedAt => 'installed_at';
  static String get c_lastOpenedAt => 'last_opened_at';
  static List<UserAppVersions> converter(List<Map<String, dynamic>> data) {
    return data.map(UserAppVersions.fromJson).toList();
  }
  static UserAppVersions converterSingle(Map<String, dynamic> data) {
    return UserAppVersions.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? versionId,
    String? deviceModel,
    String? osVersion,
    DateTime? installedAt,
    DateTime? lastOpenedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (versionId != null) 'version_id': versionId,
      if (deviceModel != null) 'device_model': deviceModel,
      if (osVersion != null) 'os_version': osVersion,
      if (installedAt != null)
        'installed_at': installedAt.toUtc().toIso8601String(),
      if (lastOpenedAt != null)
        'last_opened_at': lastOpenedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    required String versionId,
    String? deviceModel,
    String? osVersion,
    DateTime? installedAt,
    DateTime? lastOpenedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      versionId: versionId,
      deviceModel: deviceModel,
      osVersion: osVersion,
      installedAt: installedAt,
      lastOpenedAt: lastOpenedAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? versionId,
    String? deviceModel,
    String? osVersion,
    DateTime? installedAt,
    DateTime? lastOpenedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      versionId: versionId,
      deviceModel: deviceModel,
      osVersion: osVersion,
      installedAt: installedAt,
      lastOpenedAt: lastOpenedAt,
    );
  }
  factory UserAppVersions.fromJson(Map<String, dynamic> jsonn) {
    return UserAppVersions(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      versionId:
          jsonn['version_id'] != null ? jsonn['version_id'].toString() : '',
      deviceModel: jsonn['device_model'] != null
          ? jsonn['device_model'].toString()
          : null,
      osVersion:
          jsonn['os_version'] != null ? jsonn['os_version'].toString() : null,
      installedAt: jsonn['installed_at'] != null
          ? DateTime.parse(jsonn['installed_at'].toString())
          : null,
      lastOpenedAt: jsonn['last_opened_at'] != null
          ? DateTime.parse(jsonn['last_opened_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? versionId,
    String? deviceModel,
    String? osVersion,
    DateTime? installedAt,
    DateTime? lastOpenedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (versionId != null) 'version_id': versionId,
      if (deviceModel != null) 'device_model': deviceModel,
      if (osVersion != null) 'os_version': osVersion,
      if (installedAt != null) 'installed_at': installedAt,
      if (lastOpenedAt != null) 'last_opened_at': lastOpenedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      versionId: versionId,
      deviceModel: deviceModel,
      osVersion: osVersion,
      installedAt: installedAt,
      lastOpenedAt: lastOpenedAt,
    );
  }
  static const _unset = Object();
  UserAppVersions copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? versionId = _unset,
    Object? deviceModel = _unset,
    Object? osVersion = _unset,
    Object? installedAt = _unset,
    Object? lastOpenedAt = _unset,
  }) {
    return UserAppVersions(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      versionId: versionId == _unset ? this.versionId : versionId as String,
      deviceModel:
          deviceModel == _unset ? this.deviceModel : deviceModel as String?,
      osVersion: osVersion == _unset ? this.osVersion : osVersion as String?,
      installedAt:
          installedAt == _unset ? this.installedAt : installedAt as DateTime?,
      lastOpenedAt: lastOpenedAt == _unset
          ? this.lastOpenedAt
          : lastOpenedAt as DateTime?,
    );
  }
}

// test-typesuser_categories.dart
class UserCategories implements SupadartClass<UserCategories> {
  final String userId;
  final String categoryId;
  final bool? isFavorite;
  final bool? isSubscribed;
  final bool? notificationEnabled;
  final DateTime? lastInteractionAt;
  final Map<String, dynamic>? settings;
  final Map<String, dynamic>? metadata;
  final DateTime createdAt;
  final DateTime updatedAt;
  const UserCategories({
    required this.userId,
    required this.categoryId,
    this.isFavorite,
    this.isSubscribed,
    this.notificationEnabled,
    this.lastInteractionAt,
    this.settings,
    this.metadata,
    required this.createdAt,
    required this.updatedAt,
  });
  static String get table_name => 'user_categories';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_isFavorite => 'is_favorite';
  static String get c_isSubscribed => 'is_subscribed';
  static String get c_notificationEnabled => 'notification_enabled';
  static String get c_lastInteractionAt => 'last_interaction_at';
  static String get c_settings => 'settings';
  static String get c_metadata => 'metadata';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static List<UserCategories> converter(List<Map<String, dynamic>> data) {
    return data.map(UserCategories.fromJson).toList();
  }
  static UserCategories converterSingle(Map<String, dynamic> data) {
    return UserCategories.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isSubscribed,
    bool? notificationEnabled,
    DateTime? lastInteractionAt,
    Map<String, dynamic>? settings,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (isFavorite != null) 'is_favorite': isFavorite,
      if (isSubscribed != null) 'is_subscribed': isSubscribed,
      if (notificationEnabled != null)
        'notification_enabled': notificationEnabled,
      if (lastInteractionAt != null)
        'last_interaction_at': lastInteractionAt.toUtc().toIso8601String(),
      if (settings != null) 'settings': settings,
      if (metadata != null) 'metadata': metadata,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isSubscribed,
    bool? notificationEnabled,
    DateTime? lastInteractionAt,
    Map<String, dynamic>? settings,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      userId: userId,
      categoryId: categoryId,
      isFavorite: isFavorite,
      isSubscribed: isSubscribed,
      notificationEnabled: notificationEnabled,
      lastInteractionAt: lastInteractionAt,
      settings: settings,
      metadata: metadata,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static Map<String, dynamic> update({
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isSubscribed,
    bool? notificationEnabled,
    DateTime? lastInteractionAt,
    Map<String, dynamic>? settings,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      userId: userId,
      categoryId: categoryId,
      isFavorite: isFavorite,
      isSubscribed: isSubscribed,
      notificationEnabled: notificationEnabled,
      lastInteractionAt: lastInteractionAt,
      settings: settings,
      metadata: metadata,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  factory UserCategories.fromJson(Map<String, dynamic> jsonn) {
    return UserCategories(
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : '',
      isFavorite:
          jsonn['is_favorite'] != null ? jsonn['is_favorite'] as bool : null,
      isSubscribed: jsonn['is_subscribed'] != null
          ? jsonn['is_subscribed'] as bool
          : null,
      notificationEnabled: jsonn['notification_enabled'] != null
          ? jsonn['notification_enabled'] as bool
          : null,
      lastInteractionAt: jsonn['last_interaction_at'] != null
          ? DateTime.parse(jsonn['last_interaction_at'].toString())
          : null,
      settings: jsonn['settings'] != null
          ? jsonn['settings'] as Map<String, dynamic>
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
    );
  }
  static Object New({
    String? userId,
    String? categoryId,
    bool? isFavorite,
    bool? isSubscribed,
    bool? notificationEnabled,
    DateTime? lastInteractionAt,
    Map<String, dynamic>? settings,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (isFavorite != null) 'is_favorite': isFavorite,
      if (isSubscribed != null) 'is_subscribed': isSubscribed,
      if (notificationEnabled != null)
        'notification_enabled': notificationEnabled,
      if (lastInteractionAt != null) 'last_interaction_at': lastInteractionAt,
      if (settings != null) 'settings': settings,
      if (metadata != null) 'metadata': metadata,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      userId: userId,
      categoryId: categoryId,
      isFavorite: isFavorite,
      isSubscribed: isSubscribed,
      notificationEnabled: notificationEnabled,
      lastInteractionAt: lastInteractionAt,
      settings: settings,
      metadata: metadata,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static const _unset = Object();
  UserCategories copyWith({
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? isFavorite = _unset,
    Object? isSubscribed = _unset,
    Object? notificationEnabled = _unset,
    Object? lastInteractionAt = _unset,
    Object? settings = _unset,
    Object? metadata = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
  }) {
    return UserCategories(
      userId: userId == _unset ? this.userId : userId as String,
      categoryId: categoryId == _unset ? this.categoryId : categoryId as String,
      isFavorite: isFavorite == _unset ? this.isFavorite : isFavorite as bool?,
      isSubscribed:
          isSubscribed == _unset ? this.isSubscribed : isSubscribed as bool?,
      notificationEnabled: notificationEnabled == _unset
          ? this.notificationEnabled
          : notificationEnabled as bool?,
      lastInteractionAt: lastInteractionAt == _unset
          ? this.lastInteractionAt
          : lastInteractionAt as DateTime?,
      settings: settings == _unset
          ? this.settings
          : settings as Map<String, dynamic>?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime,
    );
  }
}

// test-typesuser_checkins.dart
class UserCheckins implements SupadartClass<UserCheckins> {
  final String? id;
  final String? userId;
  final String? categoryId;
  final DateTime? createdAt;
  final String? summary;
  final String? insight;
  final String? brief;
  final Map<String, dynamic>? mood;
  final String? categoryName;
  final int? checkinCount;
  const UserCheckins({
    this.id,
    this.userId,
    this.categoryId,
    this.createdAt,
    this.summary,
    this.insight,
    this.brief,
    this.mood,
    this.categoryName,
    this.checkinCount,
  });
  static String get table_name => 'user_checkins';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_createdAt => 'created_at';
  static String get c_summary => 'summary';
  static String get c_insight => 'insight';
  static String get c_brief => 'brief';
  static String get c_mood => 'mood';
  static String get c_categoryName => 'category_name';
  static String get c_checkinCount => 'checkin_count';
  static List<UserCheckins> converter(List<Map<String, dynamic>> data) {
    return data.map(UserCheckins.fromJson).toList();
  }
  static UserCheckins converterSingle(Map<String, dynamic> data) {
    return UserCheckins.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    DateTime? createdAt,
    String? summary,
    String? insight,
    String? brief,
    Map<String, dynamic>? mood,
    String? categoryName,
    int? checkinCount,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (summary != null) 'summary': summary,
      if (insight != null) 'insight': insight,
      if (brief != null) 'brief': brief,
      if (mood != null) 'mood': mood,
      if (categoryName != null) 'category_name': categoryName,
      if (checkinCount != null) 'checkin_count': checkinCount,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? categoryId,
    DateTime? createdAt,
    String? summary,
    String? insight,
    String? brief,
    Map<String, dynamic>? mood,
    String? categoryName,
    int? checkinCount,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      createdAt: createdAt,
      summary: summary,
      insight: insight,
      brief: brief,
      mood: mood,
      categoryName: categoryName,
      checkinCount: checkinCount,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    DateTime? createdAt,
    String? summary,
    String? insight,
    String? brief,
    Map<String, dynamic>? mood,
    String? categoryName,
    int? checkinCount,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      createdAt: createdAt,
      summary: summary,
      insight: insight,
      brief: brief,
      mood: mood,
      categoryName: categoryName,
      checkinCount: checkinCount,
    );
  }
  factory UserCheckins.fromJson(Map<String, dynamic> jsonn) {
    return UserCheckins(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      summary: jsonn['summary'] != null ? jsonn['summary'].toString() : null,
      insight: jsonn['insight'] != null ? jsonn['insight'].toString() : null,
      brief: jsonn['brief'] != null ? jsonn['brief'].toString() : null,
      mood:
          jsonn['mood'] != null ? jsonn['mood'] as Map<String, dynamic> : null,
      categoryName: jsonn['category_name'] != null
          ? jsonn['category_name'].toString()
          : null,
      checkinCount: jsonn['checkin_count'] != null
          ? int.parse(jsonn['checkin_count'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    DateTime? createdAt,
    String? summary,
    String? insight,
    String? brief,
    Map<String, dynamic>? mood,
    String? categoryName,
    int? checkinCount,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (createdAt != null) 'created_at': createdAt,
      if (summary != null) 'summary': summary,
      if (insight != null) 'insight': insight,
      if (brief != null) 'brief': brief,
      if (mood != null) 'mood': mood,
      if (categoryName != null) 'category_name': categoryName,
      if (checkinCount != null) 'checkin_count': checkinCount,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      createdAt: createdAt,
      summary: summary,
      insight: insight,
      brief: brief,
      mood: mood,
      categoryName: categoryName,
      checkinCount: checkinCount,
    );
  }
  static const _unset = Object();
  UserCheckins copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? createdAt = _unset,
    Object? summary = _unset,
    Object? insight = _unset,
    Object? brief = _unset,
    Object? mood = _unset,
    Object? categoryName = _unset,
    Object? checkinCount = _unset,
  }) {
    return UserCheckins(
      id: id == _unset ? this.id : id as String?,
      userId: userId == _unset ? this.userId : userId as String?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      summary: summary == _unset ? this.summary : summary as String?,
      insight: insight == _unset ? this.insight : insight as String?,
      brief: brief == _unset ? this.brief : brief as String?,
      mood: mood == _unset ? this.mood : mood as Map<String, dynamic>?,
      categoryName:
          categoryName == _unset ? this.categoryName : categoryName as String?,
      checkinCount:
          checkinCount == _unset ? this.checkinCount : checkinCount as int?,
    );
  }
}

// test-typesuser_devices.dart
class UserDevices implements SupadartClass<UserDevices> {
  final String id;
  final String? userId;
  final String deviceToken;
  final String platform;
  final bool? isActive;
  final Map<String, dynamic>? metadata;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  const UserDevices({
    required this.id,
    this.userId,
    required this.deviceToken,
    required this.platform,
    this.isActive,
    this.metadata,
    this.createdAt,
    this.updatedAt,
  });
  static String get table_name => 'user_devices';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_deviceToken => 'device_token';
  static String get c_platform => 'platform';
  static String get c_isActive => 'is_active';
  static String get c_metadata => 'metadata';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static List<UserDevices> converter(List<Map<String, dynamic>> data) {
    return data.map(UserDevices.fromJson).toList();
  }
  static UserDevices converterSingle(Map<String, dynamic> data) {
    return UserDevices.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? deviceToken,
    String? platform,
    bool? isActive,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (deviceToken != null) 'device_token': deviceToken,
      if (platform != null) 'platform': platform,
      if (isActive != null) 'is_active': isActive,
      if (metadata != null) 'metadata': metadata,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    required String deviceToken,
    required String platform,
    bool? isActive,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      deviceToken: deviceToken,
      platform: platform,
      isActive: isActive,
      metadata: metadata,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? deviceToken,
    String? platform,
    bool? isActive,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      deviceToken: deviceToken,
      platform: platform,
      isActive: isActive,
      metadata: metadata,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  factory UserDevices.fromJson(Map<String, dynamic> jsonn) {
    return UserDevices(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      deviceToken:
          jsonn['device_token'] != null ? jsonn['device_token'].toString() : '',
      platform: jsonn['platform'] != null ? jsonn['platform'].toString() : '',
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? deviceToken,
    String? platform,
    bool? isActive,
    Map<String, dynamic>? metadata,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (deviceToken != null) 'device_token': deviceToken,
      if (platform != null) 'platform': platform,
      if (isActive != null) 'is_active': isActive,
      if (metadata != null) 'metadata': metadata,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      deviceToken: deviceToken,
      platform: platform,
      isActive: isActive,
      metadata: metadata,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
  static const _unset = Object();
  UserDevices copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? deviceToken = _unset,
    Object? platform = _unset,
    Object? isActive = _unset,
    Object? metadata = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
  }) {
    return UserDevices(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String?,
      deviceToken:
          deviceToken == _unset ? this.deviceToken : deviceToken as String,
      platform: platform == _unset ? this.platform : platform as String,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
    );
  }
}

// test-typesuser_stats.dart
class UserStats implements SupadartClass<UserStats> {
  final String? userId;
  final BigInt? totalMessages;
  final BigInt? totalCheckins;
  final BigInt? categoriesUsed;
  final BigInt? favoriteCategories;
  final BigInt? completedCheckins;
  final BigInt? activeCards;
  final DateTime? lastActivity;
  const UserStats({
    this.userId,
    this.totalMessages,
    this.totalCheckins,
    this.categoriesUsed,
    this.favoriteCategories,
    this.completedCheckins,
    this.activeCards,
    this.lastActivity,
  });
  static String get table_name => 'user_stats';
  static String get c_userId => 'user_id';
  static String get c_totalMessages => 'total_messages';
  static String get c_totalCheckins => 'total_checkins';
  static String get c_categoriesUsed => 'categories_used';
  static String get c_favoriteCategories => 'favorite_categories';
  static String get c_completedCheckins => 'completed_checkins';
  static String get c_activeCards => 'active_cards';
  static String get c_lastActivity => 'last_activity';
  static List<UserStats> converter(List<Map<String, dynamic>> data) {
    return data.map(UserStats.fromJson).toList();
  }
  static UserStats converterSingle(Map<String, dynamic> data) {
    return UserStats.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? userId,
    BigInt? totalMessages,
    BigInt? totalCheckins,
    BigInt? categoriesUsed,
    BigInt? favoriteCategories,
    BigInt? completedCheckins,
    BigInt? activeCards,
    DateTime? lastActivity,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (totalMessages != null) 'total_messages': totalMessages.toString(),
      if (totalCheckins != null) 'total_checkins': totalCheckins.toString(),
      if (categoriesUsed != null) 'categories_used': categoriesUsed.toString(),
      if (favoriteCategories != null)
        'favorite_categories': favoriteCategories.toString(),
      if (completedCheckins != null)
        'completed_checkins': completedCheckins.toString(),
      if (activeCards != null) 'active_cards': activeCards.toString(),
      if (lastActivity != null)
        'last_activity': lastActivity.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? userId,
    BigInt? totalMessages,
    BigInt? totalCheckins,
    BigInt? categoriesUsed,
    BigInt? favoriteCategories,
    BigInt? completedCheckins,
    BigInt? activeCards,
    DateTime? lastActivity,
  }) {
    return _generateMap(
      userId: userId,
      totalMessages: totalMessages,
      totalCheckins: totalCheckins,
      categoriesUsed: categoriesUsed,
      favoriteCategories: favoriteCategories,
      completedCheckins: completedCheckins,
      activeCards: activeCards,
      lastActivity: lastActivity,
    );
  }
  static Map<String, dynamic> update({
    String? userId,
    BigInt? totalMessages,
    BigInt? totalCheckins,
    BigInt? categoriesUsed,
    BigInt? favoriteCategories,
    BigInt? completedCheckins,
    BigInt? activeCards,
    DateTime? lastActivity,
  }) {
    return _generateMap(
      userId: userId,
      totalMessages: totalMessages,
      totalCheckins: totalCheckins,
      categoriesUsed: categoriesUsed,
      favoriteCategories: favoriteCategories,
      completedCheckins: completedCheckins,
      activeCards: activeCards,
      lastActivity: lastActivity,
    );
  }
  factory UserStats.fromJson(Map<String, dynamic> jsonn) {
    return UserStats(
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      totalMessages: jsonn['total_messages'] != null
          ? BigInt.parse(jsonn['total_messages'].toString())
          : null,
      totalCheckins: jsonn['total_checkins'] != null
          ? BigInt.parse(jsonn['total_checkins'].toString())
          : null,
      categoriesUsed: jsonn['categories_used'] != null
          ? BigInt.parse(jsonn['categories_used'].toString())
          : null,
      favoriteCategories: jsonn['favorite_categories'] != null
          ? BigInt.parse(jsonn['favorite_categories'].toString())
          : null,
      completedCheckins: jsonn['completed_checkins'] != null
          ? BigInt.parse(jsonn['completed_checkins'].toString())
          : null,
      activeCards: jsonn['active_cards'] != null
          ? BigInt.parse(jsonn['active_cards'].toString())
          : null,
      lastActivity: jsonn['last_activity'] != null
          ? DateTime.parse(jsonn['last_activity'].toString())
          : null,
    );
  }
  static Object New({
    String? userId,
    BigInt? totalMessages,
    BigInt? totalCheckins,
    BigInt? categoriesUsed,
    BigInt? favoriteCategories,
    BigInt? completedCheckins,
    BigInt? activeCards,
    DateTime? lastActivity,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (totalMessages != null) 'total_messages': totalMessages,
      if (totalCheckins != null) 'total_checkins': totalCheckins,
      if (categoriesUsed != null) 'categories_used': categoriesUsed,
      if (favoriteCategories != null) 'favorite_categories': favoriteCategories,
      if (completedCheckins != null) 'completed_checkins': completedCheckins,
      if (activeCards != null) 'active_cards': activeCards,
      if (lastActivity != null) 'last_activity': lastActivity,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      userId: userId,
      totalMessages: totalMessages,
      totalCheckins: totalCheckins,
      categoriesUsed: categoriesUsed,
      favoriteCategories: favoriteCategories,
      completedCheckins: completedCheckins,
      activeCards: activeCards,
      lastActivity: lastActivity,
    );
  }
  static const _unset = Object();
  UserStats copyWith({
    Object? userId = _unset,
    Object? totalMessages = _unset,
    Object? totalCheckins = _unset,
    Object? categoriesUsed = _unset,
    Object? favoriteCategories = _unset,
    Object? completedCheckins = _unset,
    Object? activeCards = _unset,
    Object? lastActivity = _unset,
  }) {
    return UserStats(
      userId: userId == _unset ? this.userId : userId as String?,
      totalMessages: totalMessages == _unset
          ? this.totalMessages
          : totalMessages as BigInt?,
      totalCheckins: totalCheckins == _unset
          ? this.totalCheckins
          : totalCheckins as BigInt?,
      categoriesUsed: categoriesUsed == _unset
          ? this.categoriesUsed
          : categoriesUsed as BigInt?,
      favoriteCategories: favoriteCategories == _unset
          ? this.favoriteCategories
          : favoriteCategories as BigInt?,
      completedCheckins: completedCheckins == _unset
          ? this.completedCheckins
          : completedCheckins as BigInt?,
      activeCards:
          activeCards == _unset ? this.activeCards : activeCards as BigInt?,
      lastActivity: lastActivity == _unset
          ? this.lastActivity
          : lastActivity as DateTime?,
    );
  }
}

// test-typesvoice_transcriptions.dart
class VoiceTranscriptions implements SupadartClass<VoiceTranscriptions> {
  final String id;
  final String userId;
  final String filePath;
  final int fileSize;
  final num? durationSeconds;
  final String transcription;
  final String? contextType;
  final String? contextId;
  final DateTime? createdAt;
  const VoiceTranscriptions({
    required this.id,
    required this.userId,
    required this.filePath,
    required this.fileSize,
    this.durationSeconds,
    required this.transcription,
    this.contextType,
    this.contextId,
    this.createdAt,
  });
  static String get table_name => 'voice_transcriptions';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_filePath => 'file_path';
  static String get c_fileSize => 'file_size';
  static String get c_durationSeconds => 'duration_seconds';
  static String get c_transcription => 'transcription';
  static String get c_contextType => 'context_type';
  static String get c_contextId => 'context_id';
  static String get c_createdAt => 'created_at';
  static List<VoiceTranscriptions> converter(List<Map<String, dynamic>> data) {
    return data.map(VoiceTranscriptions.fromJson).toList();
  }
  static VoiceTranscriptions converterSingle(Map<String, dynamic> data) {
    return VoiceTranscriptions.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? filePath,
    int? fileSize,
    num? durationSeconds,
    String? transcription,
    String? contextType,
    String? contextId,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (filePath != null) 'file_path': filePath,
      if (fileSize != null) 'file_size': fileSize,
      if (durationSeconds != null)
        'duration_seconds': durationSeconds.toString(),
      if (transcription != null) 'transcription': transcription,
      if (contextType != null) 'context_type': contextType,
      if (contextId != null) 'context_id': contextId,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    required String filePath,
    required int fileSize,
    num? durationSeconds,
    required String transcription,
    String? contextType,
    String? contextId,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      filePath: filePath,
      fileSize: fileSize,
      durationSeconds: durationSeconds,
      transcription: transcription,
      contextType: contextType,
      contextId: contextId,
      createdAt: createdAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? filePath,
    int? fileSize,
    num? durationSeconds,
    String? transcription,
    String? contextType,
    String? contextId,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      filePath: filePath,
      fileSize: fileSize,
      durationSeconds: durationSeconds,
      transcription: transcription,
      contextType: contextType,
      contextId: contextId,
      createdAt: createdAt,
    );
  }
  factory VoiceTranscriptions.fromJson(Map<String, dynamic> jsonn) {
    return VoiceTranscriptions(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      filePath: jsonn['file_path'] != null ? jsonn['file_path'].toString() : '',
      fileSize: jsonn['file_size'] != null
          ? int.parse(jsonn['file_size'].toString())
          : 0,
      durationSeconds: jsonn['duration_seconds'] != null
          ? num.parse(jsonn['duration_seconds'].toString())
          : null,
      transcription: jsonn['transcription'] != null
          ? jsonn['transcription'].toString()
          : '',
      contextType: jsonn['context_type'] != null
          ? jsonn['context_type'].toString()
          : null,
      contextId:
          jsonn['context_id'] != null ? jsonn['context_id'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? filePath,
    int? fileSize,
    num? durationSeconds,
    String? transcription,
    String? contextType,
    String? contextId,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (filePath != null) 'file_path': filePath,
      if (fileSize != null) 'file_size': fileSize,
      if (durationSeconds != null) 'duration_seconds': durationSeconds,
      if (transcription != null) 'transcription': transcription,
      if (contextType != null) 'context_type': contextType,
      if (contextId != null) 'context_id': contextId,
      if (createdAt != null) 'created_at': createdAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      filePath: filePath,
      fileSize: fileSize,
      durationSeconds: durationSeconds,
      transcription: transcription,
      contextType: contextType,
      contextId: contextId,
      createdAt: createdAt,
    );
  }
  static const _unset = Object();
  VoiceTranscriptions copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? filePath = _unset,
    Object? fileSize = _unset,
    Object? durationSeconds = _unset,
    Object? transcription = _unset,
    Object? contextType = _unset,
    Object? contextId = _unset,
    Object? createdAt = _unset,
  }) {
    return VoiceTranscriptions(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      filePath: filePath == _unset ? this.filePath : filePath as String,
      fileSize: fileSize == _unset ? this.fileSize : fileSize as int,
      durationSeconds: durationSeconds == _unset
          ? this.durationSeconds
          : durationSeconds as num?,
      transcription: transcription == _unset
          ? this.transcription
          : transcription as String,
      contextType:
          contextType == _unset ? this.contextType : contextType as String?,
      contextId: contextId == _unset ? this.contextId : contextId as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
    );
  }
}



// ======================
// DATABASE VIEWS
// ======================
// test-typesadmin_audio_analytics.dart
class AdminAudioAnalytics implements SupadartClass<AdminAudioAnalytics> {
  final DateTime? hour;
  final BigInt? uniqueUsers;
  final BigInt? totalRequests;
  final BigInt? successfulRequests;
  final BigInt? failedRequests;
  final BigInt? totalBytesProcessed;
  final int? avgProcessingTimeMs;
  final int? maxProcessingTimeMs;
  final BigInt? totalCharactersTranscribed;
  final num? avgFileSizeMb;
  const AdminAudioAnalytics({
    this.hour,
    this.uniqueUsers,
    this.totalRequests,
    this.successfulRequests,
    this.failedRequests,
    this.totalBytesProcessed,
    this.avgProcessingTimeMs,
    this.maxProcessingTimeMs,
    this.totalCharactersTranscribed,
    this.avgFileSizeMb,
  });
  static String get table_name => 'admin_audio_analytics';
  static String get c_hour => 'hour';
  static String get c_uniqueUsers => 'unique_users';
  static String get c_totalRequests => 'total_requests';
  static String get c_successfulRequests => 'successful_requests';
  static String get c_failedRequests => 'failed_requests';
  static String get c_totalBytesProcessed => 'total_bytes_processed';
  static String get c_avgProcessingTimeMs => 'avg_processing_time_ms';
  static String get c_maxProcessingTimeMs => 'max_processing_time_ms';
  static String get c_totalCharactersTranscribed =>
      'total_characters_transcribed';
  static String get c_avgFileSizeMb => 'avg_file_size_mb';
  static List<AdminAudioAnalytics> converter(List<Map<String, dynamic>> data) {
    return data.map(AdminAudioAnalytics.fromJson).toList();
  }
  static AdminAudioAnalytics converterSingle(Map<String, dynamic> data) {
    return AdminAudioAnalytics.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    DateTime? hour,
    BigInt? uniqueUsers,
    BigInt? totalRequests,
    BigInt? successfulRequests,
    BigInt? failedRequests,
    BigInt? totalBytesProcessed,
    int? avgProcessingTimeMs,
    int? maxProcessingTimeMs,
    BigInt? totalCharactersTranscribed,
    num? avgFileSizeMb,
  }) {
    return {
      if (hour != null) 'hour': hour.toUtc().toIso8601String(),
      if (uniqueUsers != null) 'unique_users': uniqueUsers.toString(),
      if (totalRequests != null) 'total_requests': totalRequests.toString(),
      if (successfulRequests != null)
        'successful_requests': successfulRequests.toString(),
      if (failedRequests != null) 'failed_requests': failedRequests.toString(),
      if (totalBytesProcessed != null)
        'total_bytes_processed': totalBytesProcessed.toString(),
      if (avgProcessingTimeMs != null)
        'avg_processing_time_ms': avgProcessingTimeMs,
      if (maxProcessingTimeMs != null)
        'max_processing_time_ms': maxProcessingTimeMs,
      if (totalCharactersTranscribed != null)
        'total_characters_transcribed': totalCharactersTranscribed.toString(),
      if (avgFileSizeMb != null) 'avg_file_size_mb': avgFileSizeMb.toString(),
    };
  }
  static Map<String, dynamic> insert({
    DateTime? hour,
    BigInt? uniqueUsers,
    BigInt? totalRequests,
    BigInt? successfulRequests,
    BigInt? failedRequests,
    BigInt? totalBytesProcessed,
    int? avgProcessingTimeMs,
    int? maxProcessingTimeMs,
    BigInt? totalCharactersTranscribed,
    num? avgFileSizeMb,
  }) {
    return _generateMap(
      hour: hour,
      uniqueUsers: uniqueUsers,
      totalRequests: totalRequests,
      successfulRequests: successfulRequests,
      failedRequests: failedRequests,
      totalBytesProcessed: totalBytesProcessed,
      avgProcessingTimeMs: avgProcessingTimeMs,
      maxProcessingTimeMs: maxProcessingTimeMs,
      totalCharactersTranscribed: totalCharactersTranscribed,
      avgFileSizeMb: avgFileSizeMb,
    );
  }
  static Map<String, dynamic> update({
    DateTime? hour,
    BigInt? uniqueUsers,
    BigInt? totalRequests,
    BigInt? successfulRequests,
    BigInt? failedRequests,
    BigInt? totalBytesProcessed,
    int? avgProcessingTimeMs,
    int? maxProcessingTimeMs,
    BigInt? totalCharactersTranscribed,
    num? avgFileSizeMb,
  }) {
    return _generateMap(
      hour: hour,
      uniqueUsers: uniqueUsers,
      totalRequests: totalRequests,
      successfulRequests: successfulRequests,
      failedRequests: failedRequests,
      totalBytesProcessed: totalBytesProcessed,
      avgProcessingTimeMs: avgProcessingTimeMs,
      maxProcessingTimeMs: maxProcessingTimeMs,
      totalCharactersTranscribed: totalCharactersTranscribed,
      avgFileSizeMb: avgFileSizeMb,
    );
  }
  factory AdminAudioAnalytics.fromJson(Map<String, dynamic> jsonn) {
    return AdminAudioAnalytics(
      hour: jsonn['hour'] != null
          ? DateTime.parse(jsonn['hour'].toString())
          : null,
      uniqueUsers: jsonn['unique_users'] != null
          ? BigInt.parse(jsonn['unique_users'].toString())
          : null,
      totalRequests: jsonn['total_requests'] != null
          ? BigInt.parse(jsonn['total_requests'].toString())
          : null,
      successfulRequests: jsonn['successful_requests'] != null
          ? BigInt.parse(jsonn['successful_requests'].toString())
          : null,
      failedRequests: jsonn['failed_requests'] != null
          ? BigInt.parse(jsonn['failed_requests'].toString())
          : null,
      totalBytesProcessed: jsonn['total_bytes_processed'] != null
          ? BigInt.parse(jsonn['total_bytes_processed'].toString())
          : null,
      avgProcessingTimeMs: jsonn['avg_processing_time_ms'] != null
          ? int.parse(jsonn['avg_processing_time_ms'].toString())
          : null,
      maxProcessingTimeMs: jsonn['max_processing_time_ms'] != null
          ? int.parse(jsonn['max_processing_time_ms'].toString())
          : null,
      totalCharactersTranscribed: jsonn['total_characters_transcribed'] != null
          ? BigInt.parse(jsonn['total_characters_transcribed'].toString())
          : null,
      avgFileSizeMb: jsonn['avg_file_size_mb'] != null
          ? num.parse(jsonn['avg_file_size_mb'].toString())
          : null,
    );
  }
  static Object New({
    DateTime? hour,
    BigInt? uniqueUsers,
    BigInt? totalRequests,
    BigInt? successfulRequests,
    BigInt? failedRequests,
    BigInt? totalBytesProcessed,
    int? avgProcessingTimeMs,
    int? maxProcessingTimeMs,
    BigInt? totalCharactersTranscribed,
    num? avgFileSizeMb,
  }) {
    return {
      if (hour != null) 'hour': hour,
      if (uniqueUsers != null) 'unique_users': uniqueUsers,
      if (totalRequests != null) 'total_requests': totalRequests,
      if (successfulRequests != null) 'successful_requests': successfulRequests,
      if (failedRequests != null) 'failed_requests': failedRequests,
      if (totalBytesProcessed != null)
        'total_bytes_processed': totalBytesProcessed,
      if (avgProcessingTimeMs != null)
        'avg_processing_time_ms': avgProcessingTimeMs,
      if (maxProcessingTimeMs != null)
        'max_processing_time_ms': maxProcessingTimeMs,
      if (totalCharactersTranscribed != null)
        'total_characters_transcribed': totalCharactersTranscribed,
      if (avgFileSizeMb != null) 'avg_file_size_mb': avgFileSizeMb,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      hour: hour,
      uniqueUsers: uniqueUsers,
      totalRequests: totalRequests,
      successfulRequests: successfulRequests,
      failedRequests: failedRequests,
      totalBytesProcessed: totalBytesProcessed,
      avgProcessingTimeMs: avgProcessingTimeMs,
      maxProcessingTimeMs: maxProcessingTimeMs,
      totalCharactersTranscribed: totalCharactersTranscribed,
      avgFileSizeMb: avgFileSizeMb,
    );
  }
  static const _unset = Object();
  AdminAudioAnalytics copyWith({
    Object? hour = _unset,
    Object? uniqueUsers = _unset,
    Object? totalRequests = _unset,
    Object? successfulRequests = _unset,
    Object? failedRequests = _unset,
    Object? totalBytesProcessed = _unset,
    Object? avgProcessingTimeMs = _unset,
    Object? maxProcessingTimeMs = _unset,
    Object? totalCharactersTranscribed = _unset,
    Object? avgFileSizeMb = _unset,
  }) {
    return AdminAudioAnalytics(
      hour: hour == _unset ? this.hour : hour as DateTime?,
      uniqueUsers:
          uniqueUsers == _unset ? this.uniqueUsers : uniqueUsers as BigInt?,
      totalRequests: totalRequests == _unset
          ? this.totalRequests
          : totalRequests as BigInt?,
      successfulRequests: successfulRequests == _unset
          ? this.successfulRequests
          : successfulRequests as BigInt?,
      failedRequests: failedRequests == _unset
          ? this.failedRequests
          : failedRequests as BigInt?,
      totalBytesProcessed: totalBytesProcessed == _unset
          ? this.totalBytesProcessed
          : totalBytesProcessed as BigInt?,
      avgProcessingTimeMs: avgProcessingTimeMs == _unset
          ? this.avgProcessingTimeMs
          : avgProcessingTimeMs as int?,
      maxProcessingTimeMs: maxProcessingTimeMs == _unset
          ? this.maxProcessingTimeMs
          : maxProcessingTimeMs as int?,
      totalCharactersTranscribed: totalCharactersTranscribed == _unset
          ? this.totalCharactersTranscribed
          : totalCharactersTranscribed as BigInt?,
      avgFileSizeMb:
          avgFileSizeMb == _unset ? this.avgFileSizeMb : avgFileSizeMb as num?,
    );
  }
}

// test-typescategories_with_user_preferences.dart
class CategoriesWithUserPreferences
    implements SupadartClass<CategoriesWithUserPreferences> {
  final String? id;
  final String? parentId;
  final String? name;
  final String? nameShort;
  final String? description;
  final String? icon;
  final int? sortOrder;
  final String? primaryColor;
  final String? secondaryColor;
  final bool? isActive;
  final bool? showCheckinHistory;
  final bool? checkinEnabled;
  final int? followupTimer;
  final String? promptCheckin;
  final String? promptCheckin2;
  final String? guidelinesFileText;
  final int? maxQuestions;
  final String? scope;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final String? iconUrl;
  final String? iconSecondaryUrl;
  final Map<String, dynamic>? metadata;
  final String? userId;
  final bool? isFavorite;
  final DateTime? addedAt;
  final bool? isSelected;
  const CategoriesWithUserPreferences({
    this.id,
    this.parentId,
    this.name,
    this.nameShort,
    this.description,
    this.icon,
    this.sortOrder,
    this.primaryColor,
    this.secondaryColor,
    this.isActive,
    this.showCheckinHistory,
    this.checkinEnabled,
    this.followupTimer,
    this.promptCheckin,
    this.promptCheckin2,
    this.guidelinesFileText,
    this.maxQuestions,
    this.scope,
    this.createdAt,
    this.updatedAt,
    this.iconUrl,
    this.iconSecondaryUrl,
    this.metadata,
    this.userId,
    this.isFavorite,
    this.addedAt,
    this.isSelected,
  });
  static String get table_name => 'categories_with_user_preferences';
  static String get c_id => 'id';
  static String get c_parentId => 'parent_id';
  static String get c_name => 'name';
  static String get c_nameShort => 'name_short';
  static String get c_description => 'description';
  static String get c_icon => 'icon';
  static String get c_sortOrder => 'sort_order';
  static String get c_primaryColor => 'primary_color';
  static String get c_secondaryColor => 'secondary_color';
  static String get c_isActive => 'is_active';
  static String get c_showCheckinHistory => 'show_checkin_history';
  static String get c_checkinEnabled => 'checkin_enabled';
  static String get c_followupTimer => 'followup_timer';
  static String get c_promptCheckin => 'prompt_checkin';
  static String get c_promptCheckin2 => 'prompt_checkin_2';
  static String get c_guidelinesFileText => 'guidelines_file_text';
  static String get c_maxQuestions => 'max_questions';
  static String get c_scope => 'scope';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_iconUrl => 'icon_url';
  static String get c_iconSecondaryUrl => 'icon_secondary_url';
  static String get c_metadata => 'metadata';
  static String get c_userId => 'user_id';
  static String get c_isFavorite => 'is_favorite';
  static String get c_addedAt => 'added_at';
  static String get c_isSelected => 'is_selected';
  static List<CategoriesWithUserPreferences> converter(
      List<Map<String, dynamic>> data) {
    return data.map(CategoriesWithUserPreferences.fromJson).toList();
  }
  static CategoriesWithUserPreferences converterSingle(
      Map<String, dynamic> data) {
    return CategoriesWithUserPreferences.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? parentId,
    String? name,
    String? nameShort,
    String? description,
    String? icon,
    int? sortOrder,
    String? primaryColor,
    String? secondaryColor,
    bool? isActive,
    bool? showCheckinHistory,
    bool? checkinEnabled,
    int? followupTimer,
    String? promptCheckin,
    String? promptCheckin2,
    String? guidelinesFileText,
    int? maxQuestions,
    String? scope,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? iconUrl,
    String? iconSecondaryUrl,
    Map<String, dynamic>? metadata,
    String? userId,
    bool? isFavorite,
    DateTime? addedAt,
    bool? isSelected,
  }) {
    return {
      if (id != null) 'id': id,
      if (parentId != null) 'parent_id': parentId,
      if (name != null) 'name': name,
      if (nameShort != null) 'name_short': nameShort,
      if (description != null) 'description': description,
      if (icon != null) 'icon': icon,
      if (sortOrder != null) 'sort_order': sortOrder,
      if (primaryColor != null) 'primary_color': primaryColor,
      if (secondaryColor != null) 'secondary_color': secondaryColor,
      if (isActive != null) 'is_active': isActive,
      if (showCheckinHistory != null)
        'show_checkin_history': showCheckinHistory,
      if (checkinEnabled != null) 'checkin_enabled': checkinEnabled,
      if (followupTimer != null) 'followup_timer': followupTimer,
      if (promptCheckin != null) 'prompt_checkin': promptCheckin,
      if (promptCheckin2 != null) 'prompt_checkin_2': promptCheckin2,
      if (guidelinesFileText != null)
        'guidelines_file_text': guidelinesFileText,
      if (maxQuestions != null) 'max_questions': maxQuestions,
      if (scope != null) 'scope': scope,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (iconUrl != null) 'icon_url': iconUrl,
      if (iconSecondaryUrl != null) 'icon_secondary_url': iconSecondaryUrl,
      if (metadata != null) 'metadata': metadata,
      if (userId != null) 'user_id': userId,
      if (isFavorite != null) 'is_favorite': isFavorite,
      if (addedAt != null) 'added_at': addedAt.toUtc().toIso8601String(),
      if (isSelected != null) 'is_selected': isSelected,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? parentId,
    String? name,
    String? nameShort,
    String? description,
    String? icon,
    int? sortOrder,
    String? primaryColor,
    String? secondaryColor,
    bool? isActive,
    bool? showCheckinHistory,
    bool? checkinEnabled,
    int? followupTimer,
    String? promptCheckin,
    String? promptCheckin2,
    String? guidelinesFileText,
    int? maxQuestions,
    String? scope,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? iconUrl,
    String? iconSecondaryUrl,
    Map<String, dynamic>? metadata,
    String? userId,
    bool? isFavorite,
    DateTime? addedAt,
    bool? isSelected,
  }) {
    return _generateMap(
      id: id,
      parentId: parentId,
      name: name,
      nameShort: nameShort,
      description: description,
      icon: icon,
      sortOrder: sortOrder,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      isActive: isActive,
      showCheckinHistory: showCheckinHistory,
      checkinEnabled: checkinEnabled,
      followupTimer: followupTimer,
      promptCheckin: promptCheckin,
      promptCheckin2: promptCheckin2,
      guidelinesFileText: guidelinesFileText,
      maxQuestions: maxQuestions,
      scope: scope,
      createdAt: createdAt,
      updatedAt: updatedAt,
      iconUrl: iconUrl,
      iconSecondaryUrl: iconSecondaryUrl,
      metadata: metadata,
      userId: userId,
      isFavorite: isFavorite,
      addedAt: addedAt,
      isSelected: isSelected,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? parentId,
    String? name,
    String? nameShort,
    String? description,
    String? icon,
    int? sortOrder,
    String? primaryColor,
    String? secondaryColor,
    bool? isActive,
    bool? showCheckinHistory,
    bool? checkinEnabled,
    int? followupTimer,
    String? promptCheckin,
    String? promptCheckin2,
    String? guidelinesFileText,
    int? maxQuestions,
    String? scope,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? iconUrl,
    String? iconSecondaryUrl,
    Map<String, dynamic>? metadata,
    String? userId,
    bool? isFavorite,
    DateTime? addedAt,
    bool? isSelected,
  }) {
    return _generateMap(
      id: id,
      parentId: parentId,
      name: name,
      nameShort: nameShort,
      description: description,
      icon: icon,
      sortOrder: sortOrder,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      isActive: isActive,
      showCheckinHistory: showCheckinHistory,
      checkinEnabled: checkinEnabled,
      followupTimer: followupTimer,
      promptCheckin: promptCheckin,
      promptCheckin2: promptCheckin2,
      guidelinesFileText: guidelinesFileText,
      maxQuestions: maxQuestions,
      scope: scope,
      createdAt: createdAt,
      updatedAt: updatedAt,
      iconUrl: iconUrl,
      iconSecondaryUrl: iconSecondaryUrl,
      metadata: metadata,
      userId: userId,
      isFavorite: isFavorite,
      addedAt: addedAt,
      isSelected: isSelected,
    );
  }
  factory CategoriesWithUserPreferences.fromJson(Map<String, dynamic> jsonn) {
    return CategoriesWithUserPreferences(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      parentId:
          jsonn['parent_id'] != null ? jsonn['parent_id'].toString() : null,
      name: jsonn['name'] != null ? jsonn['name'].toString() : null,
      nameShort:
          jsonn['name_short'] != null ? jsonn['name_short'].toString() : null,
      description:
          jsonn['description'] != null ? jsonn['description'].toString() : null,
      icon: jsonn['icon'] != null ? jsonn['icon'].toString() : null,
      sortOrder: jsonn['sort_order'] != null
          ? int.parse(jsonn['sort_order'].toString())
          : null,
      primaryColor: jsonn['primary_color'] != null
          ? jsonn['primary_color'].toString()
          : null,
      secondaryColor: jsonn['secondary_color'] != null
          ? jsonn['secondary_color'].toString()
          : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      showCheckinHistory: jsonn['show_checkin_history'] != null
          ? jsonn['show_checkin_history'] as bool
          : null,
      checkinEnabled: jsonn['checkin_enabled'] != null
          ? jsonn['checkin_enabled'] as bool
          : null,
      followupTimer: jsonn['followup_timer'] != null
          ? int.parse(jsonn['followup_timer'].toString())
          : null,
      promptCheckin: jsonn['prompt_checkin'] != null
          ? jsonn['prompt_checkin'].toString()
          : null,
      promptCheckin2: jsonn['prompt_checkin_2'] != null
          ? jsonn['prompt_checkin_2'].toString()
          : null,
      guidelinesFileText: jsonn['guidelines_file_text'] != null
          ? jsonn['guidelines_file_text'].toString()
          : null,
      maxQuestions: jsonn['max_questions'] != null
          ? int.parse(jsonn['max_questions'].toString())
          : null,
      scope: jsonn['scope'] != null ? jsonn['scope'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      iconUrl: jsonn['icon_url'] != null ? jsonn['icon_url'].toString() : null,
      iconSecondaryUrl: jsonn['icon_secondary_url'] != null
          ? jsonn['icon_secondary_url'].toString()
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      isFavorite:
          jsonn['is_favorite'] != null ? jsonn['is_favorite'] as bool : null,
      addedAt: jsonn['added_at'] != null
          ? DateTime.parse(jsonn['added_at'].toString())
          : null,
      isSelected:
          jsonn['is_selected'] != null ? jsonn['is_selected'] as bool : null,
    );
  }
  static Object New({
    String? id,
    String? parentId,
    String? name,
    String? nameShort,
    String? description,
    String? icon,
    int? sortOrder,
    String? primaryColor,
    String? secondaryColor,
    bool? isActive,
    bool? showCheckinHistory,
    bool? checkinEnabled,
    int? followupTimer,
    String? promptCheckin,
    String? promptCheckin2,
    String? guidelinesFileText,
    int? maxQuestions,
    String? scope,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? iconUrl,
    String? iconSecondaryUrl,
    Map<String, dynamic>? metadata,
    String? userId,
    bool? isFavorite,
    DateTime? addedAt,
    bool? isSelected,
  }) {
    return {
      if (id != null) 'id': id,
      if (parentId != null) 'parent_id': parentId,
      if (name != null) 'name': name,
      if (nameShort != null) 'name_short': nameShort,
      if (description != null) 'description': description,
      if (icon != null) 'icon': icon,
      if (sortOrder != null) 'sort_order': sortOrder,
      if (primaryColor != null) 'primary_color': primaryColor,
      if (secondaryColor != null) 'secondary_color': secondaryColor,
      if (isActive != null) 'is_active': isActive,
      if (showCheckinHistory != null)
        'show_checkin_history': showCheckinHistory,
      if (checkinEnabled != null) 'checkin_enabled': checkinEnabled,
      if (followupTimer != null) 'followup_timer': followupTimer,
      if (promptCheckin != null) 'prompt_checkin': promptCheckin,
      if (promptCheckin2 != null) 'prompt_checkin_2': promptCheckin2,
      if (guidelinesFileText != null)
        'guidelines_file_text': guidelinesFileText,
      if (maxQuestions != null) 'max_questions': maxQuestions,
      if (scope != null) 'scope': scope,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (iconUrl != null) 'icon_url': iconUrl,
      if (iconSecondaryUrl != null) 'icon_secondary_url': iconSecondaryUrl,
      if (metadata != null) 'metadata': metadata,
      if (userId != null) 'user_id': userId,
      if (isFavorite != null) 'is_favorite': isFavorite,
      if (addedAt != null) 'added_at': addedAt,
      if (isSelected != null) 'is_selected': isSelected,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      parentId: parentId,
      name: name,
      nameShort: nameShort,
      description: description,
      icon: icon,
      sortOrder: sortOrder,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      isActive: isActive,
      showCheckinHistory: showCheckinHistory,
      checkinEnabled: checkinEnabled,
      followupTimer: followupTimer,
      promptCheckin: promptCheckin,
      promptCheckin2: promptCheckin2,
      guidelinesFileText: guidelinesFileText,
      maxQuestions: maxQuestions,
      scope: scope,
      createdAt: createdAt,
      updatedAt: updatedAt,
      iconUrl: iconUrl,
      iconSecondaryUrl: iconSecondaryUrl,
      metadata: metadata,
      userId: userId,
      isFavorite: isFavorite,
      addedAt: addedAt,
      isSelected: isSelected,
    );
  }
  static const _unset = Object();
  CategoriesWithUserPreferences copyWith({
    Object? id = _unset,
    Object? parentId = _unset,
    Object? name = _unset,
    Object? nameShort = _unset,
    Object? description = _unset,
    Object? icon = _unset,
    Object? sortOrder = _unset,
    Object? primaryColor = _unset,
    Object? secondaryColor = _unset,
    Object? isActive = _unset,
    Object? showCheckinHistory = _unset,
    Object? checkinEnabled = _unset,
    Object? followupTimer = _unset,
    Object? promptCheckin = _unset,
    Object? promptCheckin2 = _unset,
    Object? guidelinesFileText = _unset,
    Object? maxQuestions = _unset,
    Object? scope = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? iconUrl = _unset,
    Object? iconSecondaryUrl = _unset,
    Object? metadata = _unset,
    Object? userId = _unset,
    Object? isFavorite = _unset,
    Object? addedAt = _unset,
    Object? isSelected = _unset,
  }) {
    return CategoriesWithUserPreferences(
      id: id == _unset ? this.id : id as String?,
      parentId: parentId == _unset ? this.parentId : parentId as String?,
      name: name == _unset ? this.name : name as String?,
      nameShort: nameShort == _unset ? this.nameShort : nameShort as String?,
      description:
          description == _unset ? this.description : description as String?,
      icon: icon == _unset ? this.icon : icon as String?,
      sortOrder: sortOrder == _unset ? this.sortOrder : sortOrder as int?,
      primaryColor:
          primaryColor == _unset ? this.primaryColor : primaryColor as String?,
      secondaryColor: secondaryColor == _unset
          ? this.secondaryColor
          : secondaryColor as String?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      showCheckinHistory: showCheckinHistory == _unset
          ? this.showCheckinHistory
          : showCheckinHistory as bool?,
      checkinEnabled: checkinEnabled == _unset
          ? this.checkinEnabled
          : checkinEnabled as bool?,
      followupTimer:
          followupTimer == _unset ? this.followupTimer : followupTimer as int?,
      promptCheckin: promptCheckin == _unset
          ? this.promptCheckin
          : promptCheckin as String?,
      promptCheckin2: promptCheckin2 == _unset
          ? this.promptCheckin2
          : promptCheckin2 as String?,
      guidelinesFileText: guidelinesFileText == _unset
          ? this.guidelinesFileText
          : guidelinesFileText as String?,
      maxQuestions:
          maxQuestions == _unset ? this.maxQuestions : maxQuestions as int?,
      scope: scope == _unset ? this.scope : scope as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      iconUrl: iconUrl == _unset ? this.iconUrl : iconUrl as String?,
      iconSecondaryUrl: iconSecondaryUrl == _unset
          ? this.iconSecondaryUrl
          : iconSecondaryUrl as String?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      userId: userId == _unset ? this.userId : userId as String?,
      isFavorite: isFavorite == _unset ? this.isFavorite : isFavorite as bool?,
      addedAt: addedAt == _unset ? this.addedAt : addedAt as DateTime?,
      isSelected: isSelected == _unset ? this.isSelected : isSelected as bool?,
    );
  }
}

// test-typescheckin_analytics.dart
class CheckinAnalytics implements SupadartClass<CheckinAnalytics> {
  final String? userId;
  final String? categoryId;
  final String? categoryName;
  final BigInt? totalCheckins;
  final num? avgWellnessLevel;
  final DateTime? lastCheckin;
  final DateTime? firstCheckin;
  const CheckinAnalytics({
    this.userId,
    this.categoryId,
    this.categoryName,
    this.totalCheckins,
    this.avgWellnessLevel,
    this.lastCheckin,
    this.firstCheckin,
  });
  static String get table_name => 'checkin_analytics';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_categoryName => 'category_name';
  static String get c_totalCheckins => 'total_checkins';
  static String get c_avgWellnessLevel => 'avg_wellness_level';
  static String get c_lastCheckin => 'last_checkin';
  static String get c_firstCheckin => 'first_checkin';
  static List<CheckinAnalytics> converter(List<Map<String, dynamic>> data) {
    return data.map(CheckinAnalytics.fromJson).toList();
  }
  static CheckinAnalytics converterSingle(Map<String, dynamic> data) {
    return CheckinAnalytics.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? userId,
    String? categoryId,
    String? categoryName,
    BigInt? totalCheckins,
    num? avgWellnessLevel,
    DateTime? lastCheckin,
    DateTime? firstCheckin,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (categoryName != null) 'category_name': categoryName,
      if (totalCheckins != null) 'total_checkins': totalCheckins.toString(),
      if (avgWellnessLevel != null)
        'avg_wellness_level': avgWellnessLevel.toString(),
      if (lastCheckin != null)
        'last_checkin': lastCheckin.toUtc().toIso8601String(),
      if (firstCheckin != null)
        'first_checkin': firstCheckin.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? userId,
    String? categoryId,
    String? categoryName,
    BigInt? totalCheckins,
    num? avgWellnessLevel,
    DateTime? lastCheckin,
    DateTime? firstCheckin,
  }) {
    return _generateMap(
      userId: userId,
      categoryId: categoryId,
      categoryName: categoryName,
      totalCheckins: totalCheckins,
      avgWellnessLevel: avgWellnessLevel,
      lastCheckin: lastCheckin,
      firstCheckin: firstCheckin,
    );
  }
  static Map<String, dynamic> update({
    String? userId,
    String? categoryId,
    String? categoryName,
    BigInt? totalCheckins,
    num? avgWellnessLevel,
    DateTime? lastCheckin,
    DateTime? firstCheckin,
  }) {
    return _generateMap(
      userId: userId,
      categoryId: categoryId,
      categoryName: categoryName,
      totalCheckins: totalCheckins,
      avgWellnessLevel: avgWellnessLevel,
      lastCheckin: lastCheckin,
      firstCheckin: firstCheckin,
    );
  }
  factory CheckinAnalytics.fromJson(Map<String, dynamic> jsonn) {
    return CheckinAnalytics(
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      categoryName: jsonn['category_name'] != null
          ? jsonn['category_name'].toString()
          : null,
      totalCheckins: jsonn['total_checkins'] != null
          ? BigInt.parse(jsonn['total_checkins'].toString())
          : null,
      avgWellnessLevel: jsonn['avg_wellness_level'] != null
          ? num.parse(jsonn['avg_wellness_level'].toString())
          : null,
      lastCheckin: jsonn['last_checkin'] != null
          ? DateTime.parse(jsonn['last_checkin'].toString())
          : null,
      firstCheckin: jsonn['first_checkin'] != null
          ? DateTime.parse(jsonn['first_checkin'].toString())
          : null,
    );
  }
  static Object New({
    String? userId,
    String? categoryId,
    String? categoryName,
    BigInt? totalCheckins,
    num? avgWellnessLevel,
    DateTime? lastCheckin,
    DateTime? firstCheckin,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (categoryName != null) 'category_name': categoryName,
      if (totalCheckins != null) 'total_checkins': totalCheckins,
      if (avgWellnessLevel != null) 'avg_wellness_level': avgWellnessLevel,
      if (lastCheckin != null) 'last_checkin': lastCheckin,
      if (firstCheckin != null) 'first_checkin': firstCheckin,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      userId: userId,
      categoryId: categoryId,
      categoryName: categoryName,
      totalCheckins: totalCheckins,
      avgWellnessLevel: avgWellnessLevel,
      lastCheckin: lastCheckin,
      firstCheckin: firstCheckin,
    );
  }
  static const _unset = Object();
  CheckinAnalytics copyWith({
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? categoryName = _unset,
    Object? totalCheckins = _unset,
    Object? avgWellnessLevel = _unset,
    Object? lastCheckin = _unset,
    Object? firstCheckin = _unset,
  }) {
    return CheckinAnalytics(
      userId: userId == _unset ? this.userId : userId as String?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      categoryName:
          categoryName == _unset ? this.categoryName : categoryName as String?,
      totalCheckins: totalCheckins == _unset
          ? this.totalCheckins
          : totalCheckins as BigInt?,
      avgWellnessLevel: avgWellnessLevel == _unset
          ? this.avgWellnessLevel
          : avgWellnessLevel as num?,
      lastCheckin:
          lastCheckin == _unset ? this.lastCheckin : lastCheckin as DateTime?,
      firstCheckin: firstCheckin == _unset
          ? this.firstCheckin
          : firstCheckin as DateTime?,
    );
  }
}

// test-typescheckin_history_view.dart
class CheckinHistoryView implements SupadartClass<CheckinHistoryView> {
  final String? id;
  final String? userId;
  final String? categoryId;
  final String? userCategoryId;
  final num? wellnessLevel;
  final String? summary;
  final String? insights;
  final String? status;
  final int? currentQuestion;
  final int? totalQuestions;
  final Map<String, dynamic>? responses;
  final num? completionPercentage;
  final DateTime? startedAt;
  final DateTime? completedAt;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final Map<String, dynamic>? metadata;
  final String? brief;
  final String? insight;
  final Map<String, dynamic>? mood;
  final int? questionsAsked;
  final String? categoryName;
  final String? categoryColor;
  final String? categoryIcon;
  const CheckinHistoryView({
    this.id,
    this.userId,
    this.categoryId,
    this.userCategoryId,
    this.wellnessLevel,
    this.summary,
    this.insights,
    this.status,
    this.currentQuestion,
    this.totalQuestions,
    this.responses,
    this.completionPercentage,
    this.startedAt,
    this.completedAt,
    this.createdAt,
    this.updatedAt,
    this.metadata,
    this.brief,
    this.insight,
    this.mood,
    this.questionsAsked,
    this.categoryName,
    this.categoryColor,
    this.categoryIcon,
  });
  static String get table_name => 'checkin_history_view';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_userCategoryId => 'user_category_id';
  static String get c_wellnessLevel => 'wellness_level';
  static String get c_summary => 'summary';
  static String get c_insights => 'insights';
  static String get c_status => 'status';
  static String get c_currentQuestion => 'current_question';
  static String get c_totalQuestions => 'total_questions';
  static String get c_responses => 'responses';
  static String get c_completionPercentage => 'completion_percentage';
  static String get c_startedAt => 'started_at';
  static String get c_completedAt => 'completed_at';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_metadata => 'metadata';
  static String get c_brief => 'brief';
  static String get c_insight => 'insight';
  static String get c_mood => 'mood';
  static String get c_questionsAsked => 'questions_asked';
  static String get c_categoryName => 'category_name';
  static String get c_categoryColor => 'category_color';
  static String get c_categoryIcon => 'category_icon';
  static List<CheckinHistoryView> converter(List<Map<String, dynamic>> data) {
    return data.map(CheckinHistoryView.fromJson).toList();
  }
  static CheckinHistoryView converterSingle(Map<String, dynamic> data) {
    return CheckinHistoryView.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
    String? categoryName,
    String? categoryColor,
    String? categoryIcon,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (userCategoryId != null) 'user_category_id': userCategoryId,
      if (wellnessLevel != null) 'wellness_level': wellnessLevel.toString(),
      if (summary != null) 'summary': summary,
      if (insights != null) 'insights': insights,
      if (status != null) 'status': status,
      if (currentQuestion != null) 'current_question': currentQuestion,
      if (totalQuestions != null) 'total_questions': totalQuestions,
      if (responses != null) 'responses': responses,
      if (completionPercentage != null)
        'completion_percentage': completionPercentage.toString(),
      if (startedAt != null) 'started_at': startedAt.toUtc().toIso8601String(),
      if (completedAt != null)
        'completed_at': completedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
      if (brief != null) 'brief': brief,
      if (insight != null) 'insight': insight,
      if (mood != null) 'mood': mood,
      if (questionsAsked != null) 'questions_asked': questionsAsked,
      if (categoryName != null) 'category_name': categoryName,
      if (categoryColor != null) 'category_color': categoryColor,
      if (categoryIcon != null) 'category_icon': categoryIcon,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
    String? categoryName,
    String? categoryColor,
    String? categoryIcon,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      userCategoryId: userCategoryId,
      wellnessLevel: wellnessLevel,
      summary: summary,
      insights: insights,
      status: status,
      currentQuestion: currentQuestion,
      totalQuestions: totalQuestions,
      responses: responses,
      completionPercentage: completionPercentage,
      startedAt: startedAt,
      completedAt: completedAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
      brief: brief,
      insight: insight,
      mood: mood,
      questionsAsked: questionsAsked,
      categoryName: categoryName,
      categoryColor: categoryColor,
      categoryIcon: categoryIcon,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
    String? categoryName,
    String? categoryColor,
    String? categoryIcon,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      userCategoryId: userCategoryId,
      wellnessLevel: wellnessLevel,
      summary: summary,
      insights: insights,
      status: status,
      currentQuestion: currentQuestion,
      totalQuestions: totalQuestions,
      responses: responses,
      completionPercentage: completionPercentage,
      startedAt: startedAt,
      completedAt: completedAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
      brief: brief,
      insight: insight,
      mood: mood,
      questionsAsked: questionsAsked,
      categoryName: categoryName,
      categoryColor: categoryColor,
      categoryIcon: categoryIcon,
    );
  }
  factory CheckinHistoryView.fromJson(Map<String, dynamic> jsonn) {
    return CheckinHistoryView(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      userCategoryId: jsonn['user_category_id'] != null
          ? jsonn['user_category_id'].toString()
          : null,
      wellnessLevel: jsonn['wellness_level'] != null
          ? num.parse(jsonn['wellness_level'].toString())
          : null,
      summary: jsonn['summary'] != null ? jsonn['summary'].toString() : null,
      insights: jsonn['insights'] != null ? jsonn['insights'].toString() : null,
      status: jsonn['status'] != null ? jsonn['status'].toString() : null,
      currentQuestion: jsonn['current_question'] != null
          ? int.parse(jsonn['current_question'].toString())
          : null,
      totalQuestions: jsonn['total_questions'] != null
          ? int.parse(jsonn['total_questions'].toString())
          : null,
      responses: jsonn['responses'] != null
          ? jsonn['responses'] as Map<String, dynamic>
          : null,
      completionPercentage: jsonn['completion_percentage'] != null
          ? num.parse(jsonn['completion_percentage'].toString())
          : null,
      startedAt: jsonn['started_at'] != null
          ? DateTime.parse(jsonn['started_at'].toString())
          : null,
      completedAt: jsonn['completed_at'] != null
          ? DateTime.parse(jsonn['completed_at'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      brief: jsonn['brief'] != null ? jsonn['brief'].toString() : null,
      insight: jsonn['insight'] != null ? jsonn['insight'].toString() : null,
      mood:
          jsonn['mood'] != null ? jsonn['mood'] as Map<String, dynamic> : null,
      questionsAsked: jsonn['questions_asked'] != null
          ? int.parse(jsonn['questions_asked'].toString())
          : null,
      categoryName: jsonn['category_name'] != null
          ? jsonn['category_name'].toString()
          : null,
      categoryColor: jsonn['category_color'] != null
          ? jsonn['category_color'].toString()
          : null,
      categoryIcon: jsonn['category_icon'] != null
          ? jsonn['category_icon'].toString()
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
    String? categoryName,
    String? categoryColor,
    String? categoryIcon,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (userCategoryId != null) 'user_category_id': userCategoryId,
      if (wellnessLevel != null) 'wellness_level': wellnessLevel,
      if (summary != null) 'summary': summary,
      if (insights != null) 'insights': insights,
      if (status != null) 'status': status,
      if (currentQuestion != null) 'current_question': currentQuestion,
      if (totalQuestions != null) 'total_questions': totalQuestions,
      if (responses != null) 'responses': responses,
      if (completionPercentage != null)
        'completion_percentage': completionPercentage,
      if (startedAt != null) 'started_at': startedAt,
      if (completedAt != null) 'completed_at': completedAt,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (metadata != null) 'metadata': metadata,
      if (brief != null) 'brief': brief,
      if (insight != null) 'insight': insight,
      if (mood != null) 'mood': mood,
      if (questionsAsked != null) 'questions_asked': questionsAsked,
      if (categoryName != null) 'category_name': categoryName,
      if (categoryColor != null) 'category_color': categoryColor,
      if (categoryIcon != null) 'category_icon': categoryIcon,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      userCategoryId: userCategoryId,
      wellnessLevel: wellnessLevel,
      summary: summary,
      insights: insights,
      status: status,
      currentQuestion: currentQuestion,
      totalQuestions: totalQuestions,
      responses: responses,
      completionPercentage: completionPercentage,
      startedAt: startedAt,
      completedAt: completedAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
      brief: brief,
      insight: insight,
      mood: mood,
      questionsAsked: questionsAsked,
      categoryName: categoryName,
      categoryColor: categoryColor,
      categoryIcon: categoryIcon,
    );
  }
  static const _unset = Object();
  CheckinHistoryView copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? userCategoryId = _unset,
    Object? wellnessLevel = _unset,
    Object? summary = _unset,
    Object? insights = _unset,
    Object? status = _unset,
    Object? currentQuestion = _unset,
    Object? totalQuestions = _unset,
    Object? responses = _unset,
    Object? completionPercentage = _unset,
    Object? startedAt = _unset,
    Object? completedAt = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? metadata = _unset,
    Object? brief = _unset,
    Object? insight = _unset,
    Object? mood = _unset,
    Object? questionsAsked = _unset,
    Object? categoryName = _unset,
    Object? categoryColor = _unset,
    Object? categoryIcon = _unset,
  }) {
    return CheckinHistoryView(
      id: id == _unset ? this.id : id as String?,
      userId: userId == _unset ? this.userId : userId as String?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      userCategoryId: userCategoryId == _unset
          ? this.userCategoryId
          : userCategoryId as String?,
      wellnessLevel:
          wellnessLevel == _unset ? this.wellnessLevel : wellnessLevel as num?,
      summary: summary == _unset ? this.summary : summary as String?,
      insights: insights == _unset ? this.insights : insights as String?,
      status: status == _unset ? this.status : status as String?,
      currentQuestion: currentQuestion == _unset
          ? this.currentQuestion
          : currentQuestion as int?,
      totalQuestions: totalQuestions == _unset
          ? this.totalQuestions
          : totalQuestions as int?,
      responses: responses == _unset
          ? this.responses
          : responses as Map<String, dynamic>?,
      completionPercentage: completionPercentage == _unset
          ? this.completionPercentage
          : completionPercentage as num?,
      startedAt: startedAt == _unset ? this.startedAt : startedAt as DateTime?,
      completedAt:
          completedAt == _unset ? this.completedAt : completedAt as DateTime?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      brief: brief == _unset ? this.brief : brief as String?,
      insight: insight == _unset ? this.insight : insight as String?,
      mood: mood == _unset ? this.mood : mood as Map<String, dynamic>?,
      questionsAsked: questionsAsked == _unset
          ? this.questionsAsked
          : questionsAsked as int?,
      categoryName:
          categoryName == _unset ? this.categoryName : categoryName as String?,
      categoryColor: categoryColor == _unset
          ? this.categoryColor
          : categoryColor as String?,
      categoryIcon:
          categoryIcon == _unset ? this.categoryIcon : categoryIcon as String?,
    );
  }
}

// test-typescheckins_with_answers.dart
class CheckinsWithAnswers implements SupadartClass<CheckinsWithAnswers> {
  final String? id;
  final String? userId;
  final String? categoryId;
  final String? userCategoryId;
  final num? wellnessLevel;
  final String? summary;
  final String? insights;
  final String? status;
  final int? currentQuestion;
  final int? totalQuestions;
  final Map<String, dynamic>? responses;
  final num? completionPercentage;
  final DateTime? startedAt;
  final DateTime? completedAt;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final Map<String, dynamic>? metadata;
  final String? brief;
  final String? insight;
  final Map<String, dynamic>? mood;
  final int? questionsAsked;
  final String? categoryName;
  final BigInt? answerCount;
  final List<Map<String, dynamic>>? answers;
  const CheckinsWithAnswers({
    this.id,
    this.userId,
    this.categoryId,
    this.userCategoryId,
    this.wellnessLevel,
    this.summary,
    this.insights,
    this.status,
    this.currentQuestion,
    this.totalQuestions,
    this.responses,
    this.completionPercentage,
    this.startedAt,
    this.completedAt,
    this.createdAt,
    this.updatedAt,
    this.metadata,
    this.brief,
    this.insight,
    this.mood,
    this.questionsAsked,
    this.categoryName,
    this.answerCount,
    this.answers,
  });
  static String get table_name => 'checkins_with_answers';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_userCategoryId => 'user_category_id';
  static String get c_wellnessLevel => 'wellness_level';
  static String get c_summary => 'summary';
  static String get c_insights => 'insights';
  static String get c_status => 'status';
  static String get c_currentQuestion => 'current_question';
  static String get c_totalQuestions => 'total_questions';
  static String get c_responses => 'responses';
  static String get c_completionPercentage => 'completion_percentage';
  static String get c_startedAt => 'started_at';
  static String get c_completedAt => 'completed_at';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_metadata => 'metadata';
  static String get c_brief => 'brief';
  static String get c_insight => 'insight';
  static String get c_mood => 'mood';
  static String get c_questionsAsked => 'questions_asked';
  static String get c_categoryName => 'category_name';
  static String get c_answerCount => 'answer_count';
  static String get c_answers => 'answers';
  static List<CheckinsWithAnswers> converter(List<Map<String, dynamic>> data) {
    return data.map(CheckinsWithAnswers.fromJson).toList();
  }
  static CheckinsWithAnswers converterSingle(Map<String, dynamic> data) {
    return CheckinsWithAnswers.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
    String? categoryName,
    BigInt? answerCount,
    List<Map<String, dynamic>>? answers,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (userCategoryId != null) 'user_category_id': userCategoryId,
      if (wellnessLevel != null) 'wellness_level': wellnessLevel.toString(),
      if (summary != null) 'summary': summary,
      if (insights != null) 'insights': insights,
      if (status != null) 'status': status,
      if (currentQuestion != null) 'current_question': currentQuestion,
      if (totalQuestions != null) 'total_questions': totalQuestions,
      if (responses != null) 'responses': responses,
      if (completionPercentage != null)
        'completion_percentage': completionPercentage.toString(),
      if (startedAt != null) 'started_at': startedAt.toUtc().toIso8601String(),
      if (completedAt != null)
        'completed_at': completedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
      if (brief != null) 'brief': brief,
      if (insight != null) 'insight': insight,
      if (mood != null) 'mood': mood,
      if (questionsAsked != null) 'questions_asked': questionsAsked,
      if (categoryName != null) 'category_name': categoryName,
      if (answerCount != null) 'answer_count': answerCount.toString(),
      if (answers != null)
        'answers': answers.map((e) => jsonEncode(e)).toList(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
    String? categoryName,
    BigInt? answerCount,
    List<Map<String, dynamic>>? answers,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      userCategoryId: userCategoryId,
      wellnessLevel: wellnessLevel,
      summary: summary,
      insights: insights,
      status: status,
      currentQuestion: currentQuestion,
      totalQuestions: totalQuestions,
      responses: responses,
      completionPercentage: completionPercentage,
      startedAt: startedAt,
      completedAt: completedAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
      brief: brief,
      insight: insight,
      mood: mood,
      questionsAsked: questionsAsked,
      categoryName: categoryName,
      answerCount: answerCount,
      answers: answers,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
    String? categoryName,
    BigInt? answerCount,
    List<Map<String, dynamic>>? answers,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      userCategoryId: userCategoryId,
      wellnessLevel: wellnessLevel,
      summary: summary,
      insights: insights,
      status: status,
      currentQuestion: currentQuestion,
      totalQuestions: totalQuestions,
      responses: responses,
      completionPercentage: completionPercentage,
      startedAt: startedAt,
      completedAt: completedAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
      brief: brief,
      insight: insight,
      mood: mood,
      questionsAsked: questionsAsked,
      categoryName: categoryName,
      answerCount: answerCount,
      answers: answers,
    );
  }
  factory CheckinsWithAnswers.fromJson(Map<String, dynamic> jsonn) {
    return CheckinsWithAnswers(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      userCategoryId: jsonn['user_category_id'] != null
          ? jsonn['user_category_id'].toString()
          : null,
      wellnessLevel: jsonn['wellness_level'] != null
          ? num.parse(jsonn['wellness_level'].toString())
          : null,
      summary: jsonn['summary'] != null ? jsonn['summary'].toString() : null,
      insights: jsonn['insights'] != null ? jsonn['insights'].toString() : null,
      status: jsonn['status'] != null ? jsonn['status'].toString() : null,
      currentQuestion: jsonn['current_question'] != null
          ? int.parse(jsonn['current_question'].toString())
          : null,
      totalQuestions: jsonn['total_questions'] != null
          ? int.parse(jsonn['total_questions'].toString())
          : null,
      responses: jsonn['responses'] != null
          ? jsonn['responses'] as Map<String, dynamic>
          : null,
      completionPercentage: jsonn['completion_percentage'] != null
          ? num.parse(jsonn['completion_percentage'].toString())
          : null,
      startedAt: jsonn['started_at'] != null
          ? DateTime.parse(jsonn['started_at'].toString())
          : null,
      completedAt: jsonn['completed_at'] != null
          ? DateTime.parse(jsonn['completed_at'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      brief: jsonn['brief'] != null ? jsonn['brief'].toString() : null,
      insight: jsonn['insight'] != null ? jsonn['insight'].toString() : null,
      mood:
          jsonn['mood'] != null ? jsonn['mood'] as Map<String, dynamic> : null,
      questionsAsked: jsonn['questions_asked'] != null
          ? int.parse(jsonn['questions_asked'].toString())
          : null,
      categoryName: jsonn['category_name'] != null
          ? jsonn['category_name'].toString()
          : null,
      answerCount: jsonn['answer_count'] != null
          ? BigInt.parse(jsonn['answer_count'].toString())
          : null,
      answers: jsonn['answers'] != null
          ? (jsonn['answers'] as List<dynamic>)
              .map((v) => json.decode(v) as Map<String, dynamic>)
              .toList()
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? userCategoryId,
    num? wellnessLevel,
    String? summary,
    String? insights,
    String? status,
    int? currentQuestion,
    int? totalQuestions,
    Map<String, dynamic>? responses,
    num? completionPercentage,
    DateTime? startedAt,
    DateTime? completedAt,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
    String? brief,
    String? insight,
    Map<String, dynamic>? mood,
    int? questionsAsked,
    String? categoryName,
    BigInt? answerCount,
    List<Map<String, dynamic>>? answers,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (userCategoryId != null) 'user_category_id': userCategoryId,
      if (wellnessLevel != null) 'wellness_level': wellnessLevel,
      if (summary != null) 'summary': summary,
      if (insights != null) 'insights': insights,
      if (status != null) 'status': status,
      if (currentQuestion != null) 'current_question': currentQuestion,
      if (totalQuestions != null) 'total_questions': totalQuestions,
      if (responses != null) 'responses': responses,
      if (completionPercentage != null)
        'completion_percentage': completionPercentage,
      if (startedAt != null) 'started_at': startedAt,
      if (completedAt != null) 'completed_at': completedAt,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (metadata != null) 'metadata': metadata,
      if (brief != null) 'brief': brief,
      if (insight != null) 'insight': insight,
      if (mood != null) 'mood': mood,
      if (questionsAsked != null) 'questions_asked': questionsAsked,
      if (categoryName != null) 'category_name': categoryName,
      if (answerCount != null) 'answer_count': answerCount,
      if (answers != null) 'answers': answers,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      userCategoryId: userCategoryId,
      wellnessLevel: wellnessLevel,
      summary: summary,
      insights: insights,
      status: status,
      currentQuestion: currentQuestion,
      totalQuestions: totalQuestions,
      responses: responses,
      completionPercentage: completionPercentage,
      startedAt: startedAt,
      completedAt: completedAt,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
      brief: brief,
      insight: insight,
      mood: mood,
      questionsAsked: questionsAsked,
      categoryName: categoryName,
      answerCount: answerCount,
      answers: answers,
    );
  }
  static const _unset = Object();
  CheckinsWithAnswers copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? userCategoryId = _unset,
    Object? wellnessLevel = _unset,
    Object? summary = _unset,
    Object? insights = _unset,
    Object? status = _unset,
    Object? currentQuestion = _unset,
    Object? totalQuestions = _unset,
    Object? responses = _unset,
    Object? completionPercentage = _unset,
    Object? startedAt = _unset,
    Object? completedAt = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? metadata = _unset,
    Object? brief = _unset,
    Object? insight = _unset,
    Object? mood = _unset,
    Object? questionsAsked = _unset,
    Object? categoryName = _unset,
    Object? answerCount = _unset,
    Object? answers = _unset,
  }) {
    return CheckinsWithAnswers(
      id: id == _unset ? this.id : id as String?,
      userId: userId == _unset ? this.userId : userId as String?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      userCategoryId: userCategoryId == _unset
          ? this.userCategoryId
          : userCategoryId as String?,
      wellnessLevel:
          wellnessLevel == _unset ? this.wellnessLevel : wellnessLevel as num?,
      summary: summary == _unset ? this.summary : summary as String?,
      insights: insights == _unset ? this.insights : insights as String?,
      status: status == _unset ? this.status : status as String?,
      currentQuestion: currentQuestion == _unset
          ? this.currentQuestion
          : currentQuestion as int?,
      totalQuestions: totalQuestions == _unset
          ? this.totalQuestions
          : totalQuestions as int?,
      responses: responses == _unset
          ? this.responses
          : responses as Map<String, dynamic>?,
      completionPercentage: completionPercentage == _unset
          ? this.completionPercentage
          : completionPercentage as num?,
      startedAt: startedAt == _unset ? this.startedAt : startedAt as DateTime?,
      completedAt:
          completedAt == _unset ? this.completedAt : completedAt as DateTime?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      brief: brief == _unset ? this.brief : brief as String?,
      insight: insight == _unset ? this.insight : insight as String?,
      mood: mood == _unset ? this.mood : mood as Map<String, dynamic>?,
      questionsAsked: questionsAsked == _unset
          ? this.questionsAsked
          : questionsAsked as int?,
      categoryName:
          categoryName == _unset ? this.categoryName : categoryName as String?,
      answerCount:
          answerCount == _unset ? this.answerCount : answerCount as BigInt?,
      answers: answers == _unset
          ? this.answers
          : answers as List<Map<String, dynamic>>?,
    );
  }
}

// test-typesmessages_with_coach.dart
class MessagesWithCoach implements SupadartClass<MessagesWithCoach> {
  final String? id;
  final String? userId;
  final String? categoryId;
  final String? parentMessageId;
  final String? role;
  final String? content;
  final String? contentType;
  final String? coachId;
  final Map<String, dynamic>? answerOptions;
  final Map<String, dynamic>? metadata;
  final int? tokensUsed;
  final DateTime? createdAt;
  final String? conversationId;
  final int? messageOrder;
  final String? refCategoryId;
  final String? refCheckinId;
  final String? refRecommendationId;
  final bool? isRead;
  final bool? aiProcessed;
  final int? aiResponseTimeMs;
  final String? senderName;
  final String? senderAvatar;
  const MessagesWithCoach({
    this.id,
    this.userId,
    this.categoryId,
    this.parentMessageId,
    this.role,
    this.content,
    this.contentType,
    this.coachId,
    this.answerOptions,
    this.metadata,
    this.tokensUsed,
    this.createdAt,
    this.conversationId,
    this.messageOrder,
    this.refCategoryId,
    this.refCheckinId,
    this.refRecommendationId,
    this.isRead,
    this.aiProcessed,
    this.aiResponseTimeMs,
    this.senderName,
    this.senderAvatar,
  });
  static String get table_name => 'messages_with_coach';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_parentMessageId => 'parent_message_id';
  static String get c_role => 'role';
  static String get c_content => 'content';
  static String get c_contentType => 'content_type';
  static String get c_coachId => 'coach_id';
  static String get c_answerOptions => 'answer_options';
  static String get c_metadata => 'metadata';
  static String get c_tokensUsed => 'tokens_used';
  static String get c_createdAt => 'created_at';
  static String get c_conversationId => 'conversation_id';
  static String get c_messageOrder => 'message_order';
  static String get c_refCategoryId => 'ref_category_id';
  static String get c_refCheckinId => 'ref_checkin_id';
  static String get c_refRecommendationId => 'ref_recommendation_id';
  static String get c_isRead => 'is_read';
  static String get c_aiProcessed => 'ai_processed';
  static String get c_aiResponseTimeMs => 'ai_response_time_ms';
  static String get c_senderName => 'sender_name';
  static String get c_senderAvatar => 'sender_avatar';
  static List<MessagesWithCoach> converter(List<Map<String, dynamic>> data) {
    return data.map(MessagesWithCoach.fromJson).toList();
  }
  static MessagesWithCoach converterSingle(Map<String, dynamic> data) {
    return MessagesWithCoach.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? parentMessageId,
    String? role,
    String? content,
    String? contentType,
    String? coachId,
    Map<String, dynamic>? answerOptions,
    Map<String, dynamic>? metadata,
    int? tokensUsed,
    DateTime? createdAt,
    String? conversationId,
    int? messageOrder,
    String? refCategoryId,
    String? refCheckinId,
    String? refRecommendationId,
    bool? isRead,
    bool? aiProcessed,
    int? aiResponseTimeMs,
    String? senderName,
    String? senderAvatar,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (parentMessageId != null) 'parent_message_id': parentMessageId,
      if (role != null) 'role': role,
      if (content != null) 'content': content,
      if (contentType != null) 'content_type': contentType,
      if (coachId != null) 'coach_id': coachId,
      if (answerOptions != null) 'answer_options': answerOptions,
      if (metadata != null) 'metadata': metadata,
      if (tokensUsed != null) 'tokens_used': tokensUsed,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (conversationId != null) 'conversation_id': conversationId,
      if (messageOrder != null) 'message_order': messageOrder,
      if (refCategoryId != null) 'ref_category_id': refCategoryId,
      if (refCheckinId != null) 'ref_checkin_id': refCheckinId,
      if (refRecommendationId != null)
        'ref_recommendation_id': refRecommendationId,
      if (isRead != null) 'is_read': isRead,
      if (aiProcessed != null) 'ai_processed': aiProcessed,
      if (aiResponseTimeMs != null) 'ai_response_time_ms': aiResponseTimeMs,
      if (senderName != null) 'sender_name': senderName,
      if (senderAvatar != null) 'sender_avatar': senderAvatar,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? categoryId,
    String? parentMessageId,
    String? role,
    String? content,
    String? contentType,
    String? coachId,
    Map<String, dynamic>? answerOptions,
    Map<String, dynamic>? metadata,
    int? tokensUsed,
    DateTime? createdAt,
    String? conversationId,
    int? messageOrder,
    String? refCategoryId,
    String? refCheckinId,
    String? refRecommendationId,
    bool? isRead,
    bool? aiProcessed,
    int? aiResponseTimeMs,
    String? senderName,
    String? senderAvatar,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      parentMessageId: parentMessageId,
      role: role,
      content: content,
      contentType: contentType,
      coachId: coachId,
      answerOptions: answerOptions,
      metadata: metadata,
      tokensUsed: tokensUsed,
      createdAt: createdAt,
      conversationId: conversationId,
      messageOrder: messageOrder,
      refCategoryId: refCategoryId,
      refCheckinId: refCheckinId,
      refRecommendationId: refRecommendationId,
      isRead: isRead,
      aiProcessed: aiProcessed,
      aiResponseTimeMs: aiResponseTimeMs,
      senderName: senderName,
      senderAvatar: senderAvatar,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? parentMessageId,
    String? role,
    String? content,
    String? contentType,
    String? coachId,
    Map<String, dynamic>? answerOptions,
    Map<String, dynamic>? metadata,
    int? tokensUsed,
    DateTime? createdAt,
    String? conversationId,
    int? messageOrder,
    String? refCategoryId,
    String? refCheckinId,
    String? refRecommendationId,
    bool? isRead,
    bool? aiProcessed,
    int? aiResponseTimeMs,
    String? senderName,
    String? senderAvatar,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      parentMessageId: parentMessageId,
      role: role,
      content: content,
      contentType: contentType,
      coachId: coachId,
      answerOptions: answerOptions,
      metadata: metadata,
      tokensUsed: tokensUsed,
      createdAt: createdAt,
      conversationId: conversationId,
      messageOrder: messageOrder,
      refCategoryId: refCategoryId,
      refCheckinId: refCheckinId,
      refRecommendationId: refRecommendationId,
      isRead: isRead,
      aiProcessed: aiProcessed,
      aiResponseTimeMs: aiResponseTimeMs,
      senderName: senderName,
      senderAvatar: senderAvatar,
    );
  }
  factory MessagesWithCoach.fromJson(Map<String, dynamic> jsonn) {
    return MessagesWithCoach(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      parentMessageId: jsonn['parent_message_id'] != null
          ? jsonn['parent_message_id'].toString()
          : null,
      role: jsonn['role'] != null ? jsonn['role'].toString() : null,
      content: jsonn['content'] != null ? jsonn['content'].toString() : null,
      contentType: jsonn['content_type'] != null
          ? jsonn['content_type'].toString()
          : null,
      coachId: jsonn['coach_id'] != null ? jsonn['coach_id'].toString() : null,
      answerOptions: jsonn['answer_options'] != null
          ? jsonn['answer_options'] as Map<String, dynamic>
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      tokensUsed: jsonn['tokens_used'] != null
          ? int.parse(jsonn['tokens_used'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      conversationId: jsonn['conversation_id'] != null
          ? jsonn['conversation_id'].toString()
          : null,
      messageOrder: jsonn['message_order'] != null
          ? int.parse(jsonn['message_order'].toString())
          : null,
      refCategoryId: jsonn['ref_category_id'] != null
          ? jsonn['ref_category_id'].toString()
          : null,
      refCheckinId: jsonn['ref_checkin_id'] != null
          ? jsonn['ref_checkin_id'].toString()
          : null,
      refRecommendationId: jsonn['ref_recommendation_id'] != null
          ? jsonn['ref_recommendation_id'].toString()
          : null,
      isRead: jsonn['is_read'] != null ? jsonn['is_read'] as bool : null,
      aiProcessed:
          jsonn['ai_processed'] != null ? jsonn['ai_processed'] as bool : null,
      aiResponseTimeMs: jsonn['ai_response_time_ms'] != null
          ? int.parse(jsonn['ai_response_time_ms'].toString())
          : null,
      senderName:
          jsonn['sender_name'] != null ? jsonn['sender_name'].toString() : null,
      senderAvatar: jsonn['sender_avatar'] != null
          ? jsonn['sender_avatar'].toString()
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? parentMessageId,
    String? role,
    String? content,
    String? contentType,
    String? coachId,
    Map<String, dynamic>? answerOptions,
    Map<String, dynamic>? metadata,
    int? tokensUsed,
    DateTime? createdAt,
    String? conversationId,
    int? messageOrder,
    String? refCategoryId,
    String? refCheckinId,
    String? refRecommendationId,
    bool? isRead,
    bool? aiProcessed,
    int? aiResponseTimeMs,
    String? senderName,
    String? senderAvatar,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (parentMessageId != null) 'parent_message_id': parentMessageId,
      if (role != null) 'role': role,
      if (content != null) 'content': content,
      if (contentType != null) 'content_type': contentType,
      if (coachId != null) 'coach_id': coachId,
      if (answerOptions != null) 'answer_options': answerOptions,
      if (metadata != null) 'metadata': metadata,
      if (tokensUsed != null) 'tokens_used': tokensUsed,
      if (createdAt != null) 'created_at': createdAt,
      if (conversationId != null) 'conversation_id': conversationId,
      if (messageOrder != null) 'message_order': messageOrder,
      if (refCategoryId != null) 'ref_category_id': refCategoryId,
      if (refCheckinId != null) 'ref_checkin_id': refCheckinId,
      if (refRecommendationId != null)
        'ref_recommendation_id': refRecommendationId,
      if (isRead != null) 'is_read': isRead,
      if (aiProcessed != null) 'ai_processed': aiProcessed,
      if (aiResponseTimeMs != null) 'ai_response_time_ms': aiResponseTimeMs,
      if (senderName != null) 'sender_name': senderName,
      if (senderAvatar != null) 'sender_avatar': senderAvatar,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      parentMessageId: parentMessageId,
      role: role,
      content: content,
      contentType: contentType,
      coachId: coachId,
      answerOptions: answerOptions,
      metadata: metadata,
      tokensUsed: tokensUsed,
      createdAt: createdAt,
      conversationId: conversationId,
      messageOrder: messageOrder,
      refCategoryId: refCategoryId,
      refCheckinId: refCheckinId,
      refRecommendationId: refRecommendationId,
      isRead: isRead,
      aiProcessed: aiProcessed,
      aiResponseTimeMs: aiResponseTimeMs,
      senderName: senderName,
      senderAvatar: senderAvatar,
    );
  }
  static const _unset = Object();
  MessagesWithCoach copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? parentMessageId = _unset,
    Object? role = _unset,
    Object? content = _unset,
    Object? contentType = _unset,
    Object? coachId = _unset,
    Object? answerOptions = _unset,
    Object? metadata = _unset,
    Object? tokensUsed = _unset,
    Object? createdAt = _unset,
    Object? conversationId = _unset,
    Object? messageOrder = _unset,
    Object? refCategoryId = _unset,
    Object? refCheckinId = _unset,
    Object? refRecommendationId = _unset,
    Object? isRead = _unset,
    Object? aiProcessed = _unset,
    Object? aiResponseTimeMs = _unset,
    Object? senderName = _unset,
    Object? senderAvatar = _unset,
  }) {
    return MessagesWithCoach(
      id: id == _unset ? this.id : id as String?,
      userId: userId == _unset ? this.userId : userId as String?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      parentMessageId: parentMessageId == _unset
          ? this.parentMessageId
          : parentMessageId as String?,
      role: role == _unset ? this.role : role as String?,
      content: content == _unset ? this.content : content as String?,
      contentType:
          contentType == _unset ? this.contentType : contentType as String?,
      coachId: coachId == _unset ? this.coachId : coachId as String?,
      answerOptions: answerOptions == _unset
          ? this.answerOptions
          : answerOptions as Map<String, dynamic>?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      tokensUsed: tokensUsed == _unset ? this.tokensUsed : tokensUsed as int?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      conversationId: conversationId == _unset
          ? this.conversationId
          : conversationId as String?,
      messageOrder:
          messageOrder == _unset ? this.messageOrder : messageOrder as int?,
      refCategoryId: refCategoryId == _unset
          ? this.refCategoryId
          : refCategoryId as String?,
      refCheckinId:
          refCheckinId == _unset ? this.refCheckinId : refCheckinId as String?,
      refRecommendationId: refRecommendationId == _unset
          ? this.refRecommendationId
          : refRecommendationId as String?,
      isRead: isRead == _unset ? this.isRead : isRead as bool?,
      aiProcessed:
          aiProcessed == _unset ? this.aiProcessed : aiProcessed as bool?,
      aiResponseTimeMs: aiResponseTimeMs == _unset
          ? this.aiResponseTimeMs
          : aiResponseTimeMs as int?,
      senderName:
          senderName == _unset ? this.senderName : senderName as String?,
      senderAvatar:
          senderAvatar == _unset ? this.senderAvatar : senderAvatar as String?,
    );
  }
}

// test-typesmobile_recommendations_feed.dart
class MobileRecommendationsFeed
    implements SupadartClass<MobileRecommendationsFeed> {
  final String? id;
  final String? userId;
  final String? title;
  final String? recommendationText;
  final String? action;
  final String? why;
  final String? recommendationType;
  final int? importance;
  final num? relevance;
  final bool? isActive;
  final DateTime? createdAt;
  final String? categoryId;
  final String? categoryName;
  final String? categoryColor;
  final String? categoryIcon;
  const MobileRecommendationsFeed({
    this.id,
    this.userId,
    this.title,
    this.recommendationText,
    this.action,
    this.why,
    this.recommendationType,
    this.importance,
    this.relevance,
    this.isActive,
    this.createdAt,
    this.categoryId,
    this.categoryName,
    this.categoryColor,
    this.categoryIcon,
  });
  static String get table_name => 'mobile_recommendations_feed';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_title => 'title';
  static String get c_recommendationText => 'recommendation_text';
  static String get c_action => 'action';
  static String get c_why => 'why';
  static String get c_recommendationType => 'recommendation_type';
  static String get c_importance => 'importance';
  static String get c_relevance => 'relevance';
  static String get c_isActive => 'is_active';
  static String get c_createdAt => 'created_at';
  static String get c_categoryId => 'category_id';
  static String get c_categoryName => 'category_name';
  static String get c_categoryColor => 'category_color';
  static String get c_categoryIcon => 'category_icon';
  static List<MobileRecommendationsFeed> converter(
      List<Map<String, dynamic>> data) {
    return data.map(MobileRecommendationsFeed.fromJson).toList();
  }
  static MobileRecommendationsFeed converterSingle(Map<String, dynamic> data) {
    return MobileRecommendationsFeed.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    bool? isActive,
    DateTime? createdAt,
    String? categoryId,
    String? categoryName,
    String? categoryColor,
    String? categoryIcon,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance.toString(),
      if (isActive != null) 'is_active': isActive,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (categoryId != null) 'category_id': categoryId,
      if (categoryName != null) 'category_name': categoryName,
      if (categoryColor != null) 'category_color': categoryColor,
      if (categoryIcon != null) 'category_icon': categoryIcon,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    bool? isActive,
    DateTime? createdAt,
    String? categoryId,
    String? categoryName,
    String? categoryColor,
    String? categoryIcon,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      isActive: isActive,
      createdAt: createdAt,
      categoryId: categoryId,
      categoryName: categoryName,
      categoryColor: categoryColor,
      categoryIcon: categoryIcon,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    bool? isActive,
    DateTime? createdAt,
    String? categoryId,
    String? categoryName,
    String? categoryColor,
    String? categoryIcon,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      isActive: isActive,
      createdAt: createdAt,
      categoryId: categoryId,
      categoryName: categoryName,
      categoryColor: categoryColor,
      categoryIcon: categoryIcon,
    );
  }
  factory MobileRecommendationsFeed.fromJson(Map<String, dynamic> jsonn) {
    return MobileRecommendationsFeed(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      title: jsonn['title'] != null ? jsonn['title'].toString() : null,
      recommendationText: jsonn['recommendation_text'] != null
          ? jsonn['recommendation_text'].toString()
          : null,
      action: jsonn['action'] != null ? jsonn['action'].toString() : null,
      why: jsonn['why'] != null ? jsonn['why'].toString() : null,
      recommendationType: jsonn['recommendation_type'] != null
          ? jsonn['recommendation_type'].toString()
          : null,
      importance: jsonn['importance'] != null
          ? int.parse(jsonn['importance'].toString())
          : null,
      relevance: jsonn['relevance'] != null
          ? num.parse(jsonn['relevance'].toString())
          : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      categoryName: jsonn['category_name'] != null
          ? jsonn['category_name'].toString()
          : null,
      categoryColor: jsonn['category_color'] != null
          ? jsonn['category_color'].toString()
          : null,
      categoryIcon: jsonn['category_icon'] != null
          ? jsonn['category_icon'].toString()
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    bool? isActive,
    DateTime? createdAt,
    String? categoryId,
    String? categoryName,
    String? categoryColor,
    String? categoryIcon,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance,
      if (isActive != null) 'is_active': isActive,
      if (createdAt != null) 'created_at': createdAt,
      if (categoryId != null) 'category_id': categoryId,
      if (categoryName != null) 'category_name': categoryName,
      if (categoryColor != null) 'category_color': categoryColor,
      if (categoryIcon != null) 'category_icon': categoryIcon,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      isActive: isActive,
      createdAt: createdAt,
      categoryId: categoryId,
      categoryName: categoryName,
      categoryColor: categoryColor,
      categoryIcon: categoryIcon,
    );
  }
  static const _unset = Object();
  MobileRecommendationsFeed copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? title = _unset,
    Object? recommendationText = _unset,
    Object? action = _unset,
    Object? why = _unset,
    Object? recommendationType = _unset,
    Object? importance = _unset,
    Object? relevance = _unset,
    Object? isActive = _unset,
    Object? createdAt = _unset,
    Object? categoryId = _unset,
    Object? categoryName = _unset,
    Object? categoryColor = _unset,
    Object? categoryIcon = _unset,
  }) {
    return MobileRecommendationsFeed(
      id: id == _unset ? this.id : id as String?,
      userId: userId == _unset ? this.userId : userId as String?,
      title: title == _unset ? this.title : title as String?,
      recommendationText: recommendationText == _unset
          ? this.recommendationText
          : recommendationText as String?,
      action: action == _unset ? this.action : action as String?,
      why: why == _unset ? this.why : why as String?,
      recommendationType: recommendationType == _unset
          ? this.recommendationType
          : recommendationType as String?,
      importance: importance == _unset ? this.importance : importance as int?,
      relevance: relevance == _unset ? this.relevance : relevance as num?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      categoryName:
          categoryName == _unset ? this.categoryName : categoryName as String?,
      categoryColor: categoryColor == _unset
          ? this.categoryColor
          : categoryColor as String?,
      categoryIcon:
          categoryIcon == _unset ? this.categoryIcon : categoryIcon as String?,
    );
  }
}

// test-typesmobile_user_dashboard.dart
class MobileUserDashboard implements SupadartClass<MobileUserDashboard> {
  final String? userId;
  final String? firstName;
  final String? lastName;
  final String? profileImage;
  final String? coachId;
  final String? coachName;
  final String? coachImage;
  final BigInt? activeRecommendations;
  final BigInt? unreadMessages;
  final BigInt? completedCheckins;
  final DateTime? memberSince;
  const MobileUserDashboard({
    this.userId,
    this.firstName,
    this.lastName,
    this.profileImage,
    this.coachId,
    this.coachName,
    this.coachImage,
    this.activeRecommendations,
    this.unreadMessages,
    this.completedCheckins,
    this.memberSince,
  });
  static String get table_name => 'mobile_user_dashboard';
  static String get c_userId => 'user_id';
  static String get c_firstName => 'first_name';
  static String get c_lastName => 'last_name';
  static String get c_profileImage => 'profile_image';
  static String get c_coachId => 'coach_id';
  static String get c_coachName => 'coach_name';
  static String get c_coachImage => 'coach_image';
  static String get c_activeRecommendations => 'active_recommendations';
  static String get c_unreadMessages => 'unread_messages';
  static String get c_completedCheckins => 'completed_checkins';
  static String get c_memberSince => 'member_since';
  static List<MobileUserDashboard> converter(List<Map<String, dynamic>> data) {
    return data.map(MobileUserDashboard.fromJson).toList();
  }
  static MobileUserDashboard converterSingle(Map<String, dynamic> data) {
    return MobileUserDashboard.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? userId,
    String? firstName,
    String? lastName,
    String? profileImage,
    String? coachId,
    String? coachName,
    String? coachImage,
    BigInt? activeRecommendations,
    BigInt? unreadMessages,
    BigInt? completedCheckins,
    DateTime? memberSince,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (profileImage != null) 'profile_image': profileImage,
      if (coachId != null) 'coach_id': coachId,
      if (coachName != null) 'coach_name': coachName,
      if (coachImage != null) 'coach_image': coachImage,
      if (activeRecommendations != null)
        'active_recommendations': activeRecommendations.toString(),
      if (unreadMessages != null) 'unread_messages': unreadMessages.toString(),
      if (completedCheckins != null)
        'completed_checkins': completedCheckins.toString(),
      if (memberSince != null)
        'member_since': memberSince.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? userId,
    String? firstName,
    String? lastName,
    String? profileImage,
    String? coachId,
    String? coachName,
    String? coachImage,
    BigInt? activeRecommendations,
    BigInt? unreadMessages,
    BigInt? completedCheckins,
    DateTime? memberSince,
  }) {
    return _generateMap(
      userId: userId,
      firstName: firstName,
      lastName: lastName,
      profileImage: profileImage,
      coachId: coachId,
      coachName: coachName,
      coachImage: coachImage,
      activeRecommendations: activeRecommendations,
      unreadMessages: unreadMessages,
      completedCheckins: completedCheckins,
      memberSince: memberSince,
    );
  }
  static Map<String, dynamic> update({
    String? userId,
    String? firstName,
    String? lastName,
    String? profileImage,
    String? coachId,
    String? coachName,
    String? coachImage,
    BigInt? activeRecommendations,
    BigInt? unreadMessages,
    BigInt? completedCheckins,
    DateTime? memberSince,
  }) {
    return _generateMap(
      userId: userId,
      firstName: firstName,
      lastName: lastName,
      profileImage: profileImage,
      coachId: coachId,
      coachName: coachName,
      coachImage: coachImage,
      activeRecommendations: activeRecommendations,
      unreadMessages: unreadMessages,
      completedCheckins: completedCheckins,
      memberSince: memberSince,
    );
  }
  factory MobileUserDashboard.fromJson(Map<String, dynamic> jsonn) {
    return MobileUserDashboard(
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      firstName:
          jsonn['first_name'] != null ? jsonn['first_name'].toString() : null,
      lastName:
          jsonn['last_name'] != null ? jsonn['last_name'].toString() : null,
      profileImage: jsonn['profile_image'] != null
          ? jsonn['profile_image'].toString()
          : null,
      coachId: jsonn['coach_id'] != null ? jsonn['coach_id'].toString() : null,
      coachName:
          jsonn['coach_name'] != null ? jsonn['coach_name'].toString() : null,
      coachImage:
          jsonn['coach_image'] != null ? jsonn['coach_image'].toString() : null,
      activeRecommendations: jsonn['active_recommendations'] != null
          ? BigInt.parse(jsonn['active_recommendations'].toString())
          : null,
      unreadMessages: jsonn['unread_messages'] != null
          ? BigInt.parse(jsonn['unread_messages'].toString())
          : null,
      completedCheckins: jsonn['completed_checkins'] != null
          ? BigInt.parse(jsonn['completed_checkins'].toString())
          : null,
      memberSince: jsonn['member_since'] != null
          ? DateTime.parse(jsonn['member_since'].toString())
          : null,
    );
  }
  static Object New({
    String? userId,
    String? firstName,
    String? lastName,
    String? profileImage,
    String? coachId,
    String? coachName,
    String? coachImage,
    BigInt? activeRecommendations,
    BigInt? unreadMessages,
    BigInt? completedCheckins,
    DateTime? memberSince,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (profileImage != null) 'profile_image': profileImage,
      if (coachId != null) 'coach_id': coachId,
      if (coachName != null) 'coach_name': coachName,
      if (coachImage != null) 'coach_image': coachImage,
      if (activeRecommendations != null)
        'active_recommendations': activeRecommendations,
      if (unreadMessages != null) 'unread_messages': unreadMessages,
      if (completedCheckins != null) 'completed_checkins': completedCheckins,
      if (memberSince != null) 'member_since': memberSince,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      userId: userId,
      firstName: firstName,
      lastName: lastName,
      profileImage: profileImage,
      coachId: coachId,
      coachName: coachName,
      coachImage: coachImage,
      activeRecommendations: activeRecommendations,
      unreadMessages: unreadMessages,
      completedCheckins: completedCheckins,
      memberSince: memberSince,
    );
  }
  static const _unset = Object();
  MobileUserDashboard copyWith({
    Object? userId = _unset,
    Object? firstName = _unset,
    Object? lastName = _unset,
    Object? profileImage = _unset,
    Object? coachId = _unset,
    Object? coachName = _unset,
    Object? coachImage = _unset,
    Object? activeRecommendations = _unset,
    Object? unreadMessages = _unset,
    Object? completedCheckins = _unset,
    Object? memberSince = _unset,
  }) {
    return MobileUserDashboard(
      userId: userId == _unset ? this.userId : userId as String?,
      firstName: firstName == _unset ? this.firstName : firstName as String?,
      lastName: lastName == _unset ? this.lastName : lastName as String?,
      profileImage:
          profileImage == _unset ? this.profileImage : profileImage as String?,
      coachId: coachId == _unset ? this.coachId : coachId as String?,
      coachName: coachName == _unset ? this.coachName : coachName as String?,
      coachImage:
          coachImage == _unset ? this.coachImage : coachImage as String?,
      activeRecommendations: activeRecommendations == _unset
          ? this.activeRecommendations
          : activeRecommendations as BigInt?,
      unreadMessages: unreadMessages == _unset
          ? this.unreadMessages
          : unreadMessages as BigInt?,
      completedCheckins: completedCheckins == _unset
          ? this.completedCheckins
          : completedCheckins as BigInt?,
      memberSince:
          memberSince == _unset ? this.memberSince : memberSince as DateTime?,
    );
  }
}

// test-typesrecommendations_with_children.dart
class RecommendationsWithChildren
    implements SupadartClass<RecommendationsWithChildren> {
  final String? id;
  final String? userId;
  final String? categoryId;
  final String? checkinMessageId;
  final String? parentRecommendationId;
  final String? title;
  final String? recommendationText;
  final String? action;
  final String? why;
  final String? recommendationType;
  final int? importance;
  final num? relevance;
  final List<String>? recommendedCategories;
  final String? context;
  final bool? isActive;
  final DateTime? viewedAt;
  final DateTime? dismissedAt;
  final DateTime? createdAt;
  final Map<String, dynamic>? metadata;
  final DateTime? expiresAt;
  final int? level;
  final int? viewCount;
  final DateTime? lastViewedAt;
  final Map<String, dynamic>? children;
  const RecommendationsWithChildren({
    this.id,
    this.userId,
    this.categoryId,
    this.checkinMessageId,
    this.parentRecommendationId,
    this.title,
    this.recommendationText,
    this.action,
    this.why,
    this.recommendationType,
    this.importance,
    this.relevance,
    this.recommendedCategories,
    this.context,
    this.isActive,
    this.viewedAt,
    this.dismissedAt,
    this.createdAt,
    this.metadata,
    this.expiresAt,
    this.level,
    this.viewCount,
    this.lastViewedAt,
    this.children,
  });
  static String get table_name => 'recommendations_with_children';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_categoryId => 'category_id';
  static String get c_checkinMessageId => 'checkin_message_id';
  static String get c_parentRecommendationId => 'parent_recommendation_id';
  static String get c_title => 'title';
  static String get c_recommendationText => 'recommendation_text';
  static String get c_action => 'action';
  static String get c_why => 'why';
  static String get c_recommendationType => 'recommendation_type';
  static String get c_importance => 'importance';
  static String get c_relevance => 'relevance';
  static String get c_recommendedCategories => 'recommended_categories';
  static String get c_context => 'context';
  static String get c_isActive => 'is_active';
  static String get c_viewedAt => 'viewed_at';
  static String get c_dismissedAt => 'dismissed_at';
  static String get c_createdAt => 'created_at';
  static String get c_metadata => 'metadata';
  static String get c_expiresAt => 'expires_at';
  static String get c_level => 'level';
  static String get c_viewCount => 'view_count';
  static String get c_lastViewedAt => 'last_viewed_at';
  static String get c_children => 'children';
  static List<RecommendationsWithChildren> converter(
      List<Map<String, dynamic>> data) {
    return data.map(RecommendationsWithChildren.fromJson).toList();
  }
  static RecommendationsWithChildren converterSingle(
      Map<String, dynamic> data) {
    return RecommendationsWithChildren.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    int? level,
    int? viewCount,
    DateTime? lastViewedAt,
    Map<String, dynamic>? children,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinMessageId != null) 'checkin_message_id': checkinMessageId,
      if (parentRecommendationId != null)
        'parent_recommendation_id': parentRecommendationId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance.toString(),
      if (recommendedCategories != null)
        'recommended_categories': recommendedCategories.map((e) => e).toList(),
      if (context != null) 'context': context,
      if (isActive != null) 'is_active': isActive,
      if (viewedAt != null) 'viewed_at': viewedAt.toUtc().toIso8601String(),
      if (dismissedAt != null)
        'dismissed_at': dismissedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
      if (expiresAt != null) 'expires_at': expiresAt.toUtc().toIso8601String(),
      if (level != null) 'level': level,
      if (viewCount != null) 'view_count': viewCount,
      if (lastViewedAt != null)
        'last_viewed_at': lastViewedAt.toUtc().toIso8601String(),
      if (children != null) 'children': children,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    int? level,
    int? viewCount,
    DateTime? lastViewedAt,
    Map<String, dynamic>? children,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      expiresAt: expiresAt,
      level: level,
      viewCount: viewCount,
      lastViewedAt: lastViewedAt,
      children: children,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    int? level,
    int? viewCount,
    DateTime? lastViewedAt,
    Map<String, dynamic>? children,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      expiresAt: expiresAt,
      level: level,
      viewCount: viewCount,
      lastViewedAt: lastViewedAt,
      children: children,
    );
  }
  factory RecommendationsWithChildren.fromJson(Map<String, dynamic> jsonn) {
    return RecommendationsWithChildren(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      categoryId:
          jsonn['category_id'] != null ? jsonn['category_id'].toString() : null,
      checkinMessageId: jsonn['checkin_message_id'] != null
          ? jsonn['checkin_message_id'].toString()
          : null,
      parentRecommendationId: jsonn['parent_recommendation_id'] != null
          ? jsonn['parent_recommendation_id'].toString()
          : null,
      title: jsonn['title'] != null ? jsonn['title'].toString() : null,
      recommendationText: jsonn['recommendation_text'] != null
          ? jsonn['recommendation_text'].toString()
          : null,
      action: jsonn['action'] != null ? jsonn['action'].toString() : null,
      why: jsonn['why'] != null ? jsonn['why'].toString() : null,
      recommendationType: jsonn['recommendation_type'] != null
          ? jsonn['recommendation_type'].toString()
          : null,
      importance: jsonn['importance'] != null
          ? int.parse(jsonn['importance'].toString())
          : null,
      relevance: jsonn['relevance'] != null
          ? num.parse(jsonn['relevance'].toString())
          : null,
      recommendedCategories: jsonn['recommended_categories'] != null
          ? (jsonn['recommended_categories'] as List<dynamic>)
              .map((v) => v.toString())
              .toList()
          : null,
      context: jsonn['context'] != null ? jsonn['context'].toString() : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      viewedAt: jsonn['viewed_at'] != null
          ? DateTime.parse(jsonn['viewed_at'].toString())
          : null,
      dismissedAt: jsonn['dismissed_at'] != null
          ? DateTime.parse(jsonn['dismissed_at'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      expiresAt: jsonn['expires_at'] != null
          ? DateTime.parse(jsonn['expires_at'].toString())
          : null,
      level:
          jsonn['level'] != null ? int.parse(jsonn['level'].toString()) : null,
      viewCount: jsonn['view_count'] != null
          ? int.parse(jsonn['view_count'].toString())
          : null,
      lastViewedAt: jsonn['last_viewed_at'] != null
          ? DateTime.parse(jsonn['last_viewed_at'].toString())
          : null,
      children: jsonn['children'] != null
          ? jsonn['children'] as Map<String, dynamic>
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? categoryId,
    String? checkinMessageId,
    String? parentRecommendationId,
    String? title,
    String? recommendationText,
    String? action,
    String? why,
    String? recommendationType,
    int? importance,
    num? relevance,
    List<String>? recommendedCategories,
    String? context,
    bool? isActive,
    DateTime? viewedAt,
    DateTime? dismissedAt,
    DateTime? createdAt,
    Map<String, dynamic>? metadata,
    DateTime? expiresAt,
    int? level,
    int? viewCount,
    DateTime? lastViewedAt,
    Map<String, dynamic>? children,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (categoryId != null) 'category_id': categoryId,
      if (checkinMessageId != null) 'checkin_message_id': checkinMessageId,
      if (parentRecommendationId != null)
        'parent_recommendation_id': parentRecommendationId,
      if (title != null) 'title': title,
      if (recommendationText != null) 'recommendation_text': recommendationText,
      if (action != null) 'action': action,
      if (why != null) 'why': why,
      if (recommendationType != null) 'recommendation_type': recommendationType,
      if (importance != null) 'importance': importance,
      if (relevance != null) 'relevance': relevance,
      if (recommendedCategories != null)
        'recommended_categories': recommendedCategories,
      if (context != null) 'context': context,
      if (isActive != null) 'is_active': isActive,
      if (viewedAt != null) 'viewed_at': viewedAt,
      if (dismissedAt != null) 'dismissed_at': dismissedAt,
      if (createdAt != null) 'created_at': createdAt,
      if (metadata != null) 'metadata': metadata,
      if (expiresAt != null) 'expires_at': expiresAt,
      if (level != null) 'level': level,
      if (viewCount != null) 'view_count': viewCount,
      if (lastViewedAt != null) 'last_viewed_at': lastViewedAt,
      if (children != null) 'children': children,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      categoryId: categoryId,
      checkinMessageId: checkinMessageId,
      parentRecommendationId: parentRecommendationId,
      title: title,
      recommendationText: recommendationText,
      action: action,
      why: why,
      recommendationType: recommendationType,
      importance: importance,
      relevance: relevance,
      recommendedCategories: recommendedCategories,
      context: context,
      isActive: isActive,
      viewedAt: viewedAt,
      dismissedAt: dismissedAt,
      createdAt: createdAt,
      metadata: metadata,
      expiresAt: expiresAt,
      level: level,
      viewCount: viewCount,
      lastViewedAt: lastViewedAt,
      children: children,
    );
  }
  static const _unset = Object();
  RecommendationsWithChildren copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? categoryId = _unset,
    Object? checkinMessageId = _unset,
    Object? parentRecommendationId = _unset,
    Object? title = _unset,
    Object? recommendationText = _unset,
    Object? action = _unset,
    Object? why = _unset,
    Object? recommendationType = _unset,
    Object? importance = _unset,
    Object? relevance = _unset,
    Object? recommendedCategories = _unset,
    Object? context = _unset,
    Object? isActive = _unset,
    Object? viewedAt = _unset,
    Object? dismissedAt = _unset,
    Object? createdAt = _unset,
    Object? metadata = _unset,
    Object? expiresAt = _unset,
    Object? level = _unset,
    Object? viewCount = _unset,
    Object? lastViewedAt = _unset,
    Object? children = _unset,
  }) {
    return RecommendationsWithChildren(
      id: id == _unset ? this.id : id as String?,
      userId: userId == _unset ? this.userId : userId as String?,
      categoryId:
          categoryId == _unset ? this.categoryId : categoryId as String?,
      checkinMessageId: checkinMessageId == _unset
          ? this.checkinMessageId
          : checkinMessageId as String?,
      parentRecommendationId: parentRecommendationId == _unset
          ? this.parentRecommendationId
          : parentRecommendationId as String?,
      title: title == _unset ? this.title : title as String?,
      recommendationText: recommendationText == _unset
          ? this.recommendationText
          : recommendationText as String?,
      action: action == _unset ? this.action : action as String?,
      why: why == _unset ? this.why : why as String?,
      recommendationType: recommendationType == _unset
          ? this.recommendationType
          : recommendationType as String?,
      importance: importance == _unset ? this.importance : importance as int?,
      relevance: relevance == _unset ? this.relevance : relevance as num?,
      recommendedCategories: recommendedCategories == _unset
          ? this.recommendedCategories
          : recommendedCategories as List<String>?,
      context: context == _unset ? this.context : context as String?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      viewedAt: viewedAt == _unset ? this.viewedAt : viewedAt as DateTime?,
      dismissedAt:
          dismissedAt == _unset ? this.dismissedAt : dismissedAt as DateTime?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      expiresAt: expiresAt == _unset ? this.expiresAt : expiresAt as DateTime?,
      level: level == _unset ? this.level : level as int?,
      viewCount: viewCount == _unset ? this.viewCount : viewCount as int?,
      lastViewedAt: lastViewedAt == _unset
          ? this.lastViewedAt
          : lastViewedAt as DateTime?,
      children: children == _unset
          ? this.children
          : children as Map<String, dynamic>?,
    );
  }
}

// test-typesuser_audio_analytics.dart
class UserAudioAnalytics implements SupadartClass<UserAudioAnalytics> {
  final String? userId;
  final DateTime? date;
  final BigInt? totalRequests;
  final BigInt? successfulRequests;
  final BigInt? failedRequests;
  final BigInt? totalBytesProcessed;
  final int? avgProcessingTimeMs;
  final BigInt? totalCharactersTranscribed;
  final int? avgTranscriptionLength;
  const UserAudioAnalytics({
    this.userId,
    this.date,
    this.totalRequests,
    this.successfulRequests,
    this.failedRequests,
    this.totalBytesProcessed,
    this.avgProcessingTimeMs,
    this.totalCharactersTranscribed,
    this.avgTranscriptionLength,
  });
  static String get table_name => 'user_audio_analytics';
  static String get c_userId => 'user_id';
  static String get c_date => 'date';
  static String get c_totalRequests => 'total_requests';
  static String get c_successfulRequests => 'successful_requests';
  static String get c_failedRequests => 'failed_requests';
  static String get c_totalBytesProcessed => 'total_bytes_processed';
  static String get c_avgProcessingTimeMs => 'avg_processing_time_ms';
  static String get c_totalCharactersTranscribed =>
      'total_characters_transcribed';
  static String get c_avgTranscriptionLength => 'avg_transcription_length';
  static List<UserAudioAnalytics> converter(List<Map<String, dynamic>> data) {
    return data.map(UserAudioAnalytics.fromJson).toList();
  }
  static UserAudioAnalytics converterSingle(Map<String, dynamic> data) {
    return UserAudioAnalytics.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? userId,
    DateTime? date,
    BigInt? totalRequests,
    BigInt? successfulRequests,
    BigInt? failedRequests,
    BigInt? totalBytesProcessed,
    int? avgProcessingTimeMs,
    BigInt? totalCharactersTranscribed,
    int? avgTranscriptionLength,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (date != null) 'date': date.toUtc().toIso8601String(),
      if (totalRequests != null) 'total_requests': totalRequests.toString(),
      if (successfulRequests != null)
        'successful_requests': successfulRequests.toString(),
      if (failedRequests != null) 'failed_requests': failedRequests.toString(),
      if (totalBytesProcessed != null)
        'total_bytes_processed': totalBytesProcessed.toString(),
      if (avgProcessingTimeMs != null)
        'avg_processing_time_ms': avgProcessingTimeMs,
      if (totalCharactersTranscribed != null)
        'total_characters_transcribed': totalCharactersTranscribed.toString(),
      if (avgTranscriptionLength != null)
        'avg_transcription_length': avgTranscriptionLength,
    };
  }
  static Map<String, dynamic> insert({
    String? userId,
    DateTime? date,
    BigInt? totalRequests,
    BigInt? successfulRequests,
    BigInt? failedRequests,
    BigInt? totalBytesProcessed,
    int? avgProcessingTimeMs,
    BigInt? totalCharactersTranscribed,
    int? avgTranscriptionLength,
  }) {
    return _generateMap(
      userId: userId,
      date: date,
      totalRequests: totalRequests,
      successfulRequests: successfulRequests,
      failedRequests: failedRequests,
      totalBytesProcessed: totalBytesProcessed,
      avgProcessingTimeMs: avgProcessingTimeMs,
      totalCharactersTranscribed: totalCharactersTranscribed,
      avgTranscriptionLength: avgTranscriptionLength,
    );
  }
  static Map<String, dynamic> update({
    String? userId,
    DateTime? date,
    BigInt? totalRequests,
    BigInt? successfulRequests,
    BigInt? failedRequests,
    BigInt? totalBytesProcessed,
    int? avgProcessingTimeMs,
    BigInt? totalCharactersTranscribed,
    int? avgTranscriptionLength,
  }) {
    return _generateMap(
      userId: userId,
      date: date,
      totalRequests: totalRequests,
      successfulRequests: successfulRequests,
      failedRequests: failedRequests,
      totalBytesProcessed: totalBytesProcessed,
      avgProcessingTimeMs: avgProcessingTimeMs,
      totalCharactersTranscribed: totalCharactersTranscribed,
      avgTranscriptionLength: avgTranscriptionLength,
    );
  }
  factory UserAudioAnalytics.fromJson(Map<String, dynamic> jsonn) {
    return UserAudioAnalytics(
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      date: jsonn['date'] != null
          ? DateTime.parse(jsonn['date'].toString())
          : null,
      totalRequests: jsonn['total_requests'] != null
          ? BigInt.parse(jsonn['total_requests'].toString())
          : null,
      successfulRequests: jsonn['successful_requests'] != null
          ? BigInt.parse(jsonn['successful_requests'].toString())
          : null,
      failedRequests: jsonn['failed_requests'] != null
          ? BigInt.parse(jsonn['failed_requests'].toString())
          : null,
      totalBytesProcessed: jsonn['total_bytes_processed'] != null
          ? BigInt.parse(jsonn['total_bytes_processed'].toString())
          : null,
      avgProcessingTimeMs: jsonn['avg_processing_time_ms'] != null
          ? int.parse(jsonn['avg_processing_time_ms'].toString())
          : null,
      totalCharactersTranscribed: jsonn['total_characters_transcribed'] != null
          ? BigInt.parse(jsonn['total_characters_transcribed'].toString())
          : null,
      avgTranscriptionLength: jsonn['avg_transcription_length'] != null
          ? int.parse(jsonn['avg_transcription_length'].toString())
          : null,
    );
  }
  static Object New({
    String? userId,
    DateTime? date,
    BigInt? totalRequests,
    BigInt? successfulRequests,
    BigInt? failedRequests,
    BigInt? totalBytesProcessed,
    int? avgProcessingTimeMs,
    BigInt? totalCharactersTranscribed,
    int? avgTranscriptionLength,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (date != null) 'date': date,
      if (totalRequests != null) 'total_requests': totalRequests,
      if (successfulRequests != null) 'successful_requests': successfulRequests,
      if (failedRequests != null) 'failed_requests': failedRequests,
      if (totalBytesProcessed != null)
        'total_bytes_processed': totalBytesProcessed,
      if (avgProcessingTimeMs != null)
        'avg_processing_time_ms': avgProcessingTimeMs,
      if (totalCharactersTranscribed != null)
        'total_characters_transcribed': totalCharactersTranscribed,
      if (avgTranscriptionLength != null)
        'avg_transcription_length': avgTranscriptionLength,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      userId: userId,
      date: date,
      totalRequests: totalRequests,
      successfulRequests: successfulRequests,
      failedRequests: failedRequests,
      totalBytesProcessed: totalBytesProcessed,
      avgProcessingTimeMs: avgProcessingTimeMs,
      totalCharactersTranscribed: totalCharactersTranscribed,
      avgTranscriptionLength: avgTranscriptionLength,
    );
  }
  static const _unset = Object();
  UserAudioAnalytics copyWith({
    Object? userId = _unset,
    Object? date = _unset,
    Object? totalRequests = _unset,
    Object? successfulRequests = _unset,
    Object? failedRequests = _unset,
    Object? totalBytesProcessed = _unset,
    Object? avgProcessingTimeMs = _unset,
    Object? totalCharactersTranscribed = _unset,
    Object? avgTranscriptionLength = _unset,
  }) {
    return UserAudioAnalytics(
      userId: userId == _unset ? this.userId : userId as String?,
      date: date == _unset ? this.date : date as DateTime?,
      totalRequests: totalRequests == _unset
          ? this.totalRequests
          : totalRequests as BigInt?,
      successfulRequests: successfulRequests == _unset
          ? this.successfulRequests
          : successfulRequests as BigInt?,
      failedRequests: failedRequests == _unset
          ? this.failedRequests
          : failedRequests as BigInt?,
      totalBytesProcessed: totalBytesProcessed == _unset
          ? this.totalBytesProcessed
          : totalBytesProcessed as BigInt?,
      avgProcessingTimeMs: avgProcessingTimeMs == _unset
          ? this.avgProcessingTimeMs
          : avgProcessingTimeMs as int?,
      totalCharactersTranscribed: totalCharactersTranscribed == _unset
          ? this.totalCharactersTranscribed
          : totalCharactersTranscribed as BigInt?,
      avgTranscriptionLength: avgTranscriptionLength == _unset
          ? this.avgTranscriptionLength
          : avgTranscriptionLength as int?,
    );
  }
}

// test-typesuser_feedback.dart
class UserFeedback implements SupadartClass<UserFeedback> {
  final String id;
  final String userId;
  final String? messageId;
  final String? recommendationId;
  final String? healthCardId;
  final String feedbackType;
  final int? rating;
  final String? content;
  final Map<String, dynamic>? context;
  final bool? isProcessed;
  final DateTime? processedAt;
  final DateTime? createdAt;
  const UserFeedback({
    required this.id,
    required this.userId,
    this.messageId,
    this.recommendationId,
    this.healthCardId,
    required this.feedbackType,
    this.rating,
    this.content,
    this.context,
    this.isProcessed,
    this.processedAt,
    this.createdAt,
  });
  static String get table_name => 'user_feedback';
  static String get c_id => 'id';
  static String get c_userId => 'user_id';
  static String get c_messageId => 'message_id';
  static String get c_recommendationId => 'recommendation_id';
  static String get c_healthCardId => 'health_card_id';
  static String get c_feedbackType => 'feedback_type';
  static String get c_rating => 'rating';
  static String get c_content => 'content';
  static String get c_context => 'context';
  static String get c_isProcessed => 'is_processed';
  static String get c_processedAt => 'processed_at';
  static String get c_createdAt => 'created_at';
  static List<UserFeedback> converter(List<Map<String, dynamic>> data) {
    return data.map(UserFeedback.fromJson).toList();
  }
  static UserFeedback converterSingle(Map<String, dynamic> data) {
    return UserFeedback.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? userId,
    String? messageId,
    String? recommendationId,
    String? healthCardId,
    String? feedbackType,
    int? rating,
    String? content,
    Map<String, dynamic>? context,
    bool? isProcessed,
    DateTime? processedAt,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (messageId != null) 'message_id': messageId,
      if (recommendationId != null) 'recommendation_id': recommendationId,
      if (healthCardId != null) 'health_card_id': healthCardId,
      if (feedbackType != null) 'feedback_type': feedbackType,
      if (rating != null) 'rating': rating,
      if (content != null) 'content': content,
      if (context != null) 'context': context,
      if (isProcessed != null) 'is_processed': isProcessed,
      if (processedAt != null)
        'processed_at': processedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    required String userId,
    String? messageId,
    String? recommendationId,
    String? healthCardId,
    required String feedbackType,
    int? rating,
    String? content,
    Map<String, dynamic>? context,
    bool? isProcessed,
    DateTime? processedAt,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      messageId: messageId,
      recommendationId: recommendationId,
      healthCardId: healthCardId,
      feedbackType: feedbackType,
      rating: rating,
      content: content,
      context: context,
      isProcessed: isProcessed,
      processedAt: processedAt,
      createdAt: createdAt,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? userId,
    String? messageId,
    String? recommendationId,
    String? healthCardId,
    String? feedbackType,
    int? rating,
    String? content,
    Map<String, dynamic>? context,
    bool? isProcessed,
    DateTime? processedAt,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      userId: userId,
      messageId: messageId,
      recommendationId: recommendationId,
      healthCardId: healthCardId,
      feedbackType: feedbackType,
      rating: rating,
      content: content,
      context: context,
      isProcessed: isProcessed,
      processedAt: processedAt,
      createdAt: createdAt,
    );
  }
  factory UserFeedback.fromJson(Map<String, dynamic> jsonn) {
    return UserFeedback(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      messageId:
          jsonn['message_id'] != null ? jsonn['message_id'].toString() : null,
      recommendationId: jsonn['recommendation_id'] != null
          ? jsonn['recommendation_id'].toString()
          : null,
      healthCardId: jsonn['health_card_id'] != null
          ? jsonn['health_card_id'].toString()
          : null,
      feedbackType: jsonn['feedback_type'] != null
          ? jsonn['feedback_type'].toString()
          : '',
      rating: jsonn['rating'] != null
          ? int.parse(jsonn['rating'].toString())
          : null,
      content: jsonn['content'] != null ? jsonn['content'].toString() : null,
      context: jsonn['context'] != null
          ? jsonn['context'] as Map<String, dynamic>
          : null,
      isProcessed:
          jsonn['is_processed'] != null ? jsonn['is_processed'] as bool : null,
      processedAt: jsonn['processed_at'] != null
          ? DateTime.parse(jsonn['processed_at'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? userId,
    String? messageId,
    String? recommendationId,
    String? healthCardId,
    String? feedbackType,
    int? rating,
    String? content,
    Map<String, dynamic>? context,
    bool? isProcessed,
    DateTime? processedAt,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (userId != null) 'user_id': userId,
      if (messageId != null) 'message_id': messageId,
      if (recommendationId != null) 'recommendation_id': recommendationId,
      if (healthCardId != null) 'health_card_id': healthCardId,
      if (feedbackType != null) 'feedback_type': feedbackType,
      if (rating != null) 'rating': rating,
      if (content != null) 'content': content,
      if (context != null) 'context': context,
      if (isProcessed != null) 'is_processed': isProcessed,
      if (processedAt != null) 'processed_at': processedAt,
      if (createdAt != null) 'created_at': createdAt,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      userId: userId,
      messageId: messageId,
      recommendationId: recommendationId,
      healthCardId: healthCardId,
      feedbackType: feedbackType,
      rating: rating,
      content: content,
      context: context,
      isProcessed: isProcessed,
      processedAt: processedAt,
      createdAt: createdAt,
    );
  }
  static const _unset = Object();
  UserFeedback copyWith({
    Object? id = _unset,
    Object? userId = _unset,
    Object? messageId = _unset,
    Object? recommendationId = _unset,
    Object? healthCardId = _unset,
    Object? feedbackType = _unset,
    Object? rating = _unset,
    Object? content = _unset,
    Object? context = _unset,
    Object? isProcessed = _unset,
    Object? processedAt = _unset,
    Object? createdAt = _unset,
  }) {
    return UserFeedback(
      id: id == _unset ? this.id : id as String,
      userId: userId == _unset ? this.userId : userId as String,
      messageId: messageId == _unset ? this.messageId : messageId as String?,
      recommendationId: recommendationId == _unset
          ? this.recommendationId
          : recommendationId as String?,
      healthCardId:
          healthCardId == _unset ? this.healthCardId : healthCardId as String?,
      feedbackType:
          feedbackType == _unset ? this.feedbackType : feedbackType as String,
      rating: rating == _unset ? this.rating : rating as int?,
      content: content == _unset ? this.content : content as String?,
      context:
          context == _unset ? this.context : context as Map<String, dynamic>?,
      isProcessed:
          isProcessed == _unset ? this.isProcessed : isProcessed as bool?,
      processedAt:
          processedAt == _unset ? this.processedAt : processedAt as DateTime?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
    );
  }
}

// test-typesuser_profiles_normalized.dart
class UserProfilesNormalized implements SupadartClass<UserProfilesNormalized> {
  final String? userId;
  final String? id;
  final String? name;
  final String? email;
  final String? phoneNumber;
  final int? yearOfBirth;
  final int? birthYear;
  final String? gender;
  final String? genderRaw;
  final String? coachId;
  final String? imageUrl;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final Map<String, dynamic>? metadata;
  const UserProfilesNormalized({
    this.userId,
    this.id,
    this.name,
    this.email,
    this.phoneNumber,
    this.yearOfBirth,
    this.birthYear,
    this.gender,
    this.genderRaw,
    this.coachId,
    this.imageUrl,
    this.createdAt,
    this.updatedAt,
    this.metadata,
  });
  static String get table_name => 'user_profiles_normalized';
  static String get c_userId => 'user_id';
  static String get c_id => 'id';
  static String get c_name => 'name';
  static String get c_email => 'email';
  static String get c_phoneNumber => 'phone_number';
  static String get c_yearOfBirth => 'year_of_birth';
  static String get c_birthYear => 'birth_year';
  static String get c_gender => 'gender';
  static String get c_genderRaw => 'gender_raw';
  static String get c_coachId => 'coach_id';
  static String get c_imageUrl => 'image_url';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_metadata => 'metadata';
  static List<UserProfilesNormalized> converter(
      List<Map<String, dynamic>> data) {
    return data.map(UserProfilesNormalized.fromJson).toList();
  }
  static UserProfilesNormalized converterSingle(Map<String, dynamic> data) {
    return UserProfilesNormalized.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? userId,
    String? id,
    String? name,
    String? email,
    String? phoneNumber,
    int? yearOfBirth,
    int? birthYear,
    String? gender,
    String? genderRaw,
    String? coachId,
    String? imageUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (email != null) 'email': email,
      if (phoneNumber != null) 'phone_number': phoneNumber,
      if (yearOfBirth != null) 'year_of_birth': yearOfBirth,
      if (birthYear != null) 'birth_year': birthYear,
      if (gender != null) 'gender': gender,
      if (genderRaw != null) 'gender_raw': genderRaw,
      if (coachId != null) 'coach_id': coachId,
      if (imageUrl != null) 'image_url': imageUrl,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
    };
  }
  static Map<String, dynamic> insert({
    String? userId,
    String? id,
    String? name,
    String? email,
    String? phoneNumber,
    int? yearOfBirth,
    int? birthYear,
    String? gender,
    String? genderRaw,
    String? coachId,
    String? imageUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      userId: userId,
      id: id,
      name: name,
      email: email,
      phoneNumber: phoneNumber,
      yearOfBirth: yearOfBirth,
      birthYear: birthYear,
      gender: gender,
      genderRaw: genderRaw,
      coachId: coachId,
      imageUrl: imageUrl,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
    );
  }
  static Map<String, dynamic> update({
    String? userId,
    String? id,
    String? name,
    String? email,
    String? phoneNumber,
    int? yearOfBirth,
    int? birthYear,
    String? gender,
    String? genderRaw,
    String? coachId,
    String? imageUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      userId: userId,
      id: id,
      name: name,
      email: email,
      phoneNumber: phoneNumber,
      yearOfBirth: yearOfBirth,
      birthYear: birthYear,
      gender: gender,
      genderRaw: genderRaw,
      coachId: coachId,
      imageUrl: imageUrl,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
    );
  }
  factory UserProfilesNormalized.fromJson(Map<String, dynamic> jsonn) {
    return UserProfilesNormalized(
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : null,
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      name: jsonn['name'] != null ? jsonn['name'].toString() : null,
      email: jsonn['email'] != null ? jsonn['email'].toString() : null,
      phoneNumber: jsonn['phone_number'] != null
          ? jsonn['phone_number'].toString()
          : null,
      yearOfBirth: jsonn['year_of_birth'] != null
          ? int.parse(jsonn['year_of_birth'].toString())
          : null,
      birthYear: jsonn['birth_year'] != null
          ? int.parse(jsonn['birth_year'].toString())
          : null,
      gender: jsonn['gender'] != null ? jsonn['gender'].toString() : null,
      genderRaw:
          jsonn['gender_raw'] != null ? jsonn['gender_raw'].toString() : null,
      coachId: jsonn['coach_id'] != null ? jsonn['coach_id'].toString() : null,
      imageUrl:
          jsonn['image_url'] != null ? jsonn['image_url'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
    );
  }
  static Object New({
    String? userId,
    String? id,
    String? name,
    String? email,
    String? phoneNumber,
    int? yearOfBirth,
    int? birthYear,
    String? gender,
    String? genderRaw,
    String? coachId,
    String? imageUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (userId != null) 'user_id': userId,
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (email != null) 'email': email,
      if (phoneNumber != null) 'phone_number': phoneNumber,
      if (yearOfBirth != null) 'year_of_birth': yearOfBirth,
      if (birthYear != null) 'birth_year': birthYear,
      if (gender != null) 'gender': gender,
      if (genderRaw != null) 'gender_raw': genderRaw,
      if (coachId != null) 'coach_id': coachId,
      if (imageUrl != null) 'image_url': imageUrl,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (metadata != null) 'metadata': metadata,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      userId: userId,
      id: id,
      name: name,
      email: email,
      phoneNumber: phoneNumber,
      yearOfBirth: yearOfBirth,
      birthYear: birthYear,
      gender: gender,
      genderRaw: genderRaw,
      coachId: coachId,
      imageUrl: imageUrl,
      createdAt: createdAt,
      updatedAt: updatedAt,
      metadata: metadata,
    );
  }
  static const _unset = Object();
  UserProfilesNormalized copyWith({
    Object? userId = _unset,
    Object? id = _unset,
    Object? name = _unset,
    Object? email = _unset,
    Object? phoneNumber = _unset,
    Object? yearOfBirth = _unset,
    Object? birthYear = _unset,
    Object? gender = _unset,
    Object? genderRaw = _unset,
    Object? coachId = _unset,
    Object? imageUrl = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? metadata = _unset,
  }) {
    return UserProfilesNormalized(
      userId: userId == _unset ? this.userId : userId as String?,
      id: id == _unset ? this.id : id as String?,
      name: name == _unset ? this.name : name as String?,
      email: email == _unset ? this.email : email as String?,
      phoneNumber:
          phoneNumber == _unset ? this.phoneNumber : phoneNumber as String?,
      yearOfBirth:
          yearOfBirth == _unset ? this.yearOfBirth : yearOfBirth as int?,
      birthYear: birthYear == _unset ? this.birthYear : birthYear as int?,
      gender: gender == _unset ? this.gender : gender as String?,
      genderRaw: genderRaw == _unset ? this.genderRaw : genderRaw as String?,
      coachId: coachId == _unset ? this.coachId : coachId as String?,
      imageUrl: imageUrl == _unset ? this.imageUrl : imageUrl as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
    );
  }
}

// test-typesuser_profiles_with_coaches.dart
class UserProfilesWithCoaches
    implements SupadartClass<UserProfilesWithCoaches> {
  final String? id;
  final String? name;
  final String? coachId;
  final int? yearOfBirth;
  final String? sex;
  final Map<String, dynamic>? notificationSettings;
  final Map<String, dynamic>? moodConfig;
  final bool? voiceEnabled;
  final String? languageCode;
  final String? timezone;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final Map<String, dynamic>? coach;
  final String? avatarUrl;
  final Map<String, dynamic>? metadata;
  final String? coachName;
  final String? coachAvatar;
  final String? coachBio;
  final String? coachSex;
  final int? coachYearOfBirth;
  const UserProfilesWithCoaches({
    this.id,
    this.name,
    this.coachId,
    this.yearOfBirth,
    this.sex,
    this.notificationSettings,
    this.moodConfig,
    this.voiceEnabled,
    this.languageCode,
    this.timezone,
    this.createdAt,
    this.updatedAt,
    this.coach,
    this.avatarUrl,
    this.metadata,
    this.coachName,
    this.coachAvatar,
    this.coachBio,
    this.coachSex,
    this.coachYearOfBirth,
  });
  static String get table_name => 'user_profiles_with_coaches';
  static String get c_id => 'id';
  static String get c_name => 'name';
  static String get c_coachId => 'coach_id';
  static String get c_yearOfBirth => 'year_of_birth';
  static String get c_sex => 'sex';
  static String get c_notificationSettings => 'notification_settings';
  static String get c_moodConfig => 'mood_config';
  static String get c_voiceEnabled => 'voice_enabled';
  static String get c_languageCode => 'language_code';
  static String get c_timezone => 'timezone';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_coach => 'coach';
  static String get c_avatarUrl => 'avatar_url';
  static String get c_metadata => 'metadata';
  static String get c_coachName => 'coach_name';
  static String get c_coachAvatar => 'coach_avatar';
  static String get c_coachBio => 'coach_bio';
  static String get c_coachSex => 'coach_sex';
  static String get c_coachYearOfBirth => 'coach_year_of_birth';
  static List<UserProfilesWithCoaches> converter(
      List<Map<String, dynamic>> data) {
    return data.map(UserProfilesWithCoaches.fromJson).toList();
  }
  static UserProfilesWithCoaches converterSingle(Map<String, dynamic> data) {
    return UserProfilesWithCoaches.fromJson(data);
  }
  static Map<String, dynamic> _generateMap({
    String? id,
    String? name,
    String? coachId,
    int? yearOfBirth,
    String? sex,
    Map<String, dynamic>? notificationSettings,
    Map<String, dynamic>? moodConfig,
    bool? voiceEnabled,
    String? languageCode,
    String? timezone,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? coach,
    String? avatarUrl,
    Map<String, dynamic>? metadata,
    String? coachName,
    String? coachAvatar,
    String? coachBio,
    String? coachSex,
    int? coachYearOfBirth,
  }) {
    return {
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (coachId != null) 'coach_id': coachId,
      if (yearOfBirth != null) 'year_of_birth': yearOfBirth,
      if (sex != null) 'sex': sex,
      if (notificationSettings != null)
        'notification_settings': notificationSettings,
      if (moodConfig != null) 'mood_config': moodConfig,
      if (voiceEnabled != null) 'voice_enabled': voiceEnabled,
      if (languageCode != null) 'language_code': languageCode,
      if (timezone != null) 'timezone': timezone,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (coach != null) 'coach': coach,
      if (avatarUrl != null) 'avatar_url': avatarUrl,
      if (metadata != null) 'metadata': metadata,
      if (coachName != null) 'coach_name': coachName,
      if (coachAvatar != null) 'coach_avatar': coachAvatar,
      if (coachBio != null) 'coach_bio': coachBio,
      if (coachSex != null) 'coach_sex': coachSex,
      if (coachYearOfBirth != null) 'coach_year_of_birth': coachYearOfBirth,
    };
  }
  static Map<String, dynamic> insert({
    String? id,
    String? name,
    String? coachId,
    int? yearOfBirth,
    String? sex,
    Map<String, dynamic>? notificationSettings,
    Map<String, dynamic>? moodConfig,
    bool? voiceEnabled,
    String? languageCode,
    String? timezone,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? coach,
    String? avatarUrl,
    Map<String, dynamic>? metadata,
    String? coachName,
    String? coachAvatar,
    String? coachBio,
    String? coachSex,
    int? coachYearOfBirth,
  }) {
    return _generateMap(
      id: id,
      name: name,
      coachId: coachId,
      yearOfBirth: yearOfBirth,
      sex: sex,
      notificationSettings: notificationSettings,
      moodConfig: moodConfig,
      voiceEnabled: voiceEnabled,
      languageCode: languageCode,
      timezone: timezone,
      createdAt: createdAt,
      updatedAt: updatedAt,
      coach: coach,
      avatarUrl: avatarUrl,
      metadata: metadata,
      coachName: coachName,
      coachAvatar: coachAvatar,
      coachBio: coachBio,
      coachSex: coachSex,
      coachYearOfBirth: coachYearOfBirth,
    );
  }
  static Map<String, dynamic> update({
    String? id,
    String? name,
    String? coachId,
    int? yearOfBirth,
    String? sex,
    Map<String, dynamic>? notificationSettings,
    Map<String, dynamic>? moodConfig,
    bool? voiceEnabled,
    String? languageCode,
    String? timezone,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? coach,
    String? avatarUrl,
    Map<String, dynamic>? metadata,
    String? coachName,
    String? coachAvatar,
    String? coachBio,
    String? coachSex,
    int? coachYearOfBirth,
  }) {
    return _generateMap(
      id: id,
      name: name,
      coachId: coachId,
      yearOfBirth: yearOfBirth,
      sex: sex,
      notificationSettings: notificationSettings,
      moodConfig: moodConfig,
      voiceEnabled: voiceEnabled,
      languageCode: languageCode,
      timezone: timezone,
      createdAt: createdAt,
      updatedAt: updatedAt,
      coach: coach,
      avatarUrl: avatarUrl,
      metadata: metadata,
      coachName: coachName,
      coachAvatar: coachAvatar,
      coachBio: coachBio,
      coachSex: coachSex,
      coachYearOfBirth: coachYearOfBirth,
    );
  }
  factory UserProfilesWithCoaches.fromJson(Map<String, dynamic> jsonn) {
    return UserProfilesWithCoaches(
      id: jsonn['id'] != null ? jsonn['id'].toString() : null,
      name: jsonn['name'] != null ? jsonn['name'].toString() : null,
      coachId: jsonn['coach_id'] != null ? jsonn['coach_id'].toString() : null,
      yearOfBirth: jsonn['year_of_birth'] != null
          ? int.parse(jsonn['year_of_birth'].toString())
          : null,
      sex: jsonn['sex'] != null ? jsonn['sex'].toString() : null,
      notificationSettings: jsonn['notification_settings'] != null
          ? jsonn['notification_settings'] as Map<String, dynamic>
          : null,
      moodConfig: jsonn['mood_config'] != null
          ? jsonn['mood_config'] as Map<String, dynamic>
          : null,
      voiceEnabled: jsonn['voice_enabled'] != null
          ? jsonn['voice_enabled'] as bool
          : null,
      languageCode: jsonn['language_code'] != null
          ? jsonn['language_code'].toString()
          : null,
      timezone: jsonn['timezone'] != null ? jsonn['timezone'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      coach: jsonn['coach'] != null
          ? jsonn['coach'] as Map<String, dynamic>
          : null,
      avatarUrl:
          jsonn['avatar_url'] != null ? jsonn['avatar_url'].toString() : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
      coachName:
          jsonn['coach_name'] != null ? jsonn['coach_name'].toString() : null,
      coachAvatar: jsonn['coach_avatar'] != null
          ? jsonn['coach_avatar'].toString()
          : null,
      coachBio:
          jsonn['coach_bio'] != null ? jsonn['coach_bio'].toString() : null,
      coachSex:
          jsonn['coach_sex'] != null ? jsonn['coach_sex'].toString() : null,
      coachYearOfBirth: jsonn['coach_year_of_birth'] != null
          ? int.parse(jsonn['coach_year_of_birth'].toString())
          : null,
    );
  }
  static Object New({
    String? id,
    String? name,
    String? coachId,
    int? yearOfBirth,
    String? sex,
    Map<String, dynamic>? notificationSettings,
    Map<String, dynamic>? moodConfig,
    bool? voiceEnabled,
    String? languageCode,
    String? timezone,
    DateTime? createdAt,
    DateTime? updatedAt,
    Map<String, dynamic>? coach,
    String? avatarUrl,
    Map<String, dynamic>? metadata,
    String? coachName,
    String? coachAvatar,
    String? coachBio,
    String? coachSex,
    int? coachYearOfBirth,
  }) {
    return {
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (coachId != null) 'coach_id': coachId,
      if (yearOfBirth != null) 'year_of_birth': yearOfBirth,
      if (sex != null) 'sex': sex,
      if (notificationSettings != null)
        'notification_settings': notificationSettings,
      if (moodConfig != null) 'mood_config': moodConfig,
      if (voiceEnabled != null) 'voice_enabled': voiceEnabled,
      if (languageCode != null) 'language_code': languageCode,
      if (timezone != null) 'timezone': timezone,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (coach != null) 'coach': coach,
      if (avatarUrl != null) 'avatar_url': avatarUrl,
      if (metadata != null) 'metadata': metadata,
      if (coachName != null) 'coach_name': coachName,
      if (coachAvatar != null) 'coach_avatar': coachAvatar,
      if (coachBio != null) 'coach_bio': coachBio,
      if (coachSex != null) 'coach_sex': coachSex,
      if (coachYearOfBirth != null) 'coach_year_of_birth': coachYearOfBirth,
    };
  }
  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      name: name,
      coachId: coachId,
      yearOfBirth: yearOfBirth,
      sex: sex,
      notificationSettings: notificationSettings,
      moodConfig: moodConfig,
      voiceEnabled: voiceEnabled,
      languageCode: languageCode,
      timezone: timezone,
      createdAt: createdAt,
      updatedAt: updatedAt,
      coach: coach,
      avatarUrl: avatarUrl,
      metadata: metadata,
      coachName: coachName,
      coachAvatar: coachAvatar,
      coachBio: coachBio,
      coachSex: coachSex,
      coachYearOfBirth: coachYearOfBirth,
    );
  }
  static const _unset = Object();
  UserProfilesWithCoaches copyWith({
    Object? id = _unset,
    Object? name = _unset,
    Object? coachId = _unset,
    Object? yearOfBirth = _unset,
    Object? sex = _unset,
    Object? notificationSettings = _unset,
    Object? moodConfig = _unset,
    Object? voiceEnabled = _unset,
    Object? languageCode = _unset,
    Object? timezone = _unset,
    Object? createdAt = _unset,
    Object? updatedAt = _unset,
    Object? coach = _unset,
    Object? avatarUrl = _unset,
    Object? metadata = _unset,
    Object? coachName = _unset,
    Object? coachAvatar = _unset,
    Object? coachBio = _unset,
    Object? coachSex = _unset,
    Object? coachYearOfBirth = _unset,
  }) {
    return UserProfilesWithCoaches(
      id: id == _unset ? this.id : id as String?,
      name: name == _unset ? this.name : name as String?,
      coachId: coachId == _unset ? this.coachId : coachId as String?,
      yearOfBirth:
          yearOfBirth == _unset ? this.yearOfBirth : yearOfBirth as int?,
      sex: sex == _unset ? this.sex : sex as String?,
      notificationSettings: notificationSettings == _unset
          ? this.notificationSettings
          : notificationSettings as Map<String, dynamic>?,
      moodConfig: moodConfig == _unset
          ? this.moodConfig
          : moodConfig as Map<String, dynamic>?,
      voiceEnabled:
          voiceEnabled == _unset ? this.voiceEnabled : voiceEnabled as bool?,
      languageCode:
          languageCode == _unset ? this.languageCode : languageCode as String?,
      timezone: timezone == _unset ? this.timezone : timezone as String?,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
      updatedAt: updatedAt == _unset ? this.updatedAt : updatedAt as DateTime?,
      coach: coach == _unset ? this.coach : coach as Map<String, dynamic>?,
      avatarUrl: avatarUrl == _unset ? this.avatarUrl : avatarUrl as String?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
      coachName: coachName == _unset ? this.coachName : coachName as String?,
      coachAvatar:
          coachAvatar == _unset ? this.coachAvatar : coachAvatar as String?,
      coachBio: coachBio == _unset ? this.coachBio : coachBio as String?,
      coachSex: coachSex == _unset ? this.coachSex : coachSex as String?,
      coachYearOfBirth: coachYearOfBirth == _unset
          ? this.coachYearOfBirth
          : coachYearOfBirth as int?,
    );
  }
}



// ======================
// EDGE FUNCTION TYPES
// ======================
// ======================
// SHARED TYPES
// ======================
// From _shared
class UserContext {
  final String userId;
  final String coachId;
  final String recentCategories;
  final List<dynamic> checkInHistory;
  UserContext({
    required this.userId,
    required this.coachId,
    required this.recentCategories,
    required this.checkInHistory,
  });
  factory UserContext.fromJson(Map<String, dynamic> json) => UserContext(
        userId: json['userId'],
        coachId: json['coachId'],
        recentCategories: json['recentCategories'],
        checkInHistory: json['checkInHistory'],
      );
  Map<String, dynamic> toJson() => {
        'userId': userId,
        'coachId': coachId,
        'recentCategories': recentCategories,
        'checkInHistory': checkInHistory,
      };
}
// From _shared
class CheckIn {
  final String id;
  final String userId;
  final String categoryId;
  final dynamic status;
  final String startedAt;
  final String? completedAt;
  final List<dynamic>? responses;
  CheckIn({
    required this.id,
    required this.userId,
    required this.categoryId,
    required this.status,
    required this.startedAt,
    this.completedAt,
    this.responses,
  });
  factory CheckIn.fromJson(Map<String, dynamic> json) => CheckIn(
        id: json['id'],
        userId: json['userId'],
        categoryId: json['categoryId'],
        status: json['status'],
        startedAt: json['startedAt'],
        completedAt: json['completedAt'],
        responses: json['responses'],
      );
  Map<String, dynamic> toJson() => {
        'id': id,
        'userId': userId,
        'categoryId': categoryId,
        'status': status,
        'startedAt': startedAt,
        'completedAt': completedAt,
        'responses': responses,
      };
}
// From _shared
class Recommendation {
  final String? id;
  final String userId;
  final String title;
  final String insight;
  final String why;
  final String action;
  final String categoryId;
  final int importance;
  final String relevance;
  final String? createdAt;
  Recommendation({
    this.id,
    required this.userId,
    required this.title,
    required this.insight,
    required this.why,
    required this.action,
    required this.categoryId,
    required this.importance,
    required this.relevance,
    this.createdAt,
  });
  factory Recommendation.fromJson(Map<String, dynamic> json) => Recommendation(
        id: json['id'],
        userId: json['userId'],
        title: json['title'],
        insight: json['insight'],
        why: json['why'],
        action: json['action'],
        categoryId: json['categoryId'],
        importance: json['importance'],
        relevance: json['relevance'],
        createdAt: json['createdAt'],
      );
  Map<String, dynamic> toJson() => {
        'id': id,
        'userId': userId,
        'title': title,
        'insight': insight,
        'why': why,
        'action': action,
        'categoryId': categoryId,
        'importance': importance,
        'relevance': relevance,
        'createdAt': createdAt,
      };
}
// From _shared
class ChatMessage {
  final String? id;
  final String userId;
  final String message;
  final bool isUser;
  final String timestamp;
  final dynamic? contextType;
  final String? contextId;
  ChatMessage({
    this.id,
    required this.userId,
    required this.message,
    required this.isUser,
    required this.timestamp,
    this.contextType,
    this.contextId,
  });
  factory ChatMessage.fromJson(Map<String, dynamic> json) => ChatMessage(
        id: json['id'],
        userId: json['userId'],
        message: json['message'],
        isUser: json['isUser'],
        timestamp: json['timestamp'],
        contextType: json['contextType'],
        contextId: json['contextId'],
      );
  Map<String, dynamic> toJson() => {
        'id': id,
        'userId': userId,
        'message': message,
        'isUser': isUser,
        'timestamp': timestamp,
        'contextType': contextType,
        'contextId': contextId,
      };
}
// From _shared
class AnalyticsSummary {
  final String userId;
  final dynamic period;
  final int totalCheckIns;
  final int completedCheckIns;
  final List<dynamic> topCategories;
  final int streakDays;
  final String insights;
  AnalyticsSummary({
    required this.userId,
    required this.period,
    required this.totalCheckIns,
    required this.completedCheckIns,
    required this.topCategories,
    required this.streakDays,
    required this.insights,
  });
  factory AnalyticsSummary.fromJson(Map<String, dynamic> json) => AnalyticsSummary(
        userId: json['userId'],
        period: json['period'],
        totalCheckIns: json['totalCheckIns'],
        completedCheckIns: json['completedCheckIns'],
        topCategories: json['topCategories'],
        streakDays: json['streakDays'],
        insights: json['insights'],
      );
  Map<String, dynamic> toJson() => {
        'userId': userId,
        'period': period,
        'totalCheckIns': totalCheckIns,
        'completedCheckIns': completedCheckIns,
        'topCategories': topCategories,
        'streakDays': streakDays,
        'insights': insights,
      };
}
// From _shared
class CategoryStat {
  final String categoryId;
  final String categoryName;
  final int count;
  final String lastUsed;
  CategoryStat({
    required this.categoryId,
    required this.categoryName,
    required this.count,
    required this.lastUsed,
  });
  factory CategoryStat.fromJson(Map<String, dynamic> json) => CategoryStat(
        categoryId: json['categoryId'],
        categoryName: json['categoryName'],
        count: json['count'],
        lastUsed: json['lastUsed'],
      );
  Map<String, dynamic> toJson() => {
        'categoryId': categoryId,
        'categoryName': categoryName,
        'count': count,
        'lastUsed': lastUsed,
      };
}
// From audio-transcription
class TranscriptionBatchItem {
  final String id;
  final String? audio_url;
  final String? audio_base64;
  final String? language;
  final String? prompt;
  TranscriptionBatchItem({
    required this.id,
    this.audio_url,
    this.audio_base64,
    this.language,
    this.prompt,
  });
  factory TranscriptionBatchItem.fromJson(Map<String, dynamic> json) => TranscriptionBatchItem(
        id: json['id'],
        audio_url: json['audio_url'],
        audio_base64: json['audio_base64'],
        language: json['language'],
        prompt: json['prompt'],
      );
  Map<String, dynamic> toJson() => {
        'id': id,
        'audio_url': audio_url,
        'audio_base64': audio_base64,
        'language': language,
        'prompt': prompt,
      };
}
// From audio-transcription
class BatchTranscriptionResult {
  final String id;
  final String text;
  final int? duration;
  final String? language;
  final String? error;
  BatchTranscriptionResult({
    required this.id,
    required this.text,
    this.duration,
    this.language,
    this.error,
  });
  factory BatchTranscriptionResult.fromJson(Map<String, dynamic> json) => BatchTranscriptionResult(
        id: json['id'],
        text: json['text'],
        duration: json['duration'],
        language: json['language'],
        error: json['error'],
      );
  Map<String, dynamic> toJson() => {
        'id': id,
        'text': text,
        'duration': duration,
        'language': language,
        'error': error,
      };
}
// From checkin
class CheckinQuestion {
  final String id;
  final String text;
  final int type;
  final String? options;
  final int? min;
  final int? max;
  final bool? required;
  CheckinQuestion({
    required this.id,
    required this.text,
    required this.type,
    this.options,
    this.min,
    this.max,
    this.required,
  });
  factory CheckinQuestion.fromJson(Map<String, dynamic> json) => CheckinQuestion(
        id: json['id'],
        text: json['text'],
        type: json['type'],
        options: json['options'],
        min: json['min'],
        max: json['max'],
        required: json['required'],
      );
  Map<String, dynamic> toJson() => {
        'id': id,
        'text': text,
        'type': type,
        'options': options,
        'min': min,
        'max': max,
        'required': required,
      };
}
// ======================
// REQUEST TYPES
// ======================
// From _shared
class LangflowRequest {
  final String prompt;
  final String context;
  final dynamic type;
  LangflowRequest({
    required this.prompt,
    required this.context,
    required this.type,
  });
  factory LangflowRequest.fromJson(Map<String, dynamic> json) => LangflowRequest(
        prompt: json['prompt'],
        context: json['context'],
        type: json['type'],
      );
  Map<String, dynamic> toJson() => {
        'prompt': prompt,
        'context': context,
        'type': type,
      };
}
// From audio-transcription
class TranscriptionRequest {
  final String? audio_url;
  final String? audio_base64;
  final String? language;
  final String? prompt;
  final String? message_id;
  final List<dynamic>? batch;
  TranscriptionRequest({
    this.audio_url,
    this.audio_base64,
    this.language,
    this.prompt,
    this.message_id,
    this.batch,
  });
  factory TranscriptionRequest.fromJson(Map<String, dynamic> json) => TranscriptionRequest(
        audio_url: json['audio_url'],
        audio_base64: json['audio_base64'],
        language: json['language'],
        prompt: json['prompt'],
        message_id: json['message_id'],
        batch: json['batch'],
      );
  Map<String, dynamic> toJson() => {
        'audio_url': audio_url,
        'audio_base64': audio_base64,
        'language': language,
        'prompt': prompt,
        'message_id': message_id,
        'batch': batch,
      };
}
// From checkin
class CheckinRequest {
  final dynamic action;
  final String? categoryId;
  final String? category_id;
  final String? checkinId;
  final String? checkin_id;
  final String? questionId;
  final String? question_id;
  final Map<String, dynamic>? answer;
  final Map<String, dynamic>? proposals;
  CheckinRequest({
    required this.action,
    this.categoryId,
    this.category_id,
    this.checkinId,
    this.checkin_id,
    this.questionId,
    this.question_id,
    this.answer,
    this.proposals,
  });
  factory CheckinRequest.fromJson(Map<String, dynamic> json) => CheckinRequest(
        action: json['action'],
        categoryId: json['categoryId'],
        category_id: json['category_id'],
        checkinId: json['checkinId'],
        checkin_id: json['checkin_id'],
        questionId: json['questionId'],
        question_id: json['question_id'],
        answer: json['answer'],
        proposals: json['proposals'],
      );
  Map<String, dynamic> toJson() => {
        'action': action,
        'categoryId': categoryId,
        'category_id': category_id,
        'checkinId': checkinId,
        'checkin_id': checkin_id,
        'questionId': questionId,
        'question_id': question_id,
        'answer': answer,
        'proposals': proposals,
      };
}
// From text-to-speech
class TTSRequest {
  final String text;
  final String? voice;
  final String? model;
  final int? speed;
  final String? response_format;
  TTSRequest({
    required this.text,
    this.voice,
    this.model,
    this.speed,
    this.response_format,
  });
  factory TTSRequest.fromJson(Map<String, dynamic> json) => TTSRequest(
        text: json['text'],
        voice: json['voice'],
        model: json['model'],
        speed: json['speed'],
        response_format: json['response_format'],
      );
  Map<String, dynamic> toJson() => {
        'text': text,
        'voice': voice,
        'model': model,
        'speed': speed,
        'response_format': response_format,
      };
}
// ======================
// RESPONSE TYPES
// ======================
// From _shared
class CheckInResponse {
  final String questionId;
  final String question;
  final String answer;
  final String timestamp;
  CheckInResponse({
    required this.questionId,
    required this.question,
    required this.answer,
    required this.timestamp,
  });
  factory CheckInResponse.fromJson(Map<String, dynamic> json) => CheckInResponse(
        questionId: json['questionId'],
        question: json['question'],
        answer: json['answer'],
        timestamp: json['timestamp'],
      );
  Map<String, dynamic> toJson() => {
        'questionId': questionId,
        'question': question,
        'answer': answer,
        'timestamp': timestamp,
      };
}
// From _shared
class LangflowResponse {
  final Map<String, dynamic> result;
  final String? metadata;
  LangflowResponse({
    required this.result,
    this.metadata,
  });
  factory LangflowResponse.fromJson(Map<String, dynamic> json) => LangflowResponse(
        result: json['result'],
        metadata: json['metadata'],
      );
  Map<String, dynamic> toJson() => {
        'result': result,
        'metadata': metadata,
      };
}
// From audio-transcription
class TranscriptionResponse {
  final String text;
  final int? duration;
  final String? language;
  final String? error;
  final String? message_id;
  final List<dynamic>? batch_results;
  TranscriptionResponse({
    required this.text,
    this.duration,
    this.language,
    this.error,
    this.message_id,
    this.batch_results,
  });
  factory TranscriptionResponse.fromJson(Map<String, dynamic> json) => TranscriptionResponse(
        text: json['text'],
        duration: json['duration'],
        language: json['language'],
        error: json['error'],
        message_id: json['message_id'],
        batch_results: json['batch_results'],
      );
  Map<String, dynamic> toJson() => {
        'text': text,
        'duration': duration,
        'language': language,
        'error': error,
        'message_id': message_id,
        'batch_results': batch_results,
      };
}
// From text-to-speech
class TTSResponse {
  final String? audio_url;
  final String? audio_base64;
  final int? duration_estimate;
  final String? error;
  TTSResponse({
    this.audio_url,
    this.audio_base64,
    this.duration_estimate,
    this.error,
  });
  factory TTSResponse.fromJson(Map<String, dynamic> json) => TTSResponse(
        audio_url: json['audio_url'],
        audio_base64: json['audio_base64'],
        duration_estimate: json['duration_estimate'],
        error: json['error'],
      );
  Map<String, dynamic> toJson() => {
        'audio_url': audio_url,
        'audio_base64': audio_base64,
        'duration_estimate': duration_estimate,
        'error': error,
      };
}
// ======================
// STATISTICS
// ======================
// Total types generated: 17
// Enums: 0
// Shared: 9
// Requests: 4
// Responses: 4

// ======================
// UTILITIES
// ======================
class DateTimeUtils {
  static DateTime fromJson(String json) => DateTime.parse(json);
  static String toJson(DateTime object) => object.toIso8601String();
  
  static DateTime? fromJsonNullable(String? json) => 
    json != null ? DateTime.parse(json) : null;
  static String? toJsonNullable(DateTime? object) => object?.toIso8601String();
}

// ======================
// PACKAGE INFO
// ======================
const String totalisTypesVersion = '1.0.999';
const String generatedAt = '2025-06-01T14:25:40.059Z';

// ======================
// COVERAGE STATISTICS
// ======================
// Database Tables: 31
// Database Views: 13
// Database Enums: 9
// Edge Function Types: 17
// Total Coverage: COMPLETE (100%)
