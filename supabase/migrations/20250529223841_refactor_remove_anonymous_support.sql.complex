-- Remove anonymous user support infrastructure
-- This migration cleans up any remaining anonymous-specific elements

-- Note: These items were already removed from the consolidated migration
-- This migration ensures cleanup if upgrading from older schema

-- Drop the account_links table if it exists (used for anonymous->permanent account migration)
DROP TABLE IF EXISTS account_links CASCADE;

-- Drop the auth_type enum and check_auth_type function if they exist
DROP FUNCTION IF EXISTS check_auth_type() CASCADE;
DROP TYPE IF EXISTS auth_type CASCADE;

-- Drop the create_profile_if_needed function if it exists (no longer needed with trigger)
DROP FUNCTION IF EXISTS create_profile_if_needed() CASCADE;

-- Only update functions if they exist
DO $$
BEGIN
    -- Update profile creation to remove anonymous user handling
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'update_last_seen') THEN
        -- Drop the function first to avoid return type conflicts
        DROP FUNCTION IF EXISTS update_last_seen() CASCADE;
        
        CREATE FUNCTION update_last_seen()
        RETURNS TRIGGER 
        SECURITY DEFINER
        SET search_path = public
        AS $func$
        BEGIN
          -- Simple update without auth type checking
          UPDATE profiles 
          SET 
            last_seen_at = NOW(),
            updated_at = NOW()
          WHERE id = NEW.user_id;
          
          RETURN NEW;
        END;
        $func$ LANGUAGE plpgsql;
    END IF;

    -- Recreate simplified analytics function without auth type
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'log_analytics_event') THEN
        CREATE OR REPLACE FUNCTION log_analytics_event(
          p_event_type text,
          p_event_data jsonb DEFAULT '{}'::jsonb
        ) RETURNS void
        SECURITY DEFINER
        SET search_path = public
        AS $func$
        BEGIN
          -- Only log for authenticated users
          IF auth.uid() IS NOT NULL THEN
            INSERT INTO analytics_events (
              user_id,
              event_type,
              event_data,
              created_at
            ) VALUES (
              auth.uid(),
              p_event_type,
              p_event_data,
              NOW()
            );
          END IF;
        END;
        $func$ LANGUAGE plpgsql;
    END IF;
END $$;

-- Clean up any remaining anonymous user data in profiles (if table exists)
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'profiles') THEN
        UPDATE profiles 
        SET metadata = metadata - 'anonymous' - 'auth_type'
        WHERE metadata ? 'anonymous' OR metadata ? 'auth_type';
    END IF;
END $$;

-- Add index on profiles for better performance with authenticated queries (if table exists)
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'profiles') THEN
        CREATE INDEX IF NOT EXISTS idx_profiles_id ON profiles(id);
    END IF;
END $$;

-- Update comments to reflect authenticated-only architecture (if objects exist)
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_tables WHERE schemaname = 'public' AND tablename = 'profiles') THEN
        COMMENT ON TABLE profiles IS 'User profiles - automatically created on signup via trigger';
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'create_profile_on_signup') THEN
        COMMENT ON FUNCTION create_profile_on_signup() IS 'Creates profile automatically when user signs up - no manual call needed';
    END IF;
END $$;

-- Revoke/Grant permissions only if functions exist
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'update_last_seen') THEN
        REVOKE ALL ON FUNCTION update_last_seen() FROM anon;
        GRANT EXECUTE ON FUNCTION update_last_seen() TO authenticated;
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'log_analytics_event') THEN
        REVOKE ALL ON FUNCTION log_analytics_event(text, jsonb) FROM anon;
        GRANT EXECUTE ON FUNCTION log_analytics_event(text, jsonb) TO authenticated;
    END IF;
END $$;