// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison, prefer_null_aware_operators
// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the Supadart configuration.
import 'supadart_header.dart';

class TestCicdVerification implements SupadartClass<TestCicdVerification> {
  final String id;
  final String testName;
  final DateTime? testTimestamp;
  final Map<String, dynamic>? metadata;

  const TestCicdVerification({
    required this.id,
    required this.testName,
    this.testTimestamp,
    this.metadata,
  });

  static String get table_name => 'test_cicd_verification';
  static String get c_id => 'id';
  static String get c_testName => 'test_name';
  static String get c_testTimestamp => 'test_timestamp';
  static String get c_metadata => 'metadata';

  static List<TestCicdVerification> converter(List<Map<String, dynamic>> data) {
    return data.map(TestCicdVerification.fromJson).toList();
  }

  static TestCicdVerification converterSingle(Map<String, dynamic> data) {
    return TestCicdVerification.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? testName,
    DateTime? testTimestamp,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (id != null) 'id': id,
      if (testName != null) 'test_name': testName,
      if (testTimestamp != null)
        'test_timestamp': testTimestamp.toUtc().toIso8601String(),
      if (metadata != null) 'metadata': metadata,
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    required String testName,
    DateTime? testTimestamp,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      id: id,
      testName: testName,
      testTimestamp: testTimestamp,
      metadata: metadata,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? testName,
    DateTime? testTimestamp,
    Map<String, dynamic>? metadata,
  }) {
    return _generateMap(
      id: id,
      testName: testName,
      testTimestamp: testTimestamp,
      metadata: metadata,
    );
  }

  factory TestCicdVerification.fromJson(Map<String, dynamic> jsonn) {
    return TestCicdVerification(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      testName: jsonn['test_name'] != null ? jsonn['test_name'].toString() : '',
      testTimestamp: jsonn['test_timestamp'] != null
          ? DateTime.parse(jsonn['test_timestamp'].toString())
          : null,
      metadata: jsonn['metadata'] != null
          ? jsonn['metadata'] as Map<String, dynamic>
          : null,
    );
  }

  static Object New({
    String? id,
    String? testName,
    DateTime? testTimestamp,
    Map<String, dynamic>? metadata,
  }) {
    return {
      if (id != null) 'id': id,
      if (testName != null) 'test_name': testName,
      if (testTimestamp != null) 'test_timestamp': testTimestamp,
      if (metadata != null) 'metadata': metadata,
    };
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      testName: testName,
      testTimestamp: testTimestamp,
      metadata: metadata,
    );
  }

  static const _unset = Object();
  TestCicdVerification copyWith({
    Object? id = _unset,
    Object? testName = _unset,
    Object? testTimestamp = _unset,
    Object? metadata = _unset,
  }) {
    return TestCicdVerification(
      id: id == _unset ? this.id : id as String,
      testName: testName == _unset ? this.testName : testName as String,
      testTimestamp: testTimestamp == _unset
          ? this.testTimestamp
          : testTimestamp as DateTime?,
      metadata: metadata == _unset
          ? this.metadata
          : metadata as Map<String, dynamic>?,
    );
  }
}
