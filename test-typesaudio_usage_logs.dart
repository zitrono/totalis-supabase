// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison, prefer_null_aware_operators
// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the Supadart configuration.
import 'supadart_header.dart';

class AudioUsageLogs implements SupadartClass<AudioUsageLogs> {
  final String id;
  final String requestId;
  final String userId;
  final int fileSize;
  final String mimeType;
  final int processingTimeMs;
  final int transcriptionLength;
  final bool success;
  final DateTime? createdAt;

  const AudioUsageLogs({
    required this.id,
    required this.requestId,
    required this.userId,
    required this.fileSize,
    required this.mimeType,
    required this.processingTimeMs,
    required this.transcriptionLength,
    required this.success,
    this.createdAt,
  });

  static String get table_name => 'audio_usage_logs';
  static String get c_id => 'id';
  static String get c_requestId => 'request_id';
  static String get c_userId => 'user_id';
  static String get c_fileSize => 'file_size';
  static String get c_mimeType => 'mime_type';
  static String get c_processingTimeMs => 'processing_time_ms';
  static String get c_transcriptionLength => 'transcription_length';
  static String get c_success => 'success';
  static String get c_createdAt => 'created_at';

  static List<AudioUsageLogs> converter(List<Map<String, dynamic>> data) {
    return data.map(AudioUsageLogs.fromJson).toList();
  }

  static AudioUsageLogs converterSingle(Map<String, dynamic> data) {
    return AudioUsageLogs.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? requestId,
    String? userId,
    int? fileSize,
    String? mimeType,
    int? processingTimeMs,
    int? transcriptionLength,
    bool? success,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (requestId != null) 'request_id': requestId,
      if (userId != null) 'user_id': userId,
      if (fileSize != null) 'file_size': fileSize,
      if (mimeType != null) 'mime_type': mimeType,
      if (processingTimeMs != null) 'processing_time_ms': processingTimeMs,
      if (transcriptionLength != null)
        'transcription_length': transcriptionLength,
      if (success != null) 'success': success,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    required String requestId,
    required String userId,
    required int fileSize,
    required String mimeType,
    required int processingTimeMs,
    required int transcriptionLength,
    bool? success,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      requestId: requestId,
      userId: userId,
      fileSize: fileSize,
      mimeType: mimeType,
      processingTimeMs: processingTimeMs,
      transcriptionLength: transcriptionLength,
      success: success,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? requestId,
    String? userId,
    int? fileSize,
    String? mimeType,
    int? processingTimeMs,
    int? transcriptionLength,
    bool? success,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      requestId: requestId,
      userId: userId,
      fileSize: fileSize,
      mimeType: mimeType,
      processingTimeMs: processingTimeMs,
      transcriptionLength: transcriptionLength,
      success: success,
      createdAt: createdAt,
    );
  }

  factory AudioUsageLogs.fromJson(Map<String, dynamic> jsonn) {
    return AudioUsageLogs(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      requestId:
          jsonn['request_id'] != null ? jsonn['request_id'].toString() : '',
      userId: jsonn['user_id'] != null ? jsonn['user_id'].toString() : '',
      fileSize: jsonn['file_size'] != null
          ? int.parse(jsonn['file_size'].toString())
          : 0,
      mimeType: jsonn['mime_type'] != null ? jsonn['mime_type'].toString() : '',
      processingTimeMs: jsonn['processing_time_ms'] != null
          ? int.parse(jsonn['processing_time_ms'].toString())
          : 0,
      transcriptionLength: jsonn['transcription_length'] != null
          ? int.parse(jsonn['transcription_length'].toString())
          : 0,
      success: jsonn['success'] != null ? jsonn['success'] as bool : false,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }

  static Object New({
    String? id,
    String? requestId,
    String? userId,
    int? fileSize,
    String? mimeType,
    int? processingTimeMs,
    int? transcriptionLength,
    bool? success,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (requestId != null) 'request_id': requestId,
      if (userId != null) 'user_id': userId,
      if (fileSize != null) 'file_size': fileSize,
      if (mimeType != null) 'mime_type': mimeType,
      if (processingTimeMs != null) 'processing_time_ms': processingTimeMs,
      if (transcriptionLength != null)
        'transcription_length': transcriptionLength,
      if (success != null) 'success': success,
      if (createdAt != null) 'created_at': createdAt,
    };
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      requestId: requestId,
      userId: userId,
      fileSize: fileSize,
      mimeType: mimeType,
      processingTimeMs: processingTimeMs,
      transcriptionLength: transcriptionLength,
      success: success,
      createdAt: createdAt,
    );
  }

  static const _unset = Object();
  AudioUsageLogs copyWith({
    Object? id = _unset,
    Object? requestId = _unset,
    Object? userId = _unset,
    Object? fileSize = _unset,
    Object? mimeType = _unset,
    Object? processingTimeMs = _unset,
    Object? transcriptionLength = _unset,
    Object? success = _unset,
    Object? createdAt = _unset,
  }) {
    return AudioUsageLogs(
      id: id == _unset ? this.id : id as String,
      requestId: requestId == _unset ? this.requestId : requestId as String,
      userId: userId == _unset ? this.userId : userId as String,
      fileSize: fileSize == _unset ? this.fileSize : fileSize as int,
      mimeType: mimeType == _unset ? this.mimeType : mimeType as String,
      processingTimeMs: processingTimeMs == _unset
          ? this.processingTimeMs
          : processingTimeMs as int,
      transcriptionLength: transcriptionLength == _unset
          ? this.transcriptionLength
          : transcriptionLength as int,
      success: success == _unset ? this.success : success as bool,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
    );
  }
}
