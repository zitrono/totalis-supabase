name: Production Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  SUPABASE_CLI_VERSION: 2.23.8

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        run: |
          # Download to tmp directory to avoid conflicts
          cd /tmp
          wget -qO- https://github.com/supabase/cli/releases/download/v${SUPABASE_CLI_VERSION}/supabase_linux_amd64.tar.gz | tar xvz
          sudo mv supabase /usr/local/bin/
          cd $GITHUB_WORKSPACE
          supabase --version

      - name: Authenticate Supabase CLI
        run: |
          supabase login --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}

      - name: Apply migrations to production
        run: |
          supabase db push --password ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Deploy Edge Functions to production
        run: |
          # Deploy all edge functions with --use-api flag
          for function_dir in supabase/functions/*/; do
            if [ -d "$function_dir" ] && [ -f "$function_dir/index.ts" ]; then
              function_name=$(basename "$function_dir")
              # Skip _shared directory as it's not a function
              if [ "$function_name" != "_shared" ]; then
                echo "Deploying function: $function_name"
                supabase functions deploy "$function_name" \
                  --use-api \
                  --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
              fi
            fi
          done
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Delete orphaned Edge Functions
        run: |
          echo "üßπ Cleaning up orphaned edge functions..."
          ./scripts/delete-orphaned-functions.sh
        env:
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Push configuration to production
        run: |
          # Push all configuration from config.toml to production
          # This includes auth settings, storage settings, etc.
          # Note: Some features like Auth Hooks require paid plans
          supabase config push --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} || echo "Config push failed - some features may require paid plan"

      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          ENVIRONMENT: production

      - name: Generate TypeScript types documentation
        run: |
          echo "üìö Generating TypeScript type documentation..."
          
          # Create docs directory if it doesn't exist
          mkdir -p docs
          
          # Generate TypeScript types only (no db dump due to IPv6 issues)
          echo "Generating TypeScript types..."
          npx supabase gen types typescript --project-id ${{ secrets.SUPABASE_PROJECT_ID }} > docs/database.types.ts
          
          # Create a timestamp file to track when types were last generated
          echo "Generated from production deployment on $(date -u '+%Y-%m-%d %H:%M:%S UTC')" > docs/types-generated.txt
          echo "Commit: ${{ github.sha }}" >> docs/types-generated.txt
          
          echo "‚úÖ TypeScript types generated successfully"

      - name: Commit type documentation
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update TypeScript type definitions [skip ci]"
          file_pattern: docs/database.types.ts docs/types-generated.txt
          branch: main
          commit_user_name: "GitHub Actions"
          commit_user_email: "actions@github.com"
          skip_checkout: true

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ Success' : '‚ùå Failed';
            const commit = context.sha.substring(0, 7);
            const message = `Production Deployment ${status}\n\nCommit: ${commit}\nRun: ${context.runId}`;
            
            // You can add Slack/Discord webhook notification here
            console.log(message);