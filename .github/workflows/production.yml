name: Production Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      skip_backup:
        description: 'Skip database backup (not recommended)'
        required: false
        default: false
        type: boolean

env:
  SUPABASE_CLI_VERSION: 2.23.4

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        run: |
          wget -qO- https://github.com/supabase/cli/releases/download/v${SUPABASE_CLI_VERSION}/supabase_linux_amd64.tar.gz | tar xvz
          sudo mv supabase /usr/local/bin/
          supabase --version

      - name: Authenticate Supabase CLI
        run: |
          supabase login --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}

      - name: Backup production database
        if: ${{ !inputs.skip_backup }}
        run: |
          mkdir -p backups
          BACKUP_FILE="backups/backup-$(date +%Y%m%d-%H%M%S).sql"
          supabase db dump --db-url ${{ secrets.DATABASE_URL }} > "$BACKUP_FILE"
          echo "Database backed up to: $BACKUP_FILE"
          
          # Upload backup as artifact
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV

      - name: Upload database backup
        if: ${{ !inputs.skip_backup }}
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ github.run_id }}
          path: ${{ env.BACKUP_FILE }}
          retention-days: 30

      - name: Apply migrations to production
        run: |
          supabase db push --password ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Deploy Edge Functions to production
        run: |
          # Deploy all edge functions with --use-api flag
          for function_dir in supabase/functions/*/; do
            if [ -d "$function_dir" ] && [ -f "$function_dir/index.ts" ]; then
              function_name=$(basename "$function_dir")
              echo "Deploying function: $function_name"
              supabase functions deploy "$function_name" \
                --use-api \
                --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
            fi
          done
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Push storage configuration
        run: |
          # Note: supabase config push is not available in v2.23.4
          # Will be available in future versions
          echo "Storage config sync will be available in future CLI versions"

      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          ENVIRONMENT: production

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = job.status === 'success' ? '✅ Success' : '❌ Failed';
            const commit = context.sha.substring(0, 7);
            const message = `Production Deployment ${status}\n\nCommit: ${commit}\nRun: ${context.runId}`;
            
            // You can add Slack/Discord webhook notification here
            console.log(message);