#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

function combineTypes(dbTypesPath, edgeFunctionTypesPath, outputPath, version) {
  console.log('Combining types...');
  console.log('Database types path:', dbTypesPath);
  console.log('Edge function types path:', edgeFunctionTypesPath);
  console.log('Output path:', outputPath);
  console.log('Version:', version);

  let dbModels = '';
  let dbViews = '';
  let dbEnums = '';
  let edgeTypes = '';

  // Read database types (supadart generates multiple files)
  const modelsPath = path.join(dbTypesPath, 'models.dart');
  const viewsPath = path.join(dbTypesPath, 'views.dart');
  const enumsPath = path.join(dbTypesPath, 'enums.dart');

  if (fs.existsSync(modelsPath)) {
    dbModels = fs.readFileSync(modelsPath, 'utf8');
    console.log('✓ Read database models');
  } else {
    console.warn('⚠ Database models file not found, checking for single file...');
    // Check for single file output
    const singleFilePath = path.join(dbTypesPath, 'database_types.dart');
    if (fs.existsSync(singleFilePath)) {
      dbModels = fs.readFileSync(singleFilePath, 'utf8');
      console.log('✓ Read database types from single file');
    }
  }

  if (fs.existsSync(viewsPath)) {
    dbViews = fs.readFileSync(viewsPath, 'utf8');
    console.log('✓ Read database views');
  }

  if (fs.existsSync(enumsPath)) {
    dbEnums = fs.readFileSync(enumsPath, 'utf8');
    console.log('✓ Read database enums');
  }

  // Read edge function types
  if (fs.existsSync(edgeFunctionTypesPath)) {
    edgeTypes = fs.readFileSync(edgeFunctionTypesPath, 'utf8');
    console.log('✓ Read edge function types');
  } else {
    console.warn('⚠ Edge function types file not found');
  }

  // Generate combined file
  const combinedTypes = `
// Totalis Types v${version}
// Generated: ${new Date().toISOString()}
// DO NOT EDIT - This file is automatically generated

// Database Enums
${extractContent(dbEnums)}

// Database Models
${extractContent(dbModels)}

// Database Views
${extractContent(dbViews)}

// Edge Function Types
${extractContent(edgeTypes)}

// Utilities
class DateTimeConverter implements JsonConverter<DateTime, String> {
  const DateTimeConverter();
  
  @override
  DateTime fromJson(String json) => DateTime.parse(json);
  
  @override
  String toJson(DateTime object) => object.toIso8601String();
}

class DateTimeNullableConverter implements JsonConverter<DateTime?, String?> {
  const DateTimeNullableConverter();
  
  @override
  DateTime? fromJson(String? json) => json != null ? DateTime.parse(json) : null;
  
  @override
  String? toJson(DateTime? object) => object?.toIso8601String();
}

// Version info
const String totalisTypesVersion = '${version}';
const String generatedAt = '${new Date().toISOString()}';
`;

  // Ensure output directory exists
  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  // Write combined file
  fs.writeFileSync(outputPath, combinedTypes);
  console.log('✓ Generated combined types file');
}

function extractContent(fileContent) {
  if (!fileContent) return '';
  
  return fileContent
    .split('\n')
    .filter(line => {
      const trimmed = line.trim();
      return !trimmed.startsWith('import ') && 
             !trimmed.startsWith('library ') &&
             !trimmed.startsWith('part ') &&
             !trimmed.startsWith('//') &&
             trimmed !== '';
    })
    .join('\n')
    .trim();
}

// CLI entry point
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length < 4) {
    console.error('Usage: node combine-types.js <db_types_path> <edge_types_path> <output_path> <version>');
    process.exit(1);
  }

  const [dbTypesPath, edgeTypesPath, outputPath, version] = args;
  
  try {
    combineTypes(dbTypesPath, edgeTypesPath, outputPath, version);
    console.log('✅ Type combination completed successfully');
  } catch (error) {
    console.error('❌ Error combining types:', error);
    process.exit(1);
  }
}

module.exports = { combineTypes };