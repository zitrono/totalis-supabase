import { ScenarioResult, TestUser } from '../types';
import { TotalisTestClient } from '../index';
import { CheckInService } from '../services/checkin.service';
import { CategoryService } from '../services/category.service';

/**
 * Recommendation System Scenario
 * Tests the personalized recommendation system with various contexts
 */
export async function runRecommendationSystemScenario(
  client: TotalisTestClient
): Promise<ScenarioResult> {
  const logs: string[] = [];
  let testUser: TestUser | null = null;
  let checkInId: string | null = null;

  try {
    logs.push('Starting recommendation system scenario...');

    // Step 1: Create and authenticate user
    
    const authResult = await client.auth.signUpWithEmail(
      `rec-test-${Date.now()}@example.com`,
      'TestPassword123!'
    );
    
    if (!authResult.user) {
      throw new Error('Failed to create test user');
    }
    
    testUser = authResult;
    logs.push(`✓ Created test user: ${testUser.user.email}`);

    // Step 2: Get active recommendations (should generate new ones)
    const activeRecsResponse = await client.supabase.functions.invoke('recommendations', {
      body: {
        type: 'active',
        limit: 5
      }
    });

    if (activeRecsResponse.error) {
      throw new Error(`Failed to get recommendations: ${activeRecsResponse.error.message}`);
    }

    const activeRecs = activeRecsResponse.data;
    logs.push(`✓ Retrieved ${activeRecs.recommendations.length} active recommendations`);
    
    activeRecs.recommendations.forEach((rec: any) => {
      logs.push(`  - ${rec.title} (${rec.priority} priority, relevance: ${rec.relevance})`);
      if (rec.category) {
        logs.push(`    Category: ${rec.category.name}`);
      }
    });

    logs.push(`  Active recommendations: ${activeRecs.stats.activeRecommendations}`);
    logs.push(`  Completed today: ${activeRecs.stats.completedToday}`);

    // Step 3: Complete a quick check-in to generate check-in based recommendations
    const categoryService = new CategoryService(client.supabase);
    const categories = await categoryService.getCategories();
    
    if (categories.length > 0) {
      const checkInService = new CheckInService(client.supabase);
      const startResult = await checkInService.startCheckIn(categories[0].id);
      checkInId = startResult.checkInId;

      // Quick completion with low wellness level
      await checkInService.processCheckIn(checkInId, {
        answer: "3",
        action: "continue"
      });

      await checkInService.processCheckIn(checkInId, {
        answer: "Feeling overwhelmed with everything",
        action: "continue"
      });

      const completionResult = await checkInService.processCheckIn(checkInId, {
        answer: "I need better coping strategies",
        action: "complete"
      });

      logs.push(`✓ Completed check-in with wellness level: ${completionResult.summary.wellnessLevel}`);

      // Get check-in based recommendations
      const checkinRecsResponse = await client.supabase.functions.invoke('recommendations', {
        body: {
          type: 'checkin',
          checkinId: checkInId
        }
      });

      if (!checkinRecsResponse.error) {
        const checkinRecs = checkinRecsResponse.data;
        logs.push(`✓ Retrieved ${checkinRecs.recommendations.length} check-in based recommendations`);
        
        checkinRecs.recommendations.forEach((rec: any) => {
          logs.push(`  - ${rec.title}`);
          logs.push(`    ${rec.description}`);
        });
      }
    }

    // Step 4: Test category-specific recommendations
    if (categories.length > 0) {
      const categoryRecsResponse = await client.supabase.functions.invoke('recommendations', {
        body: {
          type: 'category',
          categoryId: categories[0].id,
          limit: 3
        }
      });

      if (!categoryRecsResponse.error) {
        const categoryRecs = categoryRecsResponse.data;
        logs.push(`✓ Retrieved ${categoryRecs.recommendations.length} category-specific recommendations`);
      }
    }

    // Step 5: Test recommendation actions
    if (activeRecs.recommendations.length > 0) {
      const targetRec = activeRecs.recommendations[0];

      // Complete a recommendation
      const completeResponse = await fetch(
        `${process.env.SUPABASE_URL}/functions/v1/recommendations/action`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.SUPABASE_ANON_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            recommendationId: targetRec.id,
            action: 'complete',
            rating: 4
          })
        }
      );

      if (completeResponse.ok) {
        logs.push(`✓ Completed recommendation: ${targetRec.title}`);
      }

      // Dismiss another recommendation
      if (activeRecs.recommendations.length > 1) {
        const dismissTarget = activeRecs.recommendations[1];
        const dismissResponse = await fetch(
          `${process.env.SUPABASE_URL}/functions/v1/recommendations/action`,
          {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${process.env.SUPABASE_ANON_KEY}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              recommendationId: dismissTarget.id,
              action: 'dismiss'
            })
          }
        );

        if (dismissResponse.ok) {
          logs.push(`✓ Dismissed recommendation: ${dismissTarget.title}`);
        }
      }
    }

    // Step 6: Verify recommendation updates
    const updatedRecsResponse = await client.supabase.functions.invoke('recommendations', {
      body: {
        type: 'active',
        limit: 10
      }
    });

    if (!updatedRecsResponse.error) {
      const updatedRecs = updatedRecsResponse.data;
      logs.push(`✓ Updated active recommendations: ${updatedRecs.stats.activeRecommendations}`);
      logs.push(`  Completed today: ${updatedRecs.stats.completedToday}`);
    }

    // Step 7: Test pagination
    const paginatedResponse = await client.supabase.functions.invoke('recommendations', {
      body: {
        type: 'all',
        limit: 2,
        offset: 0
      }
    });

    if (!paginatedResponse.error) {
      const paginated = paginatedResponse.data;
      logs.push(`✓ Pagination test:`);
      logs.push(`  Page 1: ${paginated.recommendations.length} items`);
      logs.push(`  Has more: ${paginated.pagination.hasMore}`);
    }

    // Step 8: Verify viewed status
    const { data: viewedRecs } = await client.supabase
      .from('recommendations')
      .select('id, title, viewed_at')
      .eq('user_id', testUser.user.id)
      .not('viewed_at', 'is', null);

    logs.push(`✓ Verified ${viewedRecs?.length || 0} recommendations marked as viewed`);

    // Step 9: Analytics verification
    const { data: analyticsEvents } = await client.supabase
      .from('analytics_events')
      .select('*')
      .eq('user_id', testUser.user.id)
      .in('event_type', ['recommendations_viewed', 'recommendation_action']);

    logs.push(`✓ Verified ${analyticsEvents?.length || 0} recommendation analytics events`);

    return {
      success: true,
      logs,
      summary: `Successfully tested recommendation system with ${activeRecs.recommendations.length} recommendations`,
      data: {
        totalRecommendations: activeRecs.stats.activeRecommendations,
        completedToday: updatedRecsResponse.data?.stats.completedToday || 0,
        analyticsEvents: analyticsEvents?.length || 0
      }
    };

  } catch (error) {
    logs.push(`✗ Error: ${error.message}`);
    
    return {
      success: false,
      logs,
      error: error.message
    };
  } finally {
    // Cleanup
    if (testUser) {
      try {
        await client.supabase.auth.admin.deleteUser(testUser.user.id);
        logs.push('✓ Cleaned up test user');
      } catch (error) {
        logs.push(`✗ Cleanup failed: ${error.message}`);
      }
    }
  }
}