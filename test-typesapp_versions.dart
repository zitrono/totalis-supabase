// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison, prefer_null_aware_operators
// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the Supadart configuration.
import 'supadart_header.dart';

class AppVersions implements SupadartClass<AppVersions> {
  final String id;
  final String versionNumber;
  final int buildNumber;
  final String platform;
  final String? releaseNotes;
  final bool? minimumSupported;
  final bool? isRequiredUpdate;
  final bool? isActive;
  final DateTime releasedAt;
  final DateTime? createdAt;

  const AppVersions({
    required this.id,
    required this.versionNumber,
    required this.buildNumber,
    required this.platform,
    this.releaseNotes,
    this.minimumSupported,
    this.isRequiredUpdate,
    this.isActive,
    required this.releasedAt,
    this.createdAt,
  });

  static String get table_name => 'app_versions';
  static String get c_id => 'id';
  static String get c_versionNumber => 'version_number';
  static String get c_buildNumber => 'build_number';
  static String get c_platform => 'platform';
  static String get c_releaseNotes => 'release_notes';
  static String get c_minimumSupported => 'minimum_supported';
  static String get c_isRequiredUpdate => 'is_required_update';
  static String get c_isActive => 'is_active';
  static String get c_releasedAt => 'released_at';
  static String get c_createdAt => 'created_at';

  static List<AppVersions> converter(List<Map<String, dynamic>> data) {
    return data.map(AppVersions.fromJson).toList();
  }

  static AppVersions converterSingle(Map<String, dynamic> data) {
    return AppVersions.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? versionNumber,
    int? buildNumber,
    String? platform,
    String? releaseNotes,
    bool? minimumSupported,
    bool? isRequiredUpdate,
    bool? isActive,
    DateTime? releasedAt,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (versionNumber != null) 'version_number': versionNumber,
      if (buildNumber != null) 'build_number': buildNumber,
      if (platform != null) 'platform': platform,
      if (releaseNotes != null) 'release_notes': releaseNotes,
      if (minimumSupported != null) 'minimum_supported': minimumSupported,
      if (isRequiredUpdate != null) 'is_required_update': isRequiredUpdate,
      if (isActive != null) 'is_active': isActive,
      if (releasedAt != null)
        'released_at': releasedAt.toUtc().toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    required String versionNumber,
    required int buildNumber,
    required String platform,
    String? releaseNotes,
    bool? minimumSupported,
    bool? isRequiredUpdate,
    bool? isActive,
    required DateTime releasedAt,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      versionNumber: versionNumber,
      buildNumber: buildNumber,
      platform: platform,
      releaseNotes: releaseNotes,
      minimumSupported: minimumSupported,
      isRequiredUpdate: isRequiredUpdate,
      isActive: isActive,
      releasedAt: releasedAt,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? versionNumber,
    int? buildNumber,
    String? platform,
    String? releaseNotes,
    bool? minimumSupported,
    bool? isRequiredUpdate,
    bool? isActive,
    DateTime? releasedAt,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      versionNumber: versionNumber,
      buildNumber: buildNumber,
      platform: platform,
      releaseNotes: releaseNotes,
      minimumSupported: minimumSupported,
      isRequiredUpdate: isRequiredUpdate,
      isActive: isActive,
      releasedAt: releasedAt,
      createdAt: createdAt,
    );
  }

  factory AppVersions.fromJson(Map<String, dynamic> jsonn) {
    return AppVersions(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      versionNumber: jsonn['version_number'] != null
          ? jsonn['version_number'].toString()
          : '',
      buildNumber: jsonn['build_number'] != null
          ? int.parse(jsonn['build_number'].toString())
          : 0,
      platform: jsonn['platform'] != null ? jsonn['platform'].toString() : '',
      releaseNotes: jsonn['release_notes'] != null
          ? jsonn['release_notes'].toString()
          : null,
      minimumSupported: jsonn['minimum_supported'] != null
          ? jsonn['minimum_supported'] as bool
          : null,
      isRequiredUpdate: jsonn['is_required_update'] != null
          ? jsonn['is_required_update'] as bool
          : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      releasedAt: jsonn['released_at'] != null
          ? DateTime.parse(jsonn['released_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }

  static Object New({
    String? id,
    String? versionNumber,
    int? buildNumber,
    String? platform,
    String? releaseNotes,
    bool? minimumSupported,
    bool? isRequiredUpdate,
    bool? isActive,
    DateTime? releasedAt,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (versionNumber != null) 'version_number': versionNumber,
      if (buildNumber != null) 'build_number': buildNumber,
      if (platform != null) 'platform': platform,
      if (releaseNotes != null) 'release_notes': releaseNotes,
      if (minimumSupported != null) 'minimum_supported': minimumSupported,
      if (isRequiredUpdate != null) 'is_required_update': isRequiredUpdate,
      if (isActive != null) 'is_active': isActive,
      if (releasedAt != null) 'released_at': releasedAt,
      if (createdAt != null) 'created_at': createdAt,
    };
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      versionNumber: versionNumber,
      buildNumber: buildNumber,
      platform: platform,
      releaseNotes: releaseNotes,
      minimumSupported: minimumSupported,
      isRequiredUpdate: isRequiredUpdate,
      isActive: isActive,
      releasedAt: releasedAt,
      createdAt: createdAt,
    );
  }

  static const _unset = Object();
  AppVersions copyWith({
    Object? id = _unset,
    Object? versionNumber = _unset,
    Object? buildNumber = _unset,
    Object? platform = _unset,
    Object? releaseNotes = _unset,
    Object? minimumSupported = _unset,
    Object? isRequiredUpdate = _unset,
    Object? isActive = _unset,
    Object? releasedAt = _unset,
    Object? createdAt = _unset,
  }) {
    return AppVersions(
      id: id == _unset ? this.id : id as String,
      versionNumber: versionNumber == _unset
          ? this.versionNumber
          : versionNumber as String,
      buildNumber:
          buildNumber == _unset ? this.buildNumber : buildNumber as int,
      platform: platform == _unset ? this.platform : platform as String,
      releaseNotes:
          releaseNotes == _unset ? this.releaseNotes : releaseNotes as String?,
      minimumSupported: minimumSupported == _unset
          ? this.minimumSupported
          : minimumSupported as bool?,
      isRequiredUpdate: isRequiredUpdate == _unset
          ? this.isRequiredUpdate
          : isRequiredUpdate as bool?,
      isActive: isActive == _unset ? this.isActive : isActive as bool?,
      releasedAt:
          releasedAt == _unset ? this.releasedAt : releasedAt as DateTime,
      createdAt: createdAt == _unset ? this.createdAt : createdAt as DateTime?,
    );
  }
}
